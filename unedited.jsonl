{"id": "0", "text": "Find a string with 1000 'o's but no two adjacent 'o's.", "solution": "def sat(s: str):\n    return s.count('o') == 1000 and s.count('oo') == 0", "title": "TP3/Study_1", "testing_code": "assert sat('hohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohoho') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "1", "text": "Find a string with 1000 'o's, 100 pairs of adjacent 'o's and 801 copies of 'ho'.", "solution": "def sat(s: str):\n    return s.count('o') == 1000 and s.count('oo') == 100 and (s.count('ho') == 801)", "title": "TP3/Study_2", "testing_code": "assert sat('hohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohohoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "2", "text": "Find a permutation of [0, 1, ..., 998] such that the ith element is *not* i, for all i=0, 1, ..., 998.", "solution": "def sat(li: List[int]):\n    return sorted(li) == list(range(999)) and all((li[i] != i for i in range(len(li))))", "title": "TP3/Study_3", "testing_code": "assert sat([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 0]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "3", "text": "Find a list of length 10 where the fourth element occurs exactly twice.", "solution": "def sat(li: List[int]):\n    return len(li) == 10 and li.count(li[3]) == 2", "title": "TP3/Study_4", "testing_code": "assert sat([0, 1, 2, 3, 4, 0, 1, 2, 3, 4]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "4", "text": "Find a list integers such that the integer i occurs i times, for i = 0, 1, 2, ..., 9.", "solution": "def sat(li: List[int]):\n    return all([li.count(i) == i for i in range(10)])", "title": "TP3/Study_5", "testing_code": "assert sat([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "5", "text": "Find an integer greater than 10^10 which is 4 mod 123.", "solution": "def sat(i: int):\n    return i % 123 == 4 and i > 10 ** 10", "title": "TP3/Study_6", "testing_code": "assert sat(10000000126) == True\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False", "entry_fn_name": "sat"}
{"id": "6", "text": "Find a three-digit pattern  that occurs more than 8 times in the decimal representation of 8^2888.", "solution": "def sat(s: str):\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3", "title": "TP3/Study_7", "testing_code": "assert sat('672') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "7", "text": "Find a way to rearrange the letters in the pangram \"The quick brown fox jumps over the lazy dog\" to get\nthe pangram \"The five boxing wizards jump quickly\". The answer should be represented as a list of index\nmappings.", "solution": "def sat(li: List[int]):\n    return ['The quick brown fox jumps over the lazy dog'[i] for i in li] == list('The five boxing wizards jump quickly')", "title": "TP3/Study_9", "testing_code": "assert sat([0, 1, 2, 3, 16, 6, 27, 2, 3, 10, 12, 18, 6, 14, 42, 3, 13, 6, 37, 36, 11, 40, 24, 3, 20, 5, 22, 23, 3, 4, 5, 6, 7, 8, 35, 38]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "8", "text": "Find a palindrome of length greater than 11 in the decimal representation of 8^1818.", "solution": "def sat(s: str):\n    return s in str(8 ** 1818) and s == s[::-1] and (len(s) > 11)", "title": "TP3/Study_10", "testing_code": "assert sat('8834117114388') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "9", "text": "Find a list of strings whose length (viewed as a string) is equal to the lexicographically largest element\nand is equal to the lexicographically smallest element.", "solution": "def sat(ls: List[str]):\n    return min(ls) == max(ls) == str(len(ls))", "title": "TP3/Study_11", "testing_code": "assert sat(['1']) == True\nassert sat(['']) == False\nassert sat(['']) == False\nassert sat(['']) == False\nassert sat(['']) == False\nassert sat(['']) == False", "entry_fn_name": "sat"}
{"id": "10", "text": "Find a list of 1,000 integers where every two adjacent integers sum to 9, and where the first\ninteger plus 4 is 9.", "solution": "def sat(li: List[int]):\n    return all((i + j == 9 for (i, j) in zip([4] + li, li))) and len(li) == 1000", "title": "TP3/Study_12", "testing_code": "assert sat([5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "11", "text": "Find a real number which, when you subtract 3.1415, has a decimal representation starting with 123.456.", "solution": "def sat(x: float):\n    return str(x - 3.1415).startswith('123.456')", "title": "TP3/Study_13", "testing_code": "assert sat(126.5975) == True\nassert sat(0.5) == False\nassert sat(0.5) == False\nassert sat(0.5) == False\nassert sat(0.5) == False\nassert sat(0.5) == False", "entry_fn_name": "sat"}
{"id": "12", "text": "Find a list of integers such that the sum of the first i integers is i, for i=0, 1, 2, ..., 19.", "solution": "def sat(li: List[int]):\n    return all([sum(li[:i]) == i for i in range(20)])", "title": "TP3/Study_14", "testing_code": "assert sat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "13", "text": "Find a list of integers such that the sum of the first i integers is 2^i -1, for i = 0, 1, 2, ..., 19.", "solution": "def sat(li: List[int]):\n    return all((sum(li[:i]) == 2 ** i - 1 for i in range(20)))", "title": "TP3/Study_15", "testing_code": "assert sat([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "14", "text": "Find a real number such that when you add the length of its decimal representation to it, you get 4.5.\nYour answer should be the string form of the number in its decimal representation.", "solution": "def sat(s: str):\n    return float(s) + len(s) == 4.5", "title": "TP3/Study_16", "testing_code": "assert sat('1.5') == True\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False", "entry_fn_name": "sat"}
{"id": "15", "text": "Find a number whose decimal representation is *a longer string* when you add 1,000 to it than when you add 1,001.", "solution": "def sat(i: int):\n    return len(str(i + 1000)) > len(str(i + 1001))", "title": "TP3/Study_17", "testing_code": "assert sat(-1001) == True\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False", "entry_fn_name": "sat"}
{"id": "16", "text": "Find a list of strings that when you combine them in all pairwise combinations gives the six strings:\n'berlin', 'berger', 'linber', 'linger', 'gerber', 'gerlin'", "solution": "def sat(ls: List[str]):\n    return [s + t for s in ls for t in ls if s != t] == 'berlin berger linber linger gerber gerlin'.split()", "title": "TP3/Study_18", "testing_code": "assert sat(['ber', 'lin', 'ger']) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "17", "text": "Find a list of integers whose pairwise sums make the set {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}.\nThat is find L such that, { i + j | i, j in L } = {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}.", "solution": "def sat(li: List[int]):\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}", "title": "TP3/Study_19", "testing_code": "assert sat([0, 1, 2, 3, 17]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "18", "text": "Find a list of integers, starting with 0 and ending with 128, such that each integer either differs from\nthe previous one by one or is thrice the previous one.", "solution": "def sat(li: List[int]):\n    return all((j in {i - 1, i + 1, 3 * i} for (i, j) in zip([0] + li, li + [128])))", "title": "TP3/Study_20", "testing_code": "assert sat([1, 3, 4, 12, 13, 14, 42, 126, 127]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "19", "text": "Find a list integers containing exactly three distinct values, such that no integer repeats\ntwice consecutively among the first eleven entries. (So the list needs to have length greater than ten.)", "solution": "def sat(li: List[int]):\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3", "title": "TP3/Study_21", "testing_code": "assert sat([0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]) == True", "entry_fn_name": "sat"}
{"id": "20", "text": "Find a string s containing exactly five distinct characters which also contains as a substring every other\ncharacter of s (e.g., if the string s were 'parrotfish' every other character would be 'profs').", "solution": "def sat(s: str):\n    return s[::2] in s and len(set(s)) == 5", "title": "TP3/Study_22", "testing_code": "assert sat('abacadaeaaaaaaaaaa') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "21", "text": "Find a list of characters which are aligned at the same indices of the three strings 'dee', 'doo', and 'dah!'.", "solution": "def sat(ls: List[str]):\n    return tuple(ls) in zip('dee', 'doo', 'dah!')", "title": "TP3/Study_23", "testing_code": "assert sat(['d', 'd', 'd']) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "22", "text": "Find a list of integers with exactly three occurrences of seventeen and at least two occurrences of three.", "solution": "def sat(li: List[int]):\n    return li.count(17) == 3 and li.count(3) >= 2", "title": "TP3/Study_24", "testing_code": "assert sat([17, 17, 17, 3, 3]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "23", "text": "Find a permutation of the string 'Permute me true' which is a palindrome.", "solution": "def sat(s: str):\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]", "title": "TP3/Study_25", "testing_code": "assert sat(' eemrtuPutrmee ') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "24", "text": "Divide the decimal representation of 8^88 up into strings of length eight.", "solution": "def sat(ls: List[str]):\n    return ''.join(ls) == str(8 ** 88) and all((len(s) == 8 for s in ls))", "title": "TP3/Study_26", "testing_code": "assert sat(['29642774', '84475294', '60284341', '72162224', '10441043', '71160744', '03984394', '10114150', '60257611', '87823616']) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "25", "text": "Consider a digraph where each node has exactly one outgoing edge. For each edge (u, v), call u the parent and\nv the child. Then find such a digraph where the grandchildren of the first and second nodes differ but they\nshare the same great-grandchildren. Represented this digraph by the list of children indices.", "solution": "def sat(li: List[int]):\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]", "title": "TP3/Study_27", "testing_code": "assert sat([1, 2, 3, 3]) == True", "entry_fn_name": "sat"}
{"id": "26", "text": "Find a list of one hundred integers between 0 and 999 which all differ by at least ten from one another.", "solution": "def sat(li: List[int]):\n    return all((i in range(1000) and abs(i - j) >= 10 for i in li for j in li if i != j)) and len(set(li)) == 100", "title": "TP3/Study_28", "testing_code": "assert sat([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "27", "text": "Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\nhave squares that differ by at least 10.", "solution": "def sat(l: List[int]):\n    return all((i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j)) and len(set(l)) > 995", "title": "TP3/Study_29", "testing_code": "assert sat([0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "28", "text": "Define f(n) to be the residue of 123 times n mod 1000. Find a list of integers such that the first twenty one\nare between 0 and 999, inclusive, and are strictly increasing in terms of f(n).", "solution": "def sat(li: List[int]):\n    return all([123 * li[i] % 1000 < 123 * li[i + 1] % 1000 and li[i] in range(1000) for i in range(20)])", "title": "TP3/Study_30", "testing_code": "assert sat([0, 187, 374, 561, 748, 935, 122, 309, 496, 683, 870, 57, 244, 431, 618, 805, 992, 179, 366, 553, 740]) == True", "entry_fn_name": "sat"}
{"id": "29", "text": "Eight disks of sizes 1-8 are stacked on three towers, with each tower having disks in order of largest to\nsmallest. Move [i, j] corresponds to taking the smallest disk off tower i and putting it on tower j, and it\nis legal as long as the towers remain in sorted order. Find a sequence of moves that moves all the disks\nfrom the first to last towers.", "solution": "def sat(moves: List[List[int]]):\n    rods = ([8, 7, 6, 5, 4, 3, 2, 1], [], [])\n    for [i, j] in moves:\n        rods[j].append(rods[i].pop())\n        if not rods[j][-1] == min(rods[j]):\n            return False\n    return rods[0] == rods[1] == []", "title": "TP3/TowersOfHanoi", "testing_code": "assert sat([[0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2]]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "30", "text": "A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n{0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\norder of list j. Find a sequence of moves that transform the given source to target states.", "solution": "def sat(moves: List[List[int]], source, target):\n    state = [s[:] for s in source]\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        if not state[j] == sorted(state[j]):\n            return False\n    return state == target", "title": "TP3/TowersOfHanoiArbitrary", "testing_code": "assert sat([[0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 0]], [[0, 7], [4, 5, 6], [1, 2, 3, 8]], [[0, 1, 2, 3, 8], [4, 5], [6, 7]]) == True\nassert sat([[0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [0, 2], [1, 2], [0, 1], [2, 0], [2, 1], [0, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 2], [1, 0], [2, 0], [2, 1], [0, 1], [2, 0], [1, 0], [1, 2]], [[5, 6], [1, 2, 4], [0, 3]], [[2, 3, 4, 6], [0, 1], [5]]) == True\nassert sat([[0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [1, 2], [0, 2], [1, 0], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [0, 2], [1, 0], [1, 2], [0, 2], [0, 1], [2, 1], [2, 0], [1, 0], [2, 1], [0, 2], [0, 1], [2, 1], [2, 0], [1, 2], [1, 0], [2, 0], [1, 2], [0, 1], [0, 2], [1, 0]], [[0, 7], [4, 5, 6], [1, 2, 3, 8]], []) == False\nassert sat([], [[0, 7], [4, 5, 6], [1, 2, 3, 8]], [[0, 1, 2, 3, 8], [4, 5], [6, 7]]) == False", "entry_fn_name": "sat"}
{"id": "31", "text": "Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\nHere x is the list of string indices that have not been deleted.", "solution": "def sat(x: List[int], length, s):\n    return all((s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1)))", "title": "TP3/LongestMonotonicSubstring", "testing_code": "assert sat([0, 3, 6, 11, 14, 15, 17, 21, 25, 30, 33, 34, 35], 13, 'Dynamic programming solves this puzzle!!!') == True\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 193, '    !!\"\"\"#$$%&&\\')\\'\\'((()!))****X**++,,,,---...///0111114445556888::::;s;;<<==,=>>>>ABBBBBCDEEEEEEEFGHIIKKKKLMNOOPPPQQQRRRRASUUUVVVWWXXZZZ[]]]!``aEaabbbccccPcdeeeeefghjjjjkkkllmmooooKpppppqsttwt\\'$ww=wLwwyyyyzz{') == True\nassert sat([0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 544, 545, 546, 547, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862], 737, '    _   !m!!!!!!!!!!!V!\"=\"\"\"\"\"l#####$$r$$$$$$$$$%%%%%&&&&&&y&\\'\\'\\'\\'\\'\\'@\\'\\'\\'\\'\\'<(((())))))******+++++++p,,,,,!,-----w-----o-....,.......//////D000000000000111111111222222,23h33c33334444444\\'4455555555566666R6@9777777T7888888-8994999999999::::::::::;;;;;;;P;;;<<<:<<^<)<<sn<<<====u=*=>>>>>>>>>???A?j??8??.?@@O@@@@@@ArAA&ABBBBBBBBBCCCCCDDDEEEEEEEEE%E(EEEEEFF!FFG-GGGGGGGGHHCHHHIGIsIIIInIIIIJJJRJFJJKKKKKKa0K<KKLL.LLLLLLMMMnMMM_MMMNNNONNOOOOOPPPP4LPPPPQQ\\\\QQQbQQQ7QQRRRRR\"RRSSSSSSTTgTTTTUUtUUUUUVVVVVVVVVVVqVVVMWWRWWWWWWWW%XXXXXXXXXXYYYYYZZZZZZZZZ2y[S[[[I[[[[\\\\$g\"\\\\\\\\\\\\\\\\T]]]]]]]]]]^^o^^______________`?&`I`y````aaaaaabbbbcccccc3ddddIu;L*dddeeee#eee]ffff1f]=fffffffffgggghhxhhhhhhiigiiiiiiiDiiCiiiijLjjIljjjjjjjkklllllmmmmJymmmmnnnnMnnnnnnoooiobooXoopppppqy5qqqdqqrrIrrrrJrssssssssTsstt\\'ttttZttt@tttuluuuuu0uuuvvxvvvv\\\\vv3vvvvwwwwwwba.wwx4xxxxxxxxxxxxxJyyyyyyyyyyzzzzzzzz{{{{{{{{') == True\nassert sat([], 0, '') == True\nassert sat([2], 1, 'xwV') == True\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'xwV') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'Dynamic programming solves this puzzle!!!') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'xwV') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'xwV') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'Dynamic programming solves this puzzle!!!') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'xwV') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'Dynamic programming solves this puzzle!!!') == False\nassert sat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207], 5, 'Dynamic programming solves this puzzle!!!') == False\nassert sat([0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 544, 545, 546, 547, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862], 5, 'xwV') == False\nassert sat([0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 294, 295, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 544, 545, 546, 547, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 682, 683, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 772, 773, 774, 775, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862], 5, 'xwV') == False", "entry_fn_name": "sat"}
{"id": "32", "text": "Find the indices of the longest substring with characters in sorted order", "solution": "def sat(x: List[int], length, s):\n    return all((s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1)))", "title": "TP3/LongestMonotonicSubstringTricky", "testing_code": "assert sat([-56, -44, -37, -32, -24, -10, -3, -2, -1, 0, 3, 6, 11, 14, 15, 17, 21, 25, 30, 35, 36, 46, 49, 52, 56, 57], 20, 'Dynamic programming solves this classic job-interview puzzle!!!') == True\nassert sat([-594, -593, -591, -590, -588, -582, -577, -571, -570, -567, -564, -562, -561, -560, -556, -555, -554, -551, -548, -547, -543, -542, -540, -539, -537, -536, -534, -530, -526, -525, -524, -521, -517, -512, -509, -506, -504, -498, -491, -490, -489, -486, -480, -476, -475, -473, -472, -470, -467, -464, -457, -456, -454, -453, -449, -445, -444, -442, -440, -438, -437, -436, -433, -431, -430, -428, -427, -426, -418, -414, -412, -411, -404, -403, -401, -399, -395, -390, -387, -386, -384, -381, -380, -373, -372, -365, -364, -363, -361, -359, -356, -354, -353, -350, -349, -347, -345, -340, -339, -337, -335, -334, -333, -332, -331, -328, -327, -325, -324, -323, -321, -319, -318, -317, -316, -315, -314, -313, -312, -311, -306, -305, -304, -303, -302, -300, -296, -294, -293, -292, -283, -282, -280, -279, -277, -273, -272, -271, -270, -269, -266, -264, -263, -261, -260, -259, -254, -253, -252, -249, -247, -245, -244, -242, -238, -236, -234, -228, -227, -222, -219, -218, -217, -215, -212, -211, -208, -204, -203, -200, -197, -196, -191, -189, -183, -182, -181, -180, -174, -166, -162, -161, -160, -159, -157, -147, -143, -142, -141, -139, -138, -136, -135, -130, -126, -125, -124, -122, -120, -119, -117, -116, -115, -104, -103, -101, -100, -99, -96, -95, -92, -88, -87, -78, -77, -74, -71, -69, -68, -66, -65, -63, -61, -58, -55, -54, -47, -45, -43, -42, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 6, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 25, 26, 29, 30, 32, 33, 35, 39, 40, 41, 45, 48, 49, 54, 57, 63, 65, 66, 69, 70, 75, 76, 79, 80, 83, 84, 87, 88, 91, 93, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 110, 111, 113, 114, 115, 116, 117, 119, 121, 124, 127, 129, 130, 132, 133, 135, 137, 138, 139, 140, 146, 147, 148, 150, 151, 152, 155, 157, 163, 164, 169, 173, 174, 176, 177, 179, 181, 183, 185, 188, 192, 193, 196, 200, 201, 202, 204, 206, 207, 209, 210, 213, 215, 216, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 236, 238, 240, 241, 243, 246, 247, 250, 254, 255, 257, 262, 268, 269, 272, 276, 278, 288, 289, 290, 291, 297, 299, 300, 301, 303, 307, 309, 310, 312, 314, 317, 320, 322, 330, 331, 333, 336, 340, 341, 342, 343, 347, 348, 350, 352, 355, 357, 358, 361, 363, 365, 367, 368, 369, 373, 377, 378, 382, 385, 388, 389, 392, 396, 397, 399, 403, 404, 405, 406, 408, 411, 412, 413, 414, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 434, 435, 440, 442, 445, 446, 447, 449, 450, 452, 453, 454, 458, 461, 464, 465, 466, 469, 470, 471, 475, 480, 484, 485, 486, 487, 489, 490, 491, 492, 493, 496, 500, 504, 505, 508, 509, 512, 513, 514, 517, 518, 519, 523, 525, 526, 528, 531, 536, 538, 539, 541, 542, 545, 546, 547, 548, 549, 552, 554, 557, 559], 535, 'RRRS  S !L!eSSSS!TTT+!TTTUU!!UU!UU\"U\"\"\"VVV\"\"\"VK#WW##gfW##X##6$$X$XX@$XXP%%%YY%+YY%&ZZ)%ZZ&#Z&[&[[[[\\\\\\'\\\\\\\\]\\\\\\\\]\\'\\'\\']]\\']]]^^(^R^((^))^)^^*^_*_L____**;**_``*```++`+`+[+++``,m,,`,,-aa@aa[a-arb-b--b(vzbb-.b.6.ccc.cKcc.cc//c/cc//dddddd/0deeeee000e0f0ff0f01ff11f1<1gg;g12R2g22233gg33g333g3g445555566ghhh66799h9hhh9h999iEii/iYi::i::j:jvv:;;;;jj<j<<k===kkkk===ll=l=l>>l>ll0>l>m>m@mmm??0m^,?nn???n?sn@@oo@DobAAooAo7AAppppBqC$qqqqCCCCqqqqrDrrrrrrrDbrsDDDEsEs9asssfttEtttEEEtEEtFFtuuLFuuuFFFvF0FGvGGGvvvvRwwwwxGHxHHHx+HIxxIexxIIyyyPCyyyII,yIyyIzIJzJJQJzKzzKz{KK{{{{{[K{K{KK{?{KLLLLLLLMMM>NNNNNOOOOOOOOPPPQQQQQQQRRR') == True\nassert sat([-7, -6, -2, 0, 4, 5, 7], 1, 'O!A{SeKv') == True\nassert sat([-63, -60, -59, -57, -55, -52, -50, -48, -39, -38, -37, -36, -34, -30, -27, -26, -25, -24, -23, -21, -19, -18, -17, -13, -12, -11, -10, -8, -7, -6, 1, 5, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 30, 31, 32, 34, 35, 41, 47, 48, 49, 54, 58, 59, 60, 61, 62], 61, \" OW##P%T'UW)X+X-YY]^_`bd/044e5egk7lm779:<m?D@ADnnpDEFIpNNOqqwxx\") == True\nassert sat([-875, -871, -829, -803, -785, -783, -760, -740, -658, -650, -636, -608, -575, -564, -536, -486, -481, -471, -453, -430, -427, -405, -378, -365, -362, -357, -326, -301, -298, -277, -251, -240, -237, -236, -224, -219, -212, -189, -182, -169, -144, -132, -124, -107, -90, -88, -52, -30, -25, 14, 102, 105, 120, 137, 165, 183, 207, 238, 255, 262, 263, 333, 374, 392, 407, 414, 425, 504, 523, 549, 566, 570, 575, 584, 634, 652, 683, 685, 693, 696, 710, 713, 714, 716, 737, 786, 821, 833, 834, 839, 850], 19, '1>C>DmJh5\"Ju,\"Q8zJ_u-O-VfnVTZ?W\\'m=jq.\\\\l&%m$cU.nqv2\\\\**.o\">]FZ5owil>l*kIM wcLd<*UX`\"_u\\'DC3R$8wr;jT]CW\"F$QKeRPMzZY\\'U42&Km dRr8b$T3x)w2v,_k(dR,F:`=c$MjE_Kf/KCXFg^ueiO.U%S8_](:GF;`2`^O%eAqSRAHW0dYg5!u<ZV@usa`-<<ET@xZ)&<6=ogIhp9jJ/`$/_jEa-N$oZVT6#]^]x5u!$ Xk?g=TMwVGZqTU(OeH!Jbgz!9`%yxq(GN+@yD6RM1M#:geJpIPw1l{xxK!z\\'tXS5-S+vvE(nO:I_`l14Gz@U^.Ra73g!iH\\\\\"0{*>F@K\\'q>2HgCc^:baOy[,9vJtFWPAed2w_7zHLl&.x^:XLwwtS+Ocr#, *qXmo9Sp,Z>{l&ElT>RNZ:.5f6,yedMqH8?jA=_@oK;X\\\\pm>r0Il0+k\\\\,&\\'u*(S`]>u?(4M\\\\3=0 F<Jh?v`wz85A=?q3FUP<HiW[t0QB-Dx=e=ggmY29G4[HR!4i-*y@s$0)E\\'XPud6)gt(O[RWVf]ci,4.(:  8H[**k[g* T`z.Y2)Oq5`R8H$$joU/xfl*e4 \\\\z>*MS8wqj0(HwK?gvpuma{V5inBL\",39`%*r$uPi=%:s!<?{FCb-zILUAT?kdy\"B;sfYu#DoVp-\\'+]z:/c8eo2v&UAoeXEe:w#JZHKR\\\\3Xmxf\\'9jlHli*PTR-y`sdqRnv=;E$s]m!%I*`<*&.5N)wrI\"C=4^9RP5\\'9[5\"uG(4YU{3_aPHffi<E*+nVYQq37UP(P#wU9;p0Si.vyM1e?tXWZ9dRho1i!(we-<waQrvITH6vkTCG2 9hxMvtZ8QdR%WQ[B^0X1B;Vm&g/o=;YlD5[`Oh') == True\nassert sat([-63, -60, -59, -57, -55, -52, -50, -48, -39, -38, -37, -36, -34, -30, -27, -26, -25, -24, -23, -21, -19, -18, -17, -13, -12, -11, -10, -8, -7, -6, 1, 5, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 30, 31, 32, 34, 35, 41, 47, 48, 49, 54, 58, 59, 60, 61, 62], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-7, -6, -2, 0, 4, 5, 7], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-63, -60, -59, -57, -55, -52, -50, -48, -39, -38, -37, -36, -34, -30, -27, -26, -25, -24, -23, -21, -19, -18, -17, -13, -12, -11, -10, -8, -7, -6, 1, 5, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 30, 31, 32, 34, 35, 41, 47, 48, 49, 54, 58, 59, 60, 61, 62], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-7, -6, -2, 0, 4, 5, 7], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-7, -6, -2, 0, 4, 5, 7], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-63, -60, -59, -57, -55, -52, -50, -48, -39, -38, -37, -36, -34, -30, -27, -26, -25, -24, -23, -21, -19, -18, -17, -13, -12, -11, -10, -8, -7, -6, 1, 5, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 30, 31, 32, 34, 35, 41, 47, 48, 49, 54, 58, 59, 60, 61, 62], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-63, -60, -59, -57, -55, -52, -50, -48, -39, -38, -37, -36, -34, -30, -27, -26, -25, -24, -23, -21, -19, -18, -17, -13, -12, -11, -10, -8, -7, -6, 1, 5, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 30, 31, 32, 34, 35, 41, 47, 48, 49, 54, 58, 59, 60, 61, 62], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-7, -6, -2, 0, 4, 5, 7], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-7, -6, -2, 0, 4, 5, 7], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False\nassert sat([-63, -60, -59, -57, -55, -52, -50, -48, -39, -38, -37, -36, -34, -30, -27, -26, -25, -24, -23, -21, -19, -18, -17, -13, -12, -11, -10, -8, -7, -6, 1, 5, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 28, 30, 31, 32, 34, 35, 41, 47, 48, 49, 54, 58, 59, 60, 61, 62], 5, 'Dynamic programming solves this classic job-interview puzzle!!!') == False", "entry_fn_name": "sat"}
{"id": "33", "text": "Find a string that when evaluated as a Python expression is that string itself.", "solution": "def sat(quine: str):\n    return eval(quine) == quine", "title": "TP3/Quine", "testing_code": "assert sat('(lambda x: f\\'({x})({chr(34)}{x}{chr(34)})\\')(\"lambda x: f\\'({x})({chr(34)}{x}{chr(34)})\\'\")') == True\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False", "entry_fn_name": "sat"}
{"id": "34", "text": "Find a string that, when reversed and evaluated gives you back that same string.", "solution": "def sat(rev_quine: str):\n    return eval(rev_quine[::-1]) == rev_quine", "title": "TP3/RevQuine", "testing_code": "assert sat('eniuq_ver') == True\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False\nassert sat('1') == False", "entry_fn_name": "sat"}
{"id": "35", "text": "Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\nA monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\nare all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.", "solution": "def sat(colors: List[int], n):\n    if not (set(colors) <= {0, 1} and len(colors) >= n):\n        return False\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any((c == d == squares.get(i + j) for (i, c) in squares.items() for (j, d) in squares.items()))", "title": "TP3/BooleanPythagoreanTriples", "testing_code": "assert sat([1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0], 100) == True\nassert sat([], 0) == True\nassert sat([1], 1) == True\nassert sat('[]', '0') == False\nassert sat('[1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0]', '1') == False\nassert sat('[]', '1') == False\nassert sat('[1]', '0') == False\nassert sat('[]', '100') == False\nassert sat('[1]', '100') == False\nassert sat('[1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0]', '100') == False\nassert sat([], 100) == False\nassert sat('[1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0]', '0') == False\nassert sat('[1]', '1') == False", "entry_fn_name": "sat"}
{"id": "36", "text": "Find clock hands = [hour, min] such that the angle is target_angle degrees.", "solution": "def sat(hands: List[int], target_angle):\n    (h, m) = hands\n    if not (0 < h <= 12 and 0 <= m < 60):\n        return False\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]", "title": "TP3/ClockAngle", "testing_code": "assert sat([4, 30], 45) == True\nassert sat([2, 18], 39) == True\nassert sat([4, 46], 133) == True\nassert sat([2, 36], 138) == True\nassert sat([3, 4], 68) == True\nassert sat([3, 4], 5) == False\nassert sat([4, 30], 5) == False\nassert sat([2, 36], 5) == False\nassert sat([2, 18], 5) == False\nassert sat([2, 36], 5) == False\nassert sat([2, 36], 5) == False\nassert sat([2, 18], 5) == False\nassert sat([2, 36], 5) == False\nassert sat([4, 46], 5) == False\nassert sat([4, 46], 5) == False", "entry_fn_name": "sat"}
{"id": "37", "text": "Find the number of coconuts to solve the following riddle:\nThere is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\none left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\nprocedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\nfifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\nFinally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\nHow many coconuts were there in the original pile?\nQuoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts", "solution": "def sat(n: int):\n    for i in range(5):\n        if not n % 5 == 1:\n            return False\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1", "title": "TP3/MonkeyAndCoconuts", "testing_code": "assert sat(15621) == True\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False", "entry_fn_name": "sat"}
{"id": "38", "text": "Find num_points points in an side x side grid such that no three points are collinear.", "solution": "def sat(coords: List[List[int]], side, num_points):\n    for i1 in range(len(coords)):\n        (x1, y1) = coords[i1]\n        if not (0 <= x1 < side and 0 <= y1 < side):\n            return False\n        for i2 in range(i1):\n            (x2, y2) = coords[i2]\n            for i3 in range(i2):\n                (x3, y3) = coords[i3]\n                if not x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0:\n                    return False\n    return len({(a, b) for (a, b) in coords}) == len(coords) >= num_points", "title": "TP3/No3Colinear", "testing_code": "assert sat([[0, 4], [0, 5], [9, 4], [9, 5], [1, 2], [1, 7], [8, 2], [8, 7], [2, 1], [2, 8], [7, 1], [7, 8], [3, 3], [3, 6], [6, 3], [6, 6], [4, 0], [4, 9], [5, 0], [5, 9]], 10, 20) == True\nassert sat([], 0, 0) == True\nassert sat([[0, 0]], 1, 1) == True\nassert sat([[0, 0], [0, 1], [1, 0], [1, 1]], 2, 4) == True\nassert sat([], 10, 20) == False", "entry_fn_name": "sat"}
{"id": "39", "text": "Find a selection of at most max_stamps stamps whose total worth is the target value.", "solution": "def sat(stamps: List[int], target, max_stamps, options):\n    for s in stamps:\n        if not s in options:\n            return False\n    return len(stamps) <= max_stamps and sum(stamps) == target", "title": "TP3/PostageStamp", "testing_code": "assert sat([32, 32, 8, 8], 80, 4, [10, 32, 8]) == True\nassert sat([37, 39, 39, 39, 39, 39, 39], 271, 8, [37, 37, 12, 87, 39]) == True\nassert sat([1, 1, 1], 3, 3, [18, 1, 43, 81]) == True\nassert sat([19], 19, 2, [19, 14, 81]) == True\nassert sat([56], 56, 1, [25, 22, 8, 84, 60, 56, 54, 7, 8]) == True\nassert sat('[56]', '80', '1', '[10, 32, 8]') == False\nassert sat('[56]', '56', '8', '[10, 32, 8]') == False\nassert sat('[19]', '3', '2', '[10, 32, 8]') == False\nassert sat('[56]', '56', '2', '[10, 32, 8]') == False\nassert sat('[56]', '80', '4', '[10, 32, 8]') == False\nassert sat('[56]', '80', '2', '[10, 32, 8]') == False\nassert sat('[56]', '3', '4', '[10, 32, 8]') == False\nassert sat('[56]', '80', '8', '[10, 32, 8]') == False\nassert sat('[56]', '3', '3', '[10, 32, 8]') == False\nassert sat('[19]', '3', '1', '[10, 32, 8]') == False", "entry_fn_name": "sat"}
{"id": "40", "text": "Find the unique valid solution to the Sudoku puzzle", "solution": "def sat(x: str, puz):\n    if not all((c == '_' or c == s for (c, s) in zip(puz, x))):\n        return False\n    full = set('123456789')\n    for i in range(9):\n        if not {x[i] for i in range(9 * i, 9 * i + 9)} == full:\n            return False\n        if not {x[i] for i in range(i, i + 81, 9)} == full:\n            return False\n        if not {x[9 * a + b + i + 26 * (i % 3)] for a in range(3) for b in range(3)} == full:\n            return False\n    return True", "title": "TP3/Sudoku", "testing_code": "assert sat('481793265975642138632158947356217894294385671817469523123876459568934712749521386', '____9_2___7__________1_8_4____2_78____4_____1____69____2_8___5__6__3_7___49______') == True\nassert sat('842691537193785246576234981631458792789126354254973168328547619915862473467319825', '__2__1_3__9_7_____5______8_6___5_______12____2____3_68________9_1_8__4____7____25') == True\nassert sat('397218456452796813168534972784351269629487531513629784831972645245863197976145328', '__721__56__27___________9______5____62______1_1___9___8_____________3197__61__32_') == True\nassert sat('971834256263579841845261739514987362628453917397126584756342198132698475489715623', '_____42______7_____4______9__49___626_8__3___3_7__65_4_5_3__1__1____8_7__________') == True\nassert sat('312568497879214365645397128198645273254731689763982541926853714437129856581476932', '___56_4_7__92_4_65___3______9____2___5_______7___8___1_________43_____5_____76__2') == True\nassert sat('312568497879214365645397128198645273254731689763982541926853714437129856581476932', '1') == False\nassert sat('312568497879214365645397128198645273254731689763982541926853714437129856581476932', '1') == False\nassert sat('971834256263579841845261739514987362628453917397126584756342198132698475489715623', '1') == False\nassert sat('397218456452796813168534972784351269629487531513629784831972645245863197976145328', '1') == False\nassert sat('842691537193785246576234981631458792789126354254973168328547619915862473467319825', '1') == False\nassert sat('842691537193785246576234981631458792789126354254973168328547619915862473467319825', '1') == False\nassert sat('971834256263579841845261739514987362628453917397126584756342198132698475489715623', '1') == False\nassert sat('312568497879214365645397128198645273254731689763982541926853714437129856581476932', '1') == False\nassert sat('481793265975642138632158947356217894294385671817469523123876459568934712749521386', '1') == False\nassert sat('397218456452796813168534972784351269629487531513629784831972645245863197976145328', '1') == False", "entry_fn_name": "sat"}
{"id": "41", "text": "Partition a square into smaller squares with unique side lengths. A perfect squared path has distinct sides.\nxy_sides is a List of (x, y, side)", "solution": "def sat(xy_sides: List[List[int]]):\n    n = max((x + side for (x, y, side) in xy_sides))\n    if not len({side for (x, y, side) in xy_sides}) == len(xy_sides) > 1:\n        return False\n    for (x, y, s) in xy_sides:\n        if not (0 <= y < y + s <= n and 0 <= x):\n            return False\n        for (x2, y2, s2) in xy_sides:\n            if not (s2 <= s or x2 >= x + s or x2 + s2 <= x or (y2 >= y + s) or (y2 + s2 <= y)):\n                return False\n    return sum((side ** 2 for (x, y, side) in xy_sides)) == n ** 2", "title": "TP3/SquaringTheSquare", "testing_code": "assert sat([[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35], [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18], [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]) == True", "entry_fn_name": "sat"}
{"id": "42", "text": "Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\nreds and blues.", "solution": "def sat(n: int, lace):\n    sub = lace[n:n + len(lace) // 2]\n    return n >= 0 and lace.count('r') == 2 * sub.count('r') and (lace.count('b') == 2 * sub.count('b'))", "title": "TP3/NecklaceSplit", "testing_code": "assert sat(37, 'bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb') == True\nassert sat(0, 'rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr') == True\nassert sat(2, 'brrrbrrbrbbbbbrrbbrr') == True\nassert sat(9, 'bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr') == True\nassert sat(29, 'brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr') == True\nassert sat(5, 'brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr') == False\nassert sat(5, 'brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr') == False\nassert sat(5, 'brrrbrrbrbbbbbrrbbrr') == False\nassert sat(5, 'brrrbrrbrbbbbbrrbbrr') == False\nassert sat(5, 'rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr') == False\nassert sat(5, 'rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr') == False\nassert sat(5, 'bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb') == False\nassert sat(5, 'bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb') == False\nassert sat(5, 'brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr') == False\nassert sat(5, 'brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr') == False", "entry_fn_name": "sat"}
{"id": "43", "text": "Find an integer whose square has all digits 0-9 once.", "solution": "def sat(n: int):\n    s = str(n * n)\n    for i in '0123456789':\n        if not s.count(i) == 1:\n            return False\n    return True", "title": "TP3/PandigitalSquare", "testing_code": "assert sat(32043) == True\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False", "entry_fn_name": "sat"}
{"id": "44", "text": "Find all 174 integers whose 10-digit square has all digits 0-9 just once.", "solution": "def sat(nums: List[int]):\n    return [sorted([int(s) for s in str(n * n)]) for n in set(nums)] == [list(range(10))] * 174", "title": "TP3/AllPandigitalSquares", "testing_code": "assert sat([-99066, -98802, -98055, -97779, -96702, -95154, -94695, -92214, -91605, -91248, -90198, -90153, -90144, -89523, -89355, -89145, -89079, -88623, -87639, -86073, -85803, -85743, -85353, -84648, -83919, -81945, -81222, -80445, -80361, -78453, -78072, -77346, -76182, -76047, -75759, -72621, -71433, -69513, -68781, -68763, -67677, -66276, -66105, -65637, -65634, -63129, -63051, -62961, -62679, -61866, -61575, -60984, -59403, -58554, -58455, -58413, -57321, -56532, -55626, -55581, -55524, -55446, -54918, -53976, -50706, -49353, -49314, -48852, -46587, -45624, -45567, -44016, -43902, -42744, -40545, -39336, -39147, -38772, -37905, -37176, -35853, -35757, -35337, -35172, -33144, -32286, -32043, 32043, 32286, 33144, 35172, 35337, 35757, 35853, 37176, 37905, 38772, 39147, 39336, 40545, 42744, 43902, 44016, 45567, 45624, 46587, 48852, 49314, 49353, 50706, 53976, 54918, 55446, 55524, 55581, 55626, 56532, 57321, 58413, 58455, 58554, 59403, 60984, 61575, 61866, 62679, 62961, 63051, 63129, 65634, 65637, 66105, 66276, 67677, 68763, 68781, 69513, 71433, 72621, 75759, 76047, 76182, 77346, 78072, 78453, 80361, 80445, 81222, 81945, 83919, 84648, 85353, 85743, 85803, 86073, 87639, 88623, 89079, 89145, 89355, 89523, 90144, 90153, 90198, 91248, 91605, 92214, 94695, 95154, 96702, 97779, 98055, 98802, 99066]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "45", "text": "Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.", "solution": "def sat(expr: str, nums):\n    if not (len(nums) == 4 and 1 <= min(nums) and (max(nums) <= 13)):\n        return False\n    expr = expr.replace(' ', '')\n    digits = ''\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in '+*-/(':\n            if not expr[i] in '123456789(':\n                return False\n        if not expr[i] in '1234567890()+-*/':\n            return False\n        digits += expr[i] if expr[i] in '0123456789' else ' '\n    if not sorted((int(s) for s in digits.split())) == sorted(nums):\n        return False\n    return abs(eval(expr) - 24.0) < 1e-06", "title": "TP3/CardGame24", "testing_code": "assert sat('((3)/(7)+3)*(7)', [3, 7, 3, 7]) == True\nassert sat('1+13+3+7', [1, 3, 7, 13]) == True\nassert sat('(10)*(3)+1-(7)', [10, 7, 3, 1]) == True\nassert sat('8+1+3+12', [8, 3, 12, 1]) == True\nassert sat('(10)/(1-((7)/(12)))', [10, 12, 1, 7]) == True\nassert sat('((3)/(7)+3)*(7)', []) == False\nassert sat('', [3, 7, 3, 7]) == False", "entry_fn_name": "sat"}
{"id": "46", "text": "Find a formula using two 8s and two 1's and -+*/ that evaluates to 1.", "solution": "def sat(s: str):\n    return set(s) <= set('18-+*/') and s.count('8') == 2 and (s.count('1') == 1) and (eval(s) == 63)", "title": "TP3/Easy63", "testing_code": "assert sat('8*8-1') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "47", "text": "Find an expression using two 8s and two 1's and -+*/ that evaluates to 1.", "solution": "def sat(s: str):\n    return set(s) <= set('18-+*/') and s.count('8') == 3 and (s.count('1') == 1) and (eval(s) == 63)", "title": "TP3/Harder63", "testing_code": "assert sat('8*8-1**8') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "48", "text": "Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\none jug into another until it is full or the first is empty) to reaches the given goal state.\nmoves is list of [from, to] pairs", "solution": "def sat(moves: List[List[int]], capacities, init, goal):\n    state = init.copy()\n    for [i, j] in moves:\n        if not min(i, j) >= 0:\n            return False\n        if not i != j:\n            return False\n        n = min(capacities[j], state[i] + state[j])\n        (state[i], state[j]) = (state[i] + state[j] - n, n)\n    return state == goal", "title": "TP3/WaterPouring", "testing_code": "assert sat([[0, 1], [1, 2], [2, 0], [1, 2], [0, 1], [1, 2], [2, 0]], [8, 5, 3], [8, 0, 0], [4, 4, 0]) == True\nassert sat([[2, 1], [1, 0], [2, 1], [1, 0], [2, 1], [1, 0], [2, 1], [1, 0], [2, 1], [1, 0], [2, 1], [1, 0], [2, 1], [0, 2], [1, 0], [2, 1], [1, 0]], [724, 43, 611], [72, 2, 269], [56, 0, 287]) == True\nassert sat([[0, 1], [1, 2]], [357, 298, 492], [8, 284, 72], [0, 0, 364]) == True\nassert sat([[0, 1], [2, 0], [1, 2], [2, 0], [0, 1], [2, 0], [1, 2], [2, 0], [0, 1], [2, 0], [1, 2], [0, 1], [2, 0], [0, 1]], [511, 625, 553], [472, 153, 127], [97, 625, 30]) == True\nassert sat([[0, 1], [2, 0], [1, 2]], [86, 259, 281], [47, 18, 35], [35, 0, 65]) == True\nassert sat([[0, 1], [1, 2], [2, 0], [1, 2], [0, 1], [1, 2], [2, 0]], [8, 5, 3], [8, 0, 0], []) == False\nassert sat([], [8, 5, 3], [8, 0, 0], [4, 4, 0]) == False", "entry_fn_name": "sat"}
{"id": "49", "text": "Find a list of integers corresponding to the given list of strings substituting a different digit for each\ncharacter, so that the last string corresponds to the sum of the previous numbers.", "solution": "def sat(li: List[int], words):\n    if not (len(li) == len(words) and all((i > 0 and len(str(i)) == len(w) for (i, w) in zip(li, words)))):\n        return False\n    if not len({c for w in words for c in w}) == len({(d, c) for (i, w) in zip(li, words) for (d, c) in zip(str(i), w)}):\n        return False\n    return sum(li[:-1]) == li[-1]", "title": "TP3/VerbalArithmetic", "testing_code": "assert sat([9567, 1085, 10652], ['SEND', 'MORE', 'MONEY']) == True\nassert sat([29786, 850, 850, 31486], ['FORTY', 'TEN', 'TEN', 'SIXTY']) == True\nassert sat([83446, 135684, 219130], ['GREEN', 'ORANGE', 'COLORS']) == True\nassert sat([1980, 6393, 7177, 15550], ['fqjb', 'awqw', 'lfll', 'fvvvb']) == True\nassert sat([3440, 941, 1552, 8964, 6967, 21864], ['tnnq', 'sna', 'ajjc', 'isun', 'usub', 'caiun']) == True\nassert sat([], ['SEND', 'MORE', 'MONEY']) == False\nassert sat([9567, 1085, 10652], []) == False", "entry_fn_name": "sat"}
{"id": "50", "text": "In this puzzle, you are given a board like:\n1 2 5\n3 4 0\n6 7 8\nand your goal is to transform it to:\n0 1 2\n3 4 5\n6 7 8\nby a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\nof lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\nabove example, an answer would be [1, 2, 5]", "solution": "def sat(moves: List[int], start):\n    locs = {i: [x, y] for (y, row) in enumerate(start) for (x, i) in enumerate(row)}\n    for i in moves:\n        if not abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1:\n            return False\n        (locs[0], locs[i]) = (locs[i], locs[0])\n    return all((locs[i] == [i % len(start[0]), i // len(start)] for i in locs))", "title": "TP3/SlidingPuzzle", "testing_code": "assert sat([5, 1, 4, 12, 13, 14, 8, 10, 14, 13, 12, 8, 9, 5, 1], [[5, 0, 2, 3], [1, 9, 6, 7], [4, 14, 8, 11], [12, 13, 10, 15]]) == True\nassert sat([5, 2, 4, 7, 8, 5, 2, 1], [[1, 5, 0], [3, 2, 8], [6, 4, 7]]) == True\nassert sat([3, 4, 1, 2, 8, 7, 6, 3, 4, 1, 2, 4, 1, 2, 5, 8, 7, 6, 3], [[6, 0, 3], [7, 1, 4], [8, 2, 5]]) == True\nassert sat([], [[0, 1], [2, 3]]) == True\nassert sat([2], [[2, 1], [0, 3]]) == True\nassert sat([], [[5, 0, 2, 3], [1, 9, 6, 7], [4, 14, 8, 11], [12, 13, 10, 15]]) == False", "entry_fn_name": "sat"}
{"id": "51", "text": "Given a list of numbers, find the two closest distinct numbers in the list.\nSample Input:\n[1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\nSample Output:\n[5.23, 5.28]", "solution": "def sat(pair: List[float], nums):\n    (a, b) = pair\n    if not (a in nums and b in nums and (a != b)):\n        return False\n    return abs(a - b) == min((x - y for x in nums for y in nums if x > y))", "title": "TP3/FindCloseElements", "testing_code": "assert sat([4.99, 5.0], [0.17, 21.3, 5.0, 9.0, 11.0, 4.99, 17.0, 17.0, 12.4, 6.8]) == True\nassert sat([-6.773598672960938, -6.642297851887924], [-3.027185809375565, -6.642297851887924, -6.773598672960938, 8.692593210252113, 4.9144452253248225, -6.773598672960938, -9.228605102488878]) == True\nassert sat([-1.5625078353699955, -0.511423740751141], [-1.5625078353699955, 3.6482553468598375, -2.6412688082759868, -0.511423740751141, -2.6412688082759868, 5.648091691238367]) == True\nassert sat([1.6210985169040963, 4.183381104176473], [4.183381104176473, 1.6210985169040963, 1.6210985169040963]) == True\nassert sat([-7.674333581672553, 2.3934380222903258], [2.3934380222903258, -7.674333581672553, 2.3934380222903258]) == True\nassert sat([4.99, 5.0], []) == False", "entry_fn_name": "sat"}
{"id": "52", "text": "Given a string consisting of whitespace and groups of matched parentheses, split it\ninto groups of perfectly matched parentheses without any whitespace.\nSample Input:\n'( ()) ((()()())) (()) ()'\nSample Output:\n['(())', '((()()()))', '(())', '()']", "solution": "def sat(ls: List[str], combined):\n    for s in ls:\n        if not s.count('(') == s.count(')'):\n            return False\n        if not all((s[:i].count('(') > s[:i].count(')') for i in range(1, len(s)))):\n            return False\n    return ''.join(ls) == combined.replace(' ', '')", "title": "TP3/SeparateParenGroups", "testing_code": "assert sat(['()', '(())', '((()()()))', '(())'], '() (()) ((() () ())) (() )') == True\nassert sat(['()', '()'], '()  () ') == True\nassert sat(['((((()())(())())))'], ' ((((() ())( ( ))())))   ') == True\nassert sat(['()'], '()   ') == True\nassert sat(['(())', '(()())', '((((()))(()(()()()(()))(()())(())))())', '(())'], '(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    ') == True\nassert sat(['()', '(())', '((()()()))', '(())'], '') == False\nassert sat([], '() (()) ((() () ())) (() )') == False", "entry_fn_name": "sat"}
{"id": "53", "text": "Given a floating point number, find its fractional part.\nSample Input:\n4.175\nSample Output:\n0.175", "solution": "def sat(x: float, v):\n    return 0 <= x < 1 and (v - x).is_integer()", "title": "TP3/Frac", "testing_code": "assert sat(0.1289199999999937, 523.12892) == True\nassert sat(0.8607091710264854, 93.86070917102649) == True\nassert sat(0.22976286188466588, -6.770237138115334) == True\nassert sat(0.5824430994638874, 61.58244309946389) == True\nassert sat(0.06589966188380458, -80.9341003381162) == True\nassert sat(0.5, 523.12892) == False\nassert sat(0.5, 523.12892) == False\nassert sat(0.5, 61.58244309946389) == False\nassert sat(0.5, 523.12892) == False\nassert sat(0.5, 93.86070917102649) == False\nassert sat(0.5, 61.58244309946389) == False\nassert sat(0.5, -80.9341003381162) == False\nassert sat(0.5, 61.58244309946389) == False\nassert sat(0.5, 93.86070917102649) == False\nassert sat(0.5, -80.9341003381162) == False", "entry_fn_name": "sat"}
{"id": "54", "text": "Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\nSample Input:\n[[12, -5, 3, -99, 14, 88, -99], [-1, 2, 5]]\nSample Output:\n[-89, -1]", "solution": "def sat(firsts: List[int], balances):\n    for (i, bals) in enumerate(balances):\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                if not total == firsts[i]:\n                    return False\n                break\n    return True", "title": "TP3/FirstNegCumulative", "testing_code": "assert sat([-1, -10, -101, -1], [[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]) == True\nassert sat([-1500518832, -922459571, -5581999780, -1496460602, -391376505, -1026876, -4305579008], [[-1500518832, 928669978, -8834236111, 5315367227, 9459906565], [-922459571, 980368404, 2797206106, -8743339029, 1937237746], [-5581999780, -8355044389, 7691080588, 8819548586, -8678046394, 81698589, -1909402868], [-1496460602, -254633700, 1563740297, 2090111052, -2538220111, 2872427340, 3374773774], [8943500651, -9334877156, -8549860005, 7833776489, 6973829595, 7722681537, 535145192, -1822889532, 1811860043, -7700960933], [-1026876, -8774841983, 8413152214, 6772330745, 5578115818, -3502599311, 3134009997, 463541762, 3083435301], [-4305579008, 5200456205, -7357895007]]) == True\nassert sat([-648773994, -3047997421, -4651520348, -2634952680, -3239154229, -3904981094, -9841547454, -4206303129], [[914333345, -1563107339, 668467168, 9415600365, -8131416309, 8389610356, 7604207836, -4164203506, -2291145775], [4697936594, -7745934015], [-4651520348, -3085645067, -4519068178, -7950040818, -9543066562, 5606895475, -1534568525, -8229155741], [-2634952680, 3565837670], [-3239154229, -3459559891, -9783565309, 2874293724], [-3904981094, -7396874754], [-9841547454, -7990665221, 5130235947, -5311423002], [-4206303129, 4047239354, 5652054537, 7165867290]]) == True\nassert sat([-3159744279, -2778889563, -4649451153, -6286190794, -3927971639, -2335049803, -6535156107, -8952966741, -2204564990], [[-3159744279, -5564462797, 9181877256, -581801013, -2730806212, -8069766232], [-2778889563, 6023011147, 6046948312, -1208971488, 2110520757, 7936971409, -4498797430, -7122967646], [-4649451153, -7199067130, 6484358738, -1015824976, 1504326141, 7704654617, 1083805811, -561837290, -9713157689], [-6286190794, 9847932237, -9818551636, -475170800], [-3927971639, 8808808262, 5363473771, 6453926109, -7932299279, 3515829826, -5092391511, 1619970550], [922221935, -3257271738, -4032399516, 5900007512, -2582293019, -1474957782, 2672311585, 5186169557, -4404554166], [3505067196, -649622176, -9390601127, 4030860857], [-8952966741], [2421457437, 531860397, -5157882824, 1563799160, -2925234193, 339874024, -7985065932, 1541877668, 7043758413]]) == True\nassert sat([-2041524901, -5890315263, -700370861, -71670187, -4058863322, -6617394020, -3456426106], [[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]) == True\nassert sat([0], [[914333345, -1563107339, 668467168, 9415600365, -8131416309, 8389610356, 7604207836, -4164203506, -2291145775], [4697936594, -7745934015], [-4651520348, -3085645067, -4519068178, -7950040818, -9543066562, 5606895475, -1534568525, -8229155741], [-2634952680, 3565837670], [-3239154229, -3459559891, -9783565309, 2874293724], [-3904981094, -7396874754], [-9841547454, -7990665221, 5130235947, -5311423002], [-4206303129, 4047239354, 5652054537, 7165867290]]) == False\nassert sat([0], [[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]) == False\nassert sat([0], [[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]) == False\nassert sat([0], [[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]) == False\nassert sat([0], [[914333345, -1563107339, 668467168, 9415600365, -8131416309, 8389610356, 7604207836, -4164203506, -2291145775], [4697936594, -7745934015], [-4651520348, -3085645067, -4519068178, -7950040818, -9543066562, 5606895475, -1534568525, -8229155741], [-2634952680, 3565837670], [-3239154229, -3459559891, -9783565309, 2874293724], [-3904981094, -7396874754], [-9841547454, -7990665221, 5130235947, -5311423002], [-4206303129, 4047239354, 5652054537, 7165867290]]) == False\nassert sat([0], [[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]) == False\nassert sat([0], [[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]) == False\nassert sat([0], [[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]) == False\nassert sat([0], [[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]) == False\nassert sat([0], [[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]) == False", "entry_fn_name": "sat"}
{"id": "55", "text": "Given a list of numbers, find x that minimizes mean squared deviation.\nSample Input:\n[4, -5, 17, -9, 14, 108, -9]\nSample Output:\n17.14285", "solution": "def sat(x: float, nums):\n    return sum(((n - x) ** 2 for n in nums)) * len(nums) <= sum(((m - n) ** 2 for m in nums for n in nums)) * 0.5 + 0.0001", "title": "TP3/MinSquaredDeviation", "testing_code": "assert sat(1.1111111111111112, [12, -2, 14, 3, -15, 10, -45, 3, 30]) == True\nassert sat(-12.75, [-47, -58, -46, -29, 48, -7, 85, -48]) == True\nassert sat(8.6, [-76, -99, 72, 33, 21, -54, -21, 24, 97, 89]) == True\nassert sat(-65.0, [-62, -53, -80]) == True\nassert sat(-8.8, [-76, 76, -88, 37, 7]) == True\nassert sat(-65.0, [0]) == False\nassert sat(-65.0, [0]) == False\nassert sat(-8.8, [0]) == False\nassert sat(8.6, [0]) == False\nassert sat(8.6, [0]) == False\nassert sat(-12.75, [0]) == False\nassert sat(-12.75, [0]) == False\nassert sat(-8.8, [0]) == False\nassert sat(-8.8, [0]) == False\nassert sat(-8.8, [0]) == False", "entry_fn_name": "sat"}
{"id": "56", "text": "Given a list of numbers and a number to inject, create a list containing that number in between each pair of\nadjacent numbers.\nSample Input:\n[8, 14, 21, 17, 9, -5], 3\nSample Output:\n[8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]", "solution": "def sat(li: List[int], nums, sep):\n    return li[::2] == nums and li[1::2] == [sep] * (len(nums) - 1)", "title": "TP3/Intersperse", "testing_code": "assert sat([12, 4, 23, 4, -2, 4, 5, 4, 0], [12, 23, -2, 5, 0], 4) == True\nassert sat([], [], 23) == True\nassert sat([90, 14, 23, 14, 0, 14, 0, 14, 36, 14, 61, 14, 73], [90, 23, 0, 0, 36, 61, 73], 14) == True\nassert sat([41, 2, 60, 2, 18, 2, 34, 2, 31], [41, 60, 18, 34, 31], 2) == True\nassert sat([39, 25, 94, 25, 99, 25, 46, 25, 93], [39, 94, 99, 46, 93], 25) == True\nassert sat('[]', '[]', '23') == False\nassert sat('[]', '[12, 23, -2, 5, 0]', '2') == False\nassert sat('[]', '[41, 60, 18, 34, 31]', '4') == False\nassert sat('[]', '[41, 60, 18, 34, 31]', '2') == False\nassert sat('[]', '[39, 94, 99, 46, 93]', '23') == False\nassert sat('[]', '[]', '4') == False\nassert sat('[]', '[12, 23, -2, 5, 0]', '4') == False\nassert sat('[]', '[]', '14') == False\nassert sat('[]', '[12, 23, -2, 5, 0]', '23') == False\nassert sat('[]', '[39, 94, 99, 46, 93]', '4') == False", "entry_fn_name": "sat"}
{"id": "57", "text": "Given a string consisting of groups of matched nested parentheses separated by parentheses,\ncompute the depth of each group.\nSample Input:\n'(()) ((()()())) (()) ()'\nSample Output:\n[2, 3, 2, 1]", "solution": "def sat(depths: List[int], parens):\n    groups = parens.split()\n    for (depth, group) in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                if not budget >= 0:\n                    return False\n            else:\n                if not c == ')':\n                    return False\n                budget += 1\n        if not success:\n            return False\n    return len(groups) == len(depths)", "title": "TP3/DeepestParens", "testing_code": "assert sat([1, 2, 3, 8], '() (()) ((()()())) (((((((())))))))') == True\nassert sat([], '') == True\nassert sat([2, 7], '(()) (((()(((()())()())))))(())()') == True\nassert sat([2, 2, 1, 2, 3], '(()) ()()(()())() () ()(())() ()((()))') == True\nassert sat([2], '()()(())()(())') == True\nassert sat([1, 2, 3, 8], '') == False\nassert sat('[2, 2, 1, 2, 3]', \"''\") == False\nassert sat('[1, 2, 3, 8]', \"''\") == False\nassert sat('[2, 7]', \"''\") == False\nassert sat('[2]', \"''\") == False\nassert sat([], '() (()) ((()()())) (((((((())))))))') == False\nassert sat('[]', \"''\") == False", "entry_fn_name": "sat"}
{"id": "58", "text": "Find the strings in a list containing a given substring\nSample Input:\n['cat', 'dog', 'bear'], 'a'\nSample Output:\n['cat', 'bear']", "solution": "def sat(containers: List[str], strings, substring):\n    i = 0\n    for s in strings:\n        if substring in s:\n            if not containers[i] == s:\n                return False\n            i += 1\n    return i == len(containers)", "title": "TP3/FindContainers", "testing_code": "assert sat(['cat', 'shatter', 'at'], ['cat', 'dog', 'shatter', 'bear', 'at', 'ta'], 'at') == True\nassert sat(['jsesnicy'], ['ty', 'jy', 'jsesnicy'], 'ses') == True\nassert sat(['rgyjo', 'wutgypepu'], ['rgyjo', 'tipu', 'mulut', 'wutgypepu'], 'gy') == True\nassert sat([], [], 've') == True\nassert sat(['dmmo'], ['te', 'dmmo', ''], 'm') == True\nassert sat(['cat', 'shatter', 'at'], ['cat', 'dog', 'shatter', 'bear', 'at', 'ta'], '') == False\nassert sat(['cat', 'shatter', 'at'], [], 'at') == False", "entry_fn_name": "sat"}
{"id": "59", "text": "Find a list of numbers with a given sum and a given product.\nSample Input:\n12, 32\nSample Output:\n[2, 8, 2]", "solution": "def sat(nums: List[int], tot, prod):\n    if not sum(nums) == tot:\n        return False\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod", "title": "TP3/SumProduct", "testing_code": "assert sat([99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], 14, 99) == True\nassert sat([13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], -81, 13) == True\nassert sat([-44, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 96, -44) == True\nassert sat([24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 86, 24) == True\nassert sat([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], -16, 3) == True\nassert sat([], 14, 99) == False", "entry_fn_name": "sat"}
{"id": "60", "text": "Find a list whose ith element is the maximum of the first i elements of the input list.\nSample Input:\n[2, 8, 2]\nSample Output:\n[2, 8, 8]", "solution": "def sat(maxes: List[int], nums):\n    if not len(maxes) == len(nums):\n        return False\n    for i in range(len(nums)):\n        if i > 0:\n            if not maxes[i] == max(maxes[i - 1], nums[i]):\n                return False\n        elif not maxes[0] == nums[0]:\n            return False\n    return True", "title": "TP3/RollingMax", "testing_code": "assert sat([1, 4, 4, 4, 19], [1, 4, 3, -6, 19]) == True\nassert sat([-15, -6], [-15, -6]) == True\nassert sat([], []) == True\nassert sat([-100, 14, 14, 92, 92, 92, 92], [-100, 14, -45, 92, 36, -68, -40]) == True\nassert sat([23, 23, 96], [23, -34, 96]) == True\nassert sat('[-15, -6]', '[23, -34, 96]') == False\nassert sat('[1, 4, 4, 4, 19]', '[-15, -6]') == False\nassert sat([1, 4, 4, 4, 19], []) == False\nassert sat('[-100, 14, 14, 92, 92, 92, 92]', '[-15, -6]') == False\nassert sat('[-15, -6]', '[1, 4, 3, -6, 19]') == False\nassert sat('[]', '[1, 4, 3, -6, 19]') == False\nassert sat('[-15, -6]', '[-15, -6]') == False\nassert sat('[23, 23, 96]', '[1, 4, 3, -6, 19]') == False\nassert sat('[23, 23, 96]', '[]') == False\nassert sat('[]', '[23, -34, 96]') == False", "entry_fn_name": "sat"}
{"id": "61", "text": "Find a palindrome of a given length containing a given string.\nSample Input:\n\"abba\", 6\nSample Output:\n\"cabbac\"", "solution": "def sat(ans: str, s, length):\n    return ans == ans[::-1] and len(ans) == length and (s in ans)", "title": "TP3/PalindromeContaining", "testing_code": "assert sat('so easyxxxxxxysae os', 'so easy', 20) == True\nassert sat('aabbabbabbaa', 'aabbab', 12) == True\nassert sat('bbbxxxxxxxxxxxxxxxxxxxxxbbb', 'bbb', 27) == True\nassert sat('bbxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxbb', 'bb', 38) == True\nassert sat('', '', 0) == True\nassert sat(\"''\", \"''\", '27') == False\nassert sat(\"''\", \"''\", '38') == False\nassert sat(\"''\", \"''\", '0') == False\nassert sat(\"''\", \"''\", '20') == False\nassert sat(\"''\", \"''\", '12') == False\nassert sat('', 'so easy', 20) == False", "entry_fn_name": "sat"}
{"id": "62", "text": "Find a the XOR of two given strings interpreted as binary numbers.\nSample Input:\n\"0001\", \"1011\"\nSample Output:\n\"1010\"", "solution": "def sat(str_num: str, nums):\n    (a, b) = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)", "title": "TP3/BinaryStrXOR", "testing_code": "assert sat('110001001111', ['100011101100001', '100101100101110']) == True\nassert sat('1110100011', ['1101101111', '11001100']) == True\nassert sat('1110010001', ['11011111', '1101001110']) == True\nassert sat('1110001000', ['100000001', '1010001001']) == True\nassert sat('10000110', ['10010110', '10000']) == True\nassert sat('1', ['11011111', '1101001110']) == False\nassert sat('1', ['11011111', '1101001110']) == False\nassert sat('1', ['10010110', '10000']) == False\nassert sat('1', ['10010110', '10000']) == False\nassert sat('1', ['1101101111', '11001100']) == False\nassert sat('1', ['11011111', '1101001110']) == False\nassert sat('1', ['11011111', '1101001110']) == False\nassert sat('1', ['100000001', '1010001001']) == False\nassert sat('1', ['11011111', '1101001110']) == False\nassert sat('1', ['10010110', '10000']) == False", "entry_fn_name": "sat"}
{"id": "63", "text": "Find the longest of a list of strings\nSample Input:\n[\"cat\", \"dog\", \"sheep\", \"chimp\"]\nSample Output:\n\"sheep\"", "solution": "def sat(ans: str, words):\n    return ans in words and all((len(ans) >= len(w) for w in words))", "title": "TP3/LongestStr", "testing_code": "assert sat('pretty', ['these', 'are', 'some', 'pretty', 'long', 'words']) == True\nassert sat('zetenejubichicyj', ['suquojurethy', 'zetenejubichicyj', 'dyzeroquyxipyfe']) == True\nassert sat('tevozequetextupetha', ['thusisequiw', 'tevozequetextupetha', 'texterut', 'zopuhesofowyk', 'chajokapechunekizic', 'hefuhyjiwakifyma', 'thopebom', 'pah']) == True\nassert sat('wujololyfytew', ['melo', 'zoj', 'wujololyfytew', 'barivitextyte', 'decipywiduvaq', 'ruty', 'gekusoduz']) == True\nassert sat('pethiquifegosych', ['quicydynigatha', 'pethiquifegosych', 'jixotextoxa', 'pe', 'xona', 'cifuco', 'gyrejypifam']) == True\nassert sat('pretty', []) == False\nassert sat('', ['these', 'are', 'some', 'pretty', 'long', 'words']) == False", "entry_fn_name": "sat"}
{"id": "64", "text": "Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\nSample Input:\n20, 30\nSample Output:\n10, -1, 1", "solution": "def sat(ans: List[int], m, n):\n    (gcd, a, b) = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and (gcd > 0)", "title": "TP3/CertifiedGCD", "testing_code": "assert sat([35021, -1, 3], 200004931, 66679984) == True\nassert sat([2, -18930, 60347], 2642408, 828886) == True\nassert sat([846, -1716856, 3], 184428, 105545439738) == True\nassert sat([3045, -9, 343948], 3956548155, 103530) == True\nassert sat([2080, 5415979, -10], 101920, 55199657760) == True\nassert sat([35021, -1, 3], 101920, 5) == False\nassert sat([35021, -1, 3], 184428, 5) == False\nassert sat([35021, -1, 3], 184428, 5) == False\nassert sat([35021, -1, 3], 5, 103530) == False\nassert sat([35021, -1, 3], 5, 828886) == False\nassert sat([35021, -1, 3], 5, 828886) == False\nassert sat([35021, -1, 3], 5, 103530) == False\nassert sat([35021, -1, 3], 5, 828886) == False\nassert sat([35021, -1, 3], 184428, 5) == False\nassert sat([35021, -1, 3], 5, 103530) == False", "entry_fn_name": "sat"}
{"id": "65", "text": "Find all prefixes of a given string\nSample Input:\n\"aabcd\"\nSample Output:\n[\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]", "solution": "def sat(prefixes: List[str], s):\n    return all((s.startswith(p) for p in prefixes)) and len(set(prefixes)) > len(s)", "title": "TP3/AllPrefixes", "testing_code": "assert sat(['', 'd', 'do', 'don', 'done', 'dones', 'donese', 'donesez', 'donesezi', 'donesezic', 'donesezich', 'doneseziche', 'donesezichet', 'donesezicheth', 'donesezichetho', 'donesezichethof', 'donesezichethofa', 'donesezichethofal', 'donesezichethofali', 'donesezichethofalij'], 'donesezichethofalij') == True\nassert sat(['', 'v', 'vu', 'vuf'], 'vuf') == True\nassert sat(['', 't'], 't') == True\nassert sat(['', 'q', 'qu'], 'qu') == True\nassert sat(['', 'd', 'du', 'dug', 'duge', 'duget', 'dugeth', 'dugethi', 'dugethix', 'dugethixu', 'dugethixun', 'dugethixune', 'dugethixunek', 'dugethixuneku'], 'dugethixuneku') == True\nassert sat([], 'donesezichethofalij') == False\nassert sat(['', 'd', 'do', 'don', 'done', 'dones', 'donese', 'donesez', 'donesezi', 'donesezic', 'donesezich', 'doneseziche', 'donesezichet', 'donesezicheth', 'donesezichetho', 'donesezichethof', 'donesezichethofa', 'donesezichethofal', 'donesezichethofali', 'donesezichethofalij'], '') == False", "entry_fn_name": "sat"}
{"id": "66", "text": "Find a string consisting of the non-negative integers up to n inclusive\nSample Input:\n4\nSample Output:\n'0 1 2 3 4'", "solution": "def sat(ans: str, n):\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))", "title": "TP3/SpaceyRange", "testing_code": "assert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', 15) == True\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83', 83) == True\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', 5) == False\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', 5) == False\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', 5) == False\nassert sat('1', 83) == False\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', 5) == False\nassert sat('1', 83) == False\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83', 5) == False\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83', 5) == False\nassert sat('1', 83) == False\nassert sat('0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83', 5) == False", "entry_fn_name": "sat"}
{"id": "67", "text": "Find the set of distinct characters in a string, ignoring case\nSample Input:\n'HELlo', 4\nSample Output:\n['h', 'e', 'l', 'o']", "solution": "def sat(ans: List[str], s, n):\n    if not all((ans.count(c.lower()) == 1 for c in s)):\n        return False\n    if not all((c == c.lower() for c in ans)):\n        return False\n    if not all((c in s.lower() for c in ans)):\n        return False\n    return True", "title": "TP3/DistinctChars", "testing_code": "assert sat(['x', 'r', ' ', 'p', 's', 'd', 'u', 'c', 'h', 't', 'l', 'y', 'v', 'i', 'e', 'o', 'f', 'k', 'g', 'q', 'j', '!', 'z', 'n', 'a', 'w', 'm', 'b'], 'The quick brown fox jumps over the lazy dog!', 28) == True\nassert sat(['i', '>', ',', ']', 'k', 'w', '8', 'q', 'u'], 'Iu]K,>Q8w', 9) == True\nassert sat(['v', '^', '=', 'e', 'c', 'x', 'r', 't', 'k', 'm', 'b', '&', 'q', 'j', 'u'], 'JrUCk=ek&q^xBuvtm', 15) == True\nassert sat(['v', 'n', 'e', 'k', 'w', '-'], 'V-wKeN', 6) == True\nassert sat(['.', 'n', 'y', '^', ';', 'c', 'f', 'h', 'q', '*', 'j'], 'F;J*qHN.^YC', 11) == True\nassert sat(['x', 'r', ' ', 'p', 's', 'd', 'u', 'c', 'h', 't', 'l', 'y', 'v', 'i', 'e', 'o', 'f', 'k', 'g', 'q', 'j', '!', 'z', 'n', 'a', 'w', 'm', 'b'], '', 28) == False\nassert sat([], 'The quick brown fox jumps over the lazy dog!', 28) == False", "entry_fn_name": "sat"}
{"id": "68", "text": "Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\nExample input:\n'o o .| o|'\nExample output:\n[4, 4, 1, 2]", "solution": "def sat(beats: List[int], score):\n    return ' '.join(({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats)) == score", "title": "TP3/ParseMusic", "testing_code": "assert sat([4, 4, 2, 2, 1, 1, 1, 2, 2, 4, 4, 2, 1], 'o o o| o| .| .| .| o| o| o o o| .|') == True\nassert sat([1, 4, 1, 2, 2, 2, 2, 1, 4, 4], '.| o .| o| o| o| o| .| o o') == True\nassert sat([2, 1, 1, 1, 1, 2, 4, 1, 2, 2, 4], 'o| .| .| .| .| o| o .| o| o| o') == True\nassert sat([1, 2], '.| o|') == True\nassert sat([], '') == True\nassert sat([4, 4, 2, 2, 1, 1, 1, 2, 2, 4, 4, 2, 1], '') == False\nassert sat([], 'o o o| o| .| .| .| o| o| o o o| .|') == False", "entry_fn_name": "sat"}
{"id": "69", "text": "Find occurrences of a substring in a parent string *including overlaps*\nSample Input:\n'helllo', 'll'\nSample Output:\n[2, 3]", "solution": "def sat(ans: List[int], s, sub, count):\n    return all((sub == s[i:i + len(sub)] and i >= 0 for i in ans)) and len(set(ans)) >= count", "title": "TP3/OverlappingCount", "testing_code": "assert sat([1, 3, 17, 19, 21, 23, 25], 'Bananannanaannanaanananananana', 'anan', 7) == True\nassert sat([53], 'halidykugadobezebothidububawuvejiquitextyrequamobythynethojahyquutatextoquuzilu', 'ne', 1) == True\nassert sat([8, 23], 'sutapifitextidavyjedakotextopogonudy', 'te', 2) == True\nassert sat([4], 'fizyquohachoromuxuquatextidemihithacazynytytextukozarahuwyfuchyquyhidadytext', 'quohach', 1) == True\nassert sat([4], 'wutextega', 'xtega', 1) == True\nassert sat([1, 3, 17, 19, 21, 23, 25], '', 'anan', 7) == False\nassert sat([], 'Bananannanaannanaanananananana', 'anan', 7) == False", "entry_fn_name": "sat"}
{"id": "70", "text": "Sort numbers based on strings\nSample input\n---\n\"six one four\"\nSample output\n---\n\"one four six\"", "solution": "def sat(ans: str, s):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(' ')] == sorted([nums.index(x) for x in s.split(' ')])", "title": "TP3/SortNumbers", "testing_code": "assert sat('one two three four six eight nine', 'six one four three two nine eight') == True\nassert sat('zero two four six six eight nine nine', 'nine two four nine zero six six eight') == True\nassert sat('two six nine', 'nine six two') == True\nassert sat('four five eight nine', 'five nine four eight') == True\nassert sat('zero zero one five seven seven eight', 'seven eight seven zero zero five one') == True", "entry_fn_name": "sat"}
{"id": "71", "text": "Given a list of numbers, find the indices of the closest pair.\nSample Input:\n[1.2, 5.25, 0.89, 21.0, 5.23]\nSample Output:\n[4, 1]", "solution": "def sat(inds: List[int], nums):\n    (a, b) = inds\n    if not (a != b and a >= 0 and (b >= 0)):\n        return False\n    for i in range(len(nums)):\n        for j in range(i):\n            if not abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a]):\n                return False\n    return True", "title": "TP3/FindClosePair", "testing_code": "assert sat([5, 2], [0.31, 21.3, 5.0, 9.0, 11.0, 5.01, 17.2]) == True\nassert sat([4, 1], [-7.587461542549912, 0.7494004368541578, 2.0142388071411013, -1.552072793834526, 0.44845194836415025]) == True\nassert sat([3, 0], [-5.253924550449174, 7.798134742325132, 2.84274998450722, -5.355403889716619, -8.14069894708204, 6.276599656475899]) == True\nassert sat([2, 0], [8.647950767409466, 6.069423836495417, 8.647950767409466, -4.483139827348948, 7.822521892934297, 6.339621174459673]) == True\nassert sat([0, 1], [-2.4491102095531385, -2.4896924424294635]) == True", "entry_fn_name": "sat"}
{"id": "72", "text": "Rescale and shift numbers so that they cover the range [0, 1]\nSample input\n---\n[18.5, 17.0, 18.0, 19.0, 18.0]\nSample output\n---\n[0.75, 0.0, 0.5, 1.0, 0.5]", "solution": "def sat(ans: List[float], nums):\n    if not (min(ans) == 0.0 and max(ans) == 1.0):\n        return False\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        if not abs(nums[i] - x) < 1e-06:\n            return False\n    return True", "title": "TP3/Rescale", "testing_code": "assert sat([0.7155049786628734, 1.0, 1.0, 0.8933143669985776, 0.0], [13.0, 17.0, 17.0, 15.5, 2.94]) == True\nassert sat([0.0, 1.0, 1.0], [939.7119884829771, 939.7119884829771, 939.7119884829771]) == True\nassert sat([0.7383397398268863, 0.0, 0.485305162648904, 0.7289924122817457, 1.0, 0.6243056485142539, 0.6635647747507857, 0.5272022607474561, 0.650208928154703], [0.4458061970026967, -3.9939008694208376, -1.0757147773525169, 0.3895998276095692, 2.0191942234485825, -0.23989163788911685, -0.003822778565885754, -0.8237835423706446, -0.08413275419390705]) == True\nassert sat([0.8357870307602496, 0.6898466728695877, 0.0, 0.8004673444600794, 0.8657696288945776, 1.0, 0.6961778688397203, 0.7259235136606023, 0.7804246235159261], [1.7162662285160908, -0.5573868669921508, -11.304736303883987, 1.166009156041828, 2.1833750395727782, 4.274594378665487, -0.45875107135742743, 0.0046661656727550556, 0.8537569786748028]) == True\nassert sat([1.0, 0.0], [23.976551109194304, 1.4655002766247416]) == True\nassert sat('[0.0, 1.0, 1.0]', '[939.7119884829771, 939.7119884829771, 939.7119884829771]') == False\nassert sat('[1.0, 0.0]', '[13.0, 17.0, 17.0, 15.5, 2.94]') == False\nassert sat('[0.7155049786628734, 1.0, 1.0, 0.8933143669985776, 0.0]', '[13.0, 17.0, 17.0, 15.5, 2.94]') == False\nassert sat('[0.7155049786628734, 1.0, 1.0, 0.8933143669985776, 0.0]', '[23.976551109194304, 1.4655002766247416]') == False\nassert sat('[0.7383397398268863, 0.0, 0.485305162648904, 0.7289924122817457, 1.0, 0.6243056485142539, 0.6635647747507857, 0.5272022607474561, 0.650208928154703]', '[23.976551109194304, 1.4655002766247416]') == False\nassert sat('[1.0, 0.0]', '[939.7119884829771, 939.7119884829771, 939.7119884829771]') == False\nassert sat('[0.0, 1.0, 1.0]', '[23.976551109194304, 1.4655002766247416]') == False\nassert sat('[0.7383397398268863, 0.0, 0.485305162648904, 0.7289924122817457, 1.0, 0.6243056485142539, 0.6635647747507857, 0.5272022607474561, 0.650208928154703]', '[13.0, 17.0, 17.0, 15.5, 2.94]') == False\nassert sat('[0.0, 1.0, 1.0]', '[13.0, 17.0, 17.0, 15.5, 2.94]') == False\nassert sat('[1.0, 0.0]', '[0.4458061970026967, -3.9939008694208376, -1.0757147773525169, 0.3895998276095692, 2.0191942234485825, -0.23989163788911685, -0.003822778565885754, -0.8237835423706446, -0.08413275419390705]') == False", "entry_fn_name": "sat"}
{"id": "73", "text": "Find a list of strings where the only valid integers are at the given indices\nSample input\n---\n[2, 4, 5]\nSample output\n---\n[\"cat\", \"2.7\", \"2\", \"\", \"3\", \"-17\", \"free\"]", "solution": "def sat(candidates: List[str], int_indices):\n    for i in int_indices:\n        int(candidates[i])\n    for (i, s) in enumerate(candidates):\n        if i not in int_indices:\n            try:\n                int(s)\n                return False\n            except ValueError:\n                pass\n    return True", "title": "TP3/FilterInts", "testing_code": "assert sat(['', '', '17', '', '17', '', '', '17', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17'], [2, 4, 7, 9, 101]) == True\nassert sat(['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '', '', '', '', '17'], [80, 17, 74]) == True\nassert sat(['', '', '', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '', '', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17', '17', '', '', '', '17'], [56, 37, 17, 83, 35, 22, 4, 78, 79]) == True\nassert sat(['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17'], [25, 65]) == True\nassert sat(['17', '', '', '', '', '', '', '', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17', '', '', '', '', '', '', '', '17', '', '17', '', '', '', '', '', '', '17', '', '', '', '', '', '', '17', '', '17'], [92, 74, 83, 90, 9, 76, 66, 0]) == True\nassert sat(['', '', '17', '', '17', '', '', '17', '', '17', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '17'], []) == False", "entry_fn_name": "sat"}
{"id": "74", "text": "Find the lengths of a list of non-empty strings\nSample input\n---\n[\"foo\", \"bars\"]\nSample output\n---\n[3, 4]", "solution": "def sat(lengths: List[int], strs):\n    for (length, s) in zip(lengths, strs):\n        try:\n            s[length]\n            return False\n        except IndexError:\n            s[length - 1]\n    return len(lengths) == len(strs)", "title": "TP3/StrLength", "testing_code": "assert sat([45, 1, 3, 3], ['pneumonoultramicroscopicsilicovolcanoconiosis', ' ', 'foo', '2.5']) == True\nassert sat([2, 10, 7, 33, 39, 25, 13, 14, 35, 31], ['=i', '&?Jq 2aNHt', '?uCcQht', 'e>8=4jZNfhZl3&Mko-MfWd<^QR Vf7:2M', ']Y,G2U4ur-7X,T@(Gv$:Y0^C,-$+xM9$X2,*90|', '+>&?Qa%yLWZA2nBDQ8i)zvVWT', 'Ly+NcKgOvg3J)', 's$0^cow)Q917uY', 'ZSA$sIKe|pz@|[<kk,h[eFCiD#xxN7*G*Ic', '2q7eG maF4Gi8gJvJr[mgY,[jt(VL|2']) == True\nassert sat([42, 5, 32, 17, 25, 27, 41, 8, 19, 41], ['A/io]X92K;9aWaICuk7[]p|;af9#L#&aIk6I4E=c8u', '64P#$', 'cOpGRh3@ RoUho:YtF9L>/%4=%?ry(+2', '&.Qf?cuJI%m.>pBZY', 'FUeoE;h(#,f5<jC>[%xwK9@EU', '2NNz-,|C*]Vu9E7|!7mA+ oM9<N', '[3 !D2ddGb4aY17(=Q7lQZ&f H)Hrp)]VHFnxy6Jp', 'wg#VJiO-', 'jwBAk$XQ&*95d;[j,Y+', '!t:$CE#)+Pk7De*V|*&Z@u&0+gIhto/&.P*=q|!hw']) == True\nassert sat([13, 17, 22, 29, 15, 34, 36, 42, 46, 33], ['ij+OUM5ZP Q3?', '^D.i+GLGID@2oUVF4', 'VaLA:aPP@5eKY,WK9MS*Ez', '.%fR+&q&0>Y(l%O2ub5<YXU#K.?9g', 'bO6[sMEL.g0^+r0', 'yCKQT^6Ug4al|r!PiMOF[KHz^%:WYTi]-G', '4lORJ/yub%d5gR@@>ciSw-]geHu6NgF9au)r', 'ED!Bz=4nF6  z^kMW-3-&<Eoc9B604*yscpnhcmJ?/', '?!u7%E0G4Z.r- V9LL 1Cd(W9eL=E^58a2xuf)ZYj-ILLW', 'A|NlyRr8uQG2eJm4y<Bu,r#fz&eNB]=hp']) == True\nassert sat([1, 17, 32, 17, 25, 32, 22, 17, 9, 33], ['g', ';TWy9!004X#d7!0p ', 'eaX%:#7S2IIIUe&#r3=EB1;5K)3j;1Vn', ']cz!vZ]Wq&O]sMR8D', ')o=#sAp-c8:SM&.yRBpCMmS)-', 'Ql d.i(UA/|sFqHQ/c3M>p]exH|sgXQt', 'mwoa[nS-[%R(rf5!)9o.M[', '23Q0Sugd(RKZ+GuLu', 'x^VP2ZX$8', 'q7(GrHGkG6er!7hX+ZeKolCgdlqI0(*um']) == True\nassert sat([45, 1, 3, 3], []) == False\nassert sat([], ['pneumonoultramicroscopicsilicovolcanoconiosis', ' ', 'foo', '2.5']) == False", "entry_fn_name": "sat"}
{"id": "75", "text": "Find the largest integer divisor of a number n that is less than n\nSample input\n---\n1000\nSample output\n---\n500", "solution": "def sat(d: int, n):\n    return n % d == 0 and d < n and all((n % e for e in range(d + 1, n)))", "title": "TP3/LargestDivisor", "testing_code": "assert sat(61728, 123456) == True\nassert sat(8918, 17836) == True\nassert sat(23931, 71793) == True\nassert sat(7733, 15466) == True\nassert sat(19189, 57567) == True\nassert sat(5, 57567) == False\nassert sat(8918, 5) == False\nassert sat(8918, 5) == False\nassert sat(19189, 5) == False\nassert sat(7733, 5) == False\nassert sat(5, 71793) == False\nassert sat(61728, 5) == False\nassert sat(5, 17836) == False\nassert sat(7733, 5) == False\nassert sat(8918, 5) == False", "entry_fn_name": "sat"}
{"id": "76", "text": "Factor number n into a given number of non-trivial factors\nSample input\n---\n1000, 6\nSample output\n---\n[2, 2, 2, 5, 5, 5]", "solution": "def sat(factors: List[int], n, num_factors):\n    if not len(factors) == num_factors:\n        return False\n    prod = 1\n    for d in factors:\n        prod *= d\n        if not d > 1:\n            return False\n    return prod == n", "title": "TP3/PrimeFactorization", "testing_code": "assert sat([2, 2, 2, 2, 2, 2, 3, 643], 123456, 8) == True\nassert sat([2, 5, 7, 11, 37, 47], 1339030, 6) == True\nassert sat([2, 2, 2, 13, 29, 47], 141752, 6) == True\nassert sat([2, 2, 2, 2, 2, 2, 11, 47], 33088, 8) == True\nassert sat([2, 2, 2, 5, 5, 19, 19, 23, 29, 31, 37, 43], 2375171125400, 12) == True\nassert sat('[2, 5, 7, 11, 37, 47]', '123456', '12') == False\nassert sat('[2, 5, 7, 11, 37, 47]', '141752', '8') == False\nassert sat('[2, 2, 2, 13, 29, 47]', '123456', '8') == False\nassert sat('[2, 5, 7, 11, 37, 47]', '141752', '12') == False\nassert sat('[2, 5, 7, 11, 37, 47]', '1339030', '8') == False\nassert sat('[2, 5, 7, 11, 37, 47]', '123456', '6') == False\nassert sat('[2, 5, 7, 11, 37, 47]', '33088', '12') == False\nassert sat('[2, 2, 2, 13, 29, 47]', '141752', '8') == False\nassert sat('[2, 5, 7, 11, 37, 47]', '33088', '8') == False\nassert sat('[2, 2, 2, 13, 29, 47]', '33088', '8') == False", "entry_fn_name": "sat"}
{"id": "77", "text": "Remove duplicates from a list of integers, preserving order\nSample input\n---\n[1, 3, 2, 9, 2, 1, 55]\nSample output\n---\n[1, 3, 2, 9, 55]", "solution": "def sat(ans: List[int], li):\n    return set(ans) == set(li) and all((li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1)))", "title": "TP3/Dedup", "testing_code": "assert sat([2, 19, 53, 1, 44, 17, 0, 31], [2, 19, 2, 53, 1, 1, 2, 44, 17, 0, 19, 31]) == True\nassert sat([3, 7, 9, 2, 4, 1], [3, 3, 7, 9, 7, 2, 9, 4, 1]) == True\nassert sat([3, 9, 8, 5, 1], [3, 9, 8, 9, 3, 5, 1, 3, 5]) == True\nassert sat([3, 8, 2, 1, 7, 5, 9], [3, 8, 2, 1, 1, 7, 7, 7, 5, 5, 5, 9, 3, 7, 7]) == True\nassert sat([0, 3, 2, 7, 6, 4, 5], [0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]) == True\nassert sat('[3, 8, 2, 1, 7, 5, 9]', '[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]') == False\nassert sat('[3, 8, 2, 1, 7, 5, 9]', '[3, 3, 7, 9, 7, 2, 9, 4, 1]') == False\nassert sat('[0, 3, 2, 7, 6, 4, 5]', '[3, 9, 8, 9, 3, 5, 1, 3, 5]') == False\nassert sat([2, 19, 53, 1, 44, 17, 0, 31], []) == False\nassert sat('[3, 9, 8, 5, 1]', '[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]') == False\nassert sat('[3, 8, 2, 1, 7, 5, 9]', '[2, 19, 2, 53, 1, 1, 2, 44, 17, 0, 19, 31]') == False\nassert sat('[3, 9, 8, 5, 1]', '[3, 3, 7, 9, 7, 2, 9, 4, 1]') == False\nassert sat('[3, 7, 9, 2, 4, 1]', '[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]') == False\nassert sat('[2, 19, 53, 1, 44, 17, 0, 31]', '[3, 9, 8, 9, 3, 5, 1, 3, 5]') == False\nassert sat('[3, 9, 8, 5, 1]', '[3, 9, 8, 9, 3, 5, 1, 3, 5]') == False", "entry_fn_name": "sat"}
{"id": "78", "text": "Flip case\nSample input\n---\n'cAt'\nSample output\n---\n'CaT'", "solution": "def sat(ans: str, s):\n    return len(ans) == len(s) and all(({c, d} == {d.upper(), d.lower()} for (c, d) in zip(ans, s)))", "title": "TP3/FlipCase", "testing_code": "assert sat('fLiP me!', 'FlIp ME!') == True\nassert sat('Mkc(k2.A!z|>SV3IZc3!', 'mKC(K2.a!Z|>sv3izC3!') == True\nassert sat('k A&3 Te 1Tsg b3V3Y(', 'K a&3 tE 1tSG B3v3y(') == True\nassert sat('sB31e#E<@3U', 'Sb31E#e<@3u') == True\nassert sat('Q y*.ZV? !3b3::/3%f3', 'q Y*.zv? !3B3::/3%F3') == True\nassert sat('', 'FlIp ME!') == False\nassert sat('fLiP me!', '') == False", "entry_fn_name": "sat"}
{"id": "79", "text": "Concatenate a list of strings\nSample input\n---\n['cat', 'dog', 'bird']\nSample output\n---\n'catdogbird'", "solution": "def sat(cat: str, strings):\n    i = 0\n    for s in strings:\n        for c in s:\n            if not cat[i] == c:\n                return False\n            i += 1\n    return i == len(cat)", "title": "TP3/CatStrings", "testing_code": "assert sat('WilliamNowhere', ['Will', 'i', 'am', 'Now', 'here']) == True\nassert sat('dufekeretkothihisedatextumuvapesicelynyzysukydewzukathubaki', ['dufe', 'keret', 'kothihisedatextumuva', 'pe', 'sicelynyzysukydew', 'zu', 'kathubaki']) == True\nassert sat('', []) == True\nassert sat('cvawumichtextucagidyhikomurowuchiquusojahozl', ['c', 'vawumich', 'textucagidyhikomuro', 'wuchiquusojahoz', 'l']) == True\nassert sat('snutextquoxezenukowyhobotidyhukicethytextithybaqu', ['s', 'nutext', 'quoxezenukowyho', 'botidyhu', 'kicethytextithybaqu']) == True\nassert sat('WilliamNowhere', []) == False", "entry_fn_name": "sat"}
{"id": "80", "text": "Find the strings in a list starting with a given prefix\nSample Input:\n['cat', 'car', 'fear', 'center'], 'ca'\nSample Output:\n['cat', 'car']", "solution": "def sat(extensions: List[str], strings, prefix):\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            if not extensions[i] == s:\n                return False\n            i += 1\n    return i == len(extensions)", "title": "TP3/FindExtensions", "testing_code": "assert sat(['dog', 'donut'], ['cat', 'dog', 'shatter', 'donut', 'at', 'todo'], 'do') == True\nassert sat([], ['cot', 'z'], 'ca') == True\nassert sat([], ['jof', 'thibi'], 'le') == True\nassert sat(['t'], ['t'], 't') == True\nassert sat(['cpud', 'cpal', 'cv', 'cchut'], ['cpud', 'cpal', 'cv', 'cchut'], 'c') == True\nassert sat(['dog', 'donut'], [], 'do') == False\nassert sat(['dog', 'donut'], ['cat', 'dog', 'shatter', 'donut', 'at', 'todo'], '') == False", "entry_fn_name": "sat"}
{"id": "81", "text": "Find the positive integers in a list\nSample Input:\n[-1, 3, 19, -2, 0, 44, 0, 44, 11]\nSample Output:\n[3, 19, 44, 44, 11]", "solution": "def sat(positives: List[int], nums):\n    stack = positives[::-1]\n    for n in nums:\n        if not (n <= 0 or n == stack.pop()):\n            return False\n    return stack == []", "title": "TP3/FindPositives", "testing_code": "assert sat([2, 2342, 32, 2342, 44, 11], [2, 2342, -2, 32, -8, -5, 2342, 0, -9, 44, 11]) == True\nassert sat([53, 33, 73, 47, 35, 24, 56, 89, 85], [53, 33, 73, 47, 35, 24, 56, 89, 85]) == True\nassert sat([61, 87], [61, -64, -11, -3, -96, -69, -18, -99, 87]) == True\nassert sat([62, 3], [62, 3, -84]) == True\nassert sat([], []) == True\nassert sat([2, 2342, 32, 2342, 44, 11], []) == False", "entry_fn_name": "sat"}
{"id": "82", "text": "Find Fermat composite certificates for a list of numbers > 1\nSample Input:\n[1469]\nSample Output:\n[3]  # because (3 ** 1468) % 1469 != 1", "solution": "def sat(certificates: List[int], nums):\n    return all((pow(cert, n - 1, n) > 1 for (cert, n) in zip(certificates, nums))) and len(certificates) == len(nums)", "title": "TP3/FermatComposites", "testing_code": "assert sat([2, 2, 2, 2, 2], [1449, 14, 21, 105, 217]) == True\nassert sat([2, 2, 2, 2, 2, 2, 2, 2, 2], [2299290630, 2051931473, 1592080723, 533977507, 6381433197, 6645010323, 5590359939, 1543343895, 1032597423]) == True\nassert sat([2, 2, 2, 2, 2, 2, 2, 2], [962036141, 941419353, 5954955179, 5140095171, 3027040707, 6069862645, 591197645, 2485033263]) == True\nassert sat([2, 2, 2, 2, 2, 2, 2], [99210055, 4171577125, 459354525, 1534026075, 4255533095, 2441396441, 155962261]) == True\nassert sat([2, 2, 2, 2], [2629304451, 4885026075, 2283948525, 4145214425]) == True\nassert sat([], [1449, 14, 21, 105, 217]) == False\nassert sat([2, 2, 2, 2, 2], []) == False", "entry_fn_name": "sat"}
{"id": "83", "text": "Find a real root of an odd degree polynomial from its coefficients\nSample Input:\n[1, 0, 8]\nSample Output:\n-2.0  # 1*(-2.0)^3 + 8 == 0", "solution": "def sat(root: float, coeffs):\n    return abs(sum((coeff * root ** i for (i, coeff) in enumerate(coeffs)))) < 0.0001", "title": "TP3/OddDegreePolynomialRoot", "testing_code": "assert sat(-0.33978271484375, [1, 2, 3, 17]) == True\nassert sat(-0.1689453125, [-1, -5, 4, -8, 3, -1, 0, 7]) == True\nassert sat(-6.999969482421875, [7, 1]) == True\nassert sat(0.8468093872070312, [1, 4, 1, -7, 5, 0, -10, -9, 4, 9]) == True\nassert sat(-0.875, [7, 8]) == True\nassert sat(0.5, [1, 2, 3, 17]) == False\nassert sat(0.5, [1, 2, 3, 17]) == False\nassert sat(0.5, [1, 2, 3, 17]) == False\nassert sat(0.5, [1, 2, 3, 17]) == False\nassert sat(0.5, [1, 2, 3, 17]) == False\nassert sat(0.5, [7, 8]) == False\nassert sat(0.5, [7, 8]) == False\nassert sat(0.5, [-1, -5, 4, -8, 3, -1, 0, 7]) == False\nassert sat(0.5, [7, 1]) == False\nassert sat(0.5, [-1, -5, 4, -8, 3, -1, 0, 7]) == False", "entry_fn_name": "sat"}
{"id": "84", "text": "Start with a list of integers, keep every third element in place and otherwise sort the list\nSample Input:\n[8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\nSample Output:\n[8, 0, 2, 2, 4, 8, 1, 8, 9, 3]", "solution": "def sat(li: List[int], orig):\n    if not orig[::3] == li[::3]:\n        return False\n    if not sorted(li) == sorted(orig):\n        return False\n    if not all((li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))):\n        return False\n    if not all((li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))):\n        return False\n    return True", "title": "TP3/TwoThirdsSorted", "testing_code": "assert sat([1, -29, -2, 17, 0, 3, 12, 3, 4, 5, 8, 18, 0], [1, -2, 3, 17, 8, 4, 12, 3, 18, 5, -29, 0, 0]) == True\nassert sat([-10, -9, -7, -6, -4, 0, -2, 0, 3, 2, 4, 8, -8, 9, 9, -4], [-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]) == True\nassert sat([0, -9, -9, -3, -3, 2, 5, 2, 7], [0, 7, -3, -3, 2, 2, 5, -9, -9]) == True\nassert sat([-1, -7, -4, 6, -1, -1, 4, -1, -1, 9, 0, 1, 6, 1, 3, -4, 4], [-1, -1, 0, 6, 3, -1, 4, -1, 1, 9, -4, -1, 6, 4, -7, -4, 1]) == True\nassert sat([], []) == True\nassert sat('[-10, -9, -7, -6, -4, 0, -2, 0, 3, 2, 4, 8, -8, 9, 9, -4]', '[1, -2, 3, 17, 8, 4, 12, 3, 18, 5, -29, 0, 0]') == False\nassert sat('[-10, -9, -7, -6, -4, 0, -2, 0, 3, 2, 4, 8, -8, 9, 9, -4]', '[]') == False\nassert sat('[0, -9, -9, -3, -3, 2, 5, 2, 7]', '[0, 7, -3, -3, 2, 2, 5, -9, -9]') == False\nassert sat('[0, -9, -9, -3, -3, 2, 5, 2, 7]', '[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]') == False\nassert sat('[]', '[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]') == False\nassert sat('[-1, -7, -4, 6, -1, -1, 4, -1, -1, 9, 0, 1, 6, 1, 3, -4, 4]', '[0, 7, -3, -3, 2, 2, 5, -9, -9]') == False\nassert sat('[1, -29, -2, 17, 0, 3, 12, 3, 4, 5, 8, 18, 0]', '[]') == False\nassert sat('[0, -9, -9, -3, -3, 2, 5, 2, 7]', '[-1, -1, 0, 6, 3, -1, 4, -1, 1, 9, -4, -1, 6, 4, -7, -4, 1]') == False\nassert sat('[-10, -9, -7, -6, -4, 0, -2, 0, 3, 2, 4, 8, -8, 9, 9, -4]', '[0, 7, -3, -3, 2, 2, 5, -9, -9]') == False\nassert sat('[1, -29, -2, 17, 0, 3, 12, 3, 4, 5, 8, 18, 0]', '[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]') == False", "entry_fn_name": "sat"}
{"id": "85", "text": "Find an increasing sequence consisting of the elements of the original list.\nSample Input:\n[8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\nSample Output:\n[-2, 0, 2, 3, 4, 7, 8, 9]", "solution": "def sat(li: List[int], orig):\n    for i in range(len(li) - 1):\n        if not li[i] < li[i + 1]:\n            return False\n        if not li[i] in orig:\n            return False\n    for n in orig:\n        if not n in li:\n            return False\n    return True", "title": "TP3/UniqueSorted", "testing_code": "assert sat([-4, 0, 1, 2, 3, 8, 32], [1, 1, 3, 2, 0, 8, 32, -4, 0]) == True\nassert sat([-10, -9, -5, -2, -1, 1, 3, 5, 6, 8], [-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]) == True\nassert sat([-10, -3, 2, 5, 7, 8, 9], [-3, 7, 9, -10, -10, 5, 2, 8]) == True\nassert sat([-6], [-6]) == True\nassert sat([-10, -7, -6, -5, -3, -2, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, -5, 6, 2, -7, -6, 5, -5, 3, 7, 4, -10, -2, 3, 7, 9, -3, 8, 7]) == True\nassert sat('[-6]', '[-6]') == False\nassert sat('[-10, -9, -5, -2, -1, 1, 3, 5, 6, 8]', '[-6]') == False\nassert sat('[-4, 0, 1, 2, 3, 8, 32]', '[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]') == False\nassert sat('[-6]', '[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]') == False\nassert sat('[-10, -3, 2, 5, 7, 8, 9]', '[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]') == False\nassert sat('[-6]', '[1, -5, 6, 2, -7, -6, 5, -5, 3, 7, 4, -10, -2, 3, 7, 9, -3, 8, 7]') == False\nassert sat('[-10, -3, 2, 5, 7, 8, 9]', '[-6]') == False\nassert sat('[-4, 0, 1, 2, 3, 8, 32]', '[-6]') == False\nassert sat('[-6]', '[1, 1, 3, 2, 0, 8, 32, -4, 0]') == False\nassert sat('[-10, -7, -6, -5, -3, -2, 1, 2, 3, 4, 5, 6, 7, 8, 9]', '[-3, 7, 9, -10, -10, 5, 2, 8]') == False", "entry_fn_name": "sat"}
{"id": "86", "text": "Find the largest integer in a sequence\nSample Input:\n[8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\nSample Output:\n9", "solution": "def sat(m: int, hello):\n    return m in hello and (not any((m < i for i in hello)))", "title": "TP3/MaxInt", "testing_code": "assert sat(3502145, [1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 3502145, 3502145, 21, 18, 2, 60]) == True\nassert sat(2, [2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]) == True\nassert sat(8, [8, -1, -8, 1, -10]) == True\nassert sat(9, [-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]) == True\nassert sat(9, [5, 2, -10, -2, -4, 2, 3, -5, 9, 0]) == True\nassert sat('8', '[-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]') == False\nassert sat('3502145', '[-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]') == False\nassert sat('2', '[1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 3502145, 3502145, 21, 18, 2, 60]') == False\nassert sat('2', '[8, -1, -8, 1, -10]') == False\nassert sat('9', '[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]') == False\nassert sat('2', '[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]') == False\nassert sat('8', '[1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 3502145, 3502145, 21, 18, 2, 60]') == False\nassert sat('9', '[5, 2, -10, -2, -4, 2, 3, -5, 9, 0]') == False\nassert sat('3502145', '[8, -1, -8, 1, -10]') == False\nassert sat('3502145', '[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]') == False", "entry_fn_name": "sat"}
{"id": "87", "text": "Find all 7's in integers less than n that are divisible by 11 or 13\nSample Input:\n79, 3\nSample Output:\n[[77, 0], [77, 1], [78, 0]]", "solution": "def sat(li: List[List[int]], n, lower):\n    if not len({(i, j) for (i, j) in li}) >= lower:\n        return False\n    return all((str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and (0 <= i < n) and (0 <= j) for (i, j) in li))", "title": "TP3/SevenElevenThirteen", "testing_code": "assert sat([], 5, 0) == True\nassert sat([], 8, 0) == True\nassert sat([], 11, 0) == True\nassert sat([], 11, 5) == False\nassert sat([], 8, 5) == False\nassert sat([], 5, 5) == False\nassert sat([], 11, 5) == False\nassert sat([], 8, 5) == False\nassert sat([], 8, 5) == False\nassert sat([], 8, 5) == False\nassert sat([], 11, 5) == False\nassert sat([], 8, 5) == False\nassert sat([], 5, 5) == False", "entry_fn_name": "sat"}
{"id": "88", "text": "Start with a list of integers, keep every other element in place and otherwise sort the list\nSample Input:\n[8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\nSample Output:\n[1, 0, 2, 2, 4, 8, 8, 8, 9, 3]", "solution": "def sat(li: List[int], orig):\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])", "title": "TP3/HalfSorted", "testing_code": "assert sat([-29, 6, 1, 41, 3, 4, 12, 3, 18, 5, 19, 0, 19521], [1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]) == True\nassert sat([-8, -9, -7, 8, -1, 2, 7], [-1, -9, 7, 8, -8, 2, -7]) == True\nassert sat([-8, -3, 4], [4, -3, -8]) == True\nassert sat([-9, 6, -8, 1, -7, -10, 1, -8, 2, -9, 3, -7, 6, -6, 6, 4, 7, -1, 8], [3, 6, -7, 1, 2, -10, 6, -8, -9, -9, 6, -7, 7, -6, 1, 4, -8, -1, 8]) == True\nassert sat([-9, 6, -9, 8, -8, -5, -7, -5, -7, 7, -6, 7, -3, 9, 5, 4, 6, 8, 8], [-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]) == True\nassert sat('[-29, 6, 1, 41, 3, 4, 12, 3, 18, 5, 19, 0, 19521]', '[-1, -9, 7, 8, -8, 2, -7]') == False\nassert sat('[-8, -3, 4]', '[-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]') == False\nassert sat([-29, 6, 1, 41, 3, 4, 12, 3, 18, 5, 19, 0, 19521], []) == False\nassert sat('[-8, -3, 4]', '[4, -3, -8]') == False\nassert sat('[-8, -9, -7, 8, -1, 2, 7]', '[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]') == False\nassert sat('[-29, 6, 1, 41, 3, 4, 12, 3, 18, 5, 19, 0, 19521]', '[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]') == False\nassert sat('[-8, -9, -7, 8, -1, 2, 7]', '[-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]') == False\nassert sat('[-9, 6, -8, 1, -7, -10, 1, -8, 2, -9, 3, -7, 6, -6, 6, 4, 7, -1, 8]', '[4, -3, -8]') == False\nassert sat('[-9, 6, -9, 8, -8, -5, -7, -5, -7, 7, -6, 7, -3, 9, 5, 4, 6, 8, 8]', '[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]') == False\nassert sat('[-8, -3, 4]', '[3, 6, -7, 1, 2, -10, 6, -8, -9, -9, 6, -7, 7, -6, 1, 4, -8, -1, 8]') == False", "entry_fn_name": "sat"}
{"id": "89", "text": "Given a target string, find a string s such that when each group of three consecutive characters is cycled\nforward one character, you achieve the target string.\nSample Input:\n\"This is a test\"\nSample Output:\n'hiT is aste st'", "solution": "def sat(s: str, target):\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n    return target == ''.join((cycle3(s[i:i + 3]) for i in range(0, len(s), 3)))", "title": "TP3/ThreeCycle", "testing_code": "assert sat('elHo lorwld', 'Hello world') == True\nassert sat('ugrtyeextirtcuoertup', 'rugetytextirocuterup') == True\nassert sat('ortsauidjpaaicfreioht', 'torusajidapaficiretoh') == True\nassert sat('uiqextaft', 'quitextaf') == True\nassert sat('hotuiq', 'thoqui') == True\nassert sat('elHo lorwld', '') == False\nassert sat('', 'Hello world') == False", "entry_fn_name": "sat"}
{"id": "90", "text": "Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\nSample Input:\n10\nSample Output:\n11", "solution": "def sat(n: int, lower):\n    if not any(((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4])):\n        return False\n    if not all((n % i for i in range(2, int(n ** 0.5) + 1))):\n        return False\n    return n > lower", "title": "TP3/PrimeFib", "testing_code": "assert sat(514229, 123456) == True\nassert sat(5, 3) == True\nassert sat(1597, 458) == True\nassert sat(1597, 384) == True\nassert sat(5, 4) == True\nassert sat(3, 4) == False\nassert sat(3, 458) == False\nassert sat(3, 4) == False\nassert sat(3, 458) == False\nassert sat(3, 4) == False\nassert sat(3, 3) == False\nassert sat(3, 3) == False\nassert sat(5, 5) == False\nassert sat(5, 5) == False\nassert sat(5, 5) == False", "entry_fn_name": "sat"}
{"id": "91", "text": "Find the indices of three numbers that sum to 0 in a list.\n--- Example input ---\n[1, 2, 4, -3, 5]\n--- Example output ---\n[0, 1, 3]", "solution": "def sat(inds: List[int], nums):\n    return len(inds) == 3 and sum((nums[i] for i in inds)) == 0", "title": "TP3/TripleZeroSum", "testing_code": "assert sat([0, 4, 6], [12, 6, 41, 15, -10452, 18242, 10440, 6, 6, 6, 6]) == True\nassert sat([0, 1, 2], [-52, -16, 68, -27, 3]) == True\nassert sat([0, 4, 6], [-64, -74, -18, -57, 89, -14, -25, 11, -60, -78]) == True\nassert sat([0, 2, 5], [-90, 63, 70, 21, 42, 20]) == True\nassert sat([3, 6, 7], [-14, 65, -7, -75, 54, 78, -61, 136, -85, 44]) == True\nassert sat('[0, 4, 6]', '[-14, 65, -7, -75, 54, 78, -61, 136, -85, 44]') == False\nassert sat('[0, 1, 2]', '[-52, -16, 68, -27, 3]') == False\nassert sat('[0, 2, 5]', '[-90, 63, 70, 21, 42, 20]') == False\nassert sat('[0, 1, 2]', '[12, 6, 41, 15, -10452, 18242, 10440, 6, 6, 6, 6]') == False\nassert sat('[0, 4, 6]', '[-64, -74, -18, -57, 89, -14, -25, 11, -60, -78]') == False\nassert sat('[0, 2, 5]', '[-14, 65, -7, -75, 54, 78, -61, 136, -85, 44]') == False\nassert sat('[0, 4, 6]', '[-52, -16, 68, -27, 3]') == False\nassert sat('[0, 2, 5]', '[-52, -16, 68, -27, 3]') == False\nassert sat('[0, 1, 2]', '[-64, -74, -18, -57, 89, -14, -25, 11, -60, -78]') == False\nassert sat('[0, 2, 5]', '[-64, -74, -18, -57, 89, -14, -25, 11, -60, -78]') == False", "entry_fn_name": "sat"}
{"id": "92", "text": "Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\nA passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n--Sample input--\n2\n--Sample output--\n4", "solution": "def sat(count: int, n):\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0", "title": "TP3/NumPasses", "testing_code": "assert sat(962361, 981) == True\nassert sat(15129, 123) == True\nassert sat(57121, 239) == True\nassert sat(142884, 378) == True\nassert sat(251001, 501) == True\nassert sat(5, 123) == False\nassert sat(5, 123) == False\nassert sat(5, 123) == False\nassert sat(5, 123) == False\nassert sat(5, 239) == False\nassert sat(5, 239) == False\nassert sat(5, 239) == False\nassert sat(5, 239) == False\nassert sat(5, 378) == False\nassert sat(5, 378) == False", "entry_fn_name": "sat"}
{"id": "93", "text": "Decrement each element of new_list by 1 and check that it's old_list\nSample Input:\n[17, 15, 99]\nSample Output:\n[18, 16, 100]", "solution": "def sat(new_list: List[int], old_list):\n    return [i - 1 for i in new_list] == old_list", "title": "TP3/ListInc", "testing_code": "assert sat([322, 13, 533, 130, 10, -11, 5, 57, 91, 1], [321, 12, 532, 129, 9, -12, 4, 56, 90, 0]) == True\nassert sat([19, 30, 41], [18, 29, 40]) == True\nassert sat([44, 65, 74, 31, 48], [43, 64, 73, 30, 47]) == True\nassert sat([44, 10, 50, 94, 37, 48, 49, 39, 13], [43, 9, 49, 93, 36, 47, 48, 38, 12]) == True\nassert sat([46, 56, 72, 79, 55], [45, 55, 71, 78, 54]) == True\nassert sat([322, 13, 533, 130, 10, -11, 5, 57, 91, 1], []) == False\nassert sat([], [321, 12, 532, 129, 9, -12, 4, 56, 90, 0]) == False", "entry_fn_name": "sat"}
{"id": "94", "text": "Find the indices of two numbers that sum to 0 in a list.\nSample Input:\n[1, -4, -4, 7, -3]\nSample Output:\n[1, 2]", "solution": "def sat(inds: List[int], nums):\n    (a, b) = inds\n    return nums[a] + nums[b] == 0 and a >= 0 and (b >= 0)", "title": "TP3/PairZeroSum", "testing_code": "assert sat([2, 7], [12, -10452, 18242, 10440, 81, 241, 525, -18242, 91, 20]) == True\nassert sat([46, 46], [50, 33, 12, -13, 65, -39, -12, -72, -61, -38, -58, -88, 70, -82, -80, 27, 68, 89, -57, 15, -33, 93, 57, -91, 60, -72, -19, -12, 70, -35, 53, -21, -19, 66, 58, 76, -92, 64, 52, -21, 29, -61, -10, 50, -88, 17, 0, -50, 52, -87, 9, -95, 59, 23, 69, -34, 73, -39, 15, 17, 37, -83, -31, 13, -33, 6, -27, -45, -15, -78, 74, 92, 56, -52, 44, -9, -22, 27, -94, -17, 5, -82, -40, 22, -91, 10, 57, 13, -41, -93, -40, -42, 28, -3, 82]) == True\nassert sat([81, 73], [18, -81, 7, -48, -14, 88, -34, 29, 72, 16, 38, -29, 53, -52, 16, 31, 65, 1, -77, 24, -73, 8, 78, -13, -96, 29, -3, 45, -44, 98, 9, -89, -50, 46, -88, 89, -93, 98, -83, -3, -17, 72, 25, 18, 88, -32, -37, -26, 69, -39, 62, 64, 41, 58, 29, 33, -65, -13, 61, 41, -90, -79, -94, -81, 40, 46, -78, -13, -44, 9, 42, -90, 94, -19, 5, -33, 33, -60, 80, -40, -64, 19, -92, 62, -12, -58, 89, -50, -82, -32, 65, 82, -49, 80, -71, 68, -17, 26, 6, -61]) == True\nassert sat([5, 30], [61, 13, 32, -67, -29, 6, 65, 82, -36, -90, -3, -53, -80, 52, -20, 14, -58, 1, 14, 88, 90, -76, -83, 47, -20, -26, 5, 71, 29, -51, -6, 38, -42, -48, 9, -74, -37, -86, -31, -63, -45, -74, -40, 23, -16, 24, -6, -93, -46, -42, -4, -85, -91, 71, -72, 11, -33, 33, -82, -67, -34, -60, 89, 60, 26, -12, -92, 42, -92, -58, -37, 9, -38, 54, 34, 25, 85, -65, -79, 33, -52, -72, -80, -76, -39, 24, -2, 40, -53, -14, 8, 21, 7, 46, -88, -67]) == True\nassert sat([4, 3], [4, -4, -4, -3, 3, 1]) == True", "entry_fn_name": "sat"}
{"id": "95", "text": "Write n in the given base as a string\nSample Input:\nn=23, base=12\nSample Output:\n'1A'", "solution": "def sat(s: str, n, base):\n    return int(s, base) == n", "title": "TP3/ChangeBase", "testing_code": "assert sat('262', 142, 7) == True\nassert sat('10100110101010000', 85328, 2) == True\nassert sat('9576751', 9576751, 10) == True\nassert sat('2310112110', 5160280, 5) == True\nassert sat('252410054', 4884658, 6) == True\nassert sat('1', 142, 7) == False\nassert sat('1', 142, 2) == False\nassert sat('1', 142, 6) == False\nassert sat('262', 5, 7) == False\nassert sat('1', 142, 6) == False\nassert sat('1', 142, 5) == False\nassert sat('1', 142, 2) == False\nassert sat('1', 142, 7) == False\nassert sat('1', 142, 7) == False\nassert sat('1', 142, 2) == False", "entry_fn_name": "sat"}
{"id": "96", "text": "Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\nSample Input:\narea = 6, base = 3\nSample Output:\n4", "solution": "def sat(height: int, area, base):\n    return base * height == 2 * area", "title": "TP3/TriangleArea", "testing_code": "assert sat(58462914, 1319098728582, 45126) == True\nassert sat(25, 2642925075, 211434006) == True\nassert sat(584, 5529468804, 18936537) == True\nassert sat(4128175, 1238452500, 600) == True\nassert sat(443, 32576448, 147072) == True\nassert sat(584, 5, 600) == False\nassert sat(584, 5, 600) == False\nassert sat(25, 5, 45126) == False\nassert sat(25, 5, 600) == False\nassert sat(25, 5, 45126) == False\nassert sat(584, 5, 600) == False\nassert sat(443, 5, 600) == False\nassert sat(584, 5, 600) == False\nassert sat(443, 5, 600) == False\nassert sat(25, 5, 600) == False", "entry_fn_name": "sat"}
{"id": "97", "text": "Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\nfour. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\ngiven target number.\nSample Input:\n0\nSample Output:\n[0, 0, 0, 0]", "solution": "def sat(init: List[int], target):\n    (a, b, c, d) = init\n    for i in range(99):\n        (a, b, c, d) = (b, c, d, a + b + c + d)\n    return a == target", "title": "TP3/Fib4", "testing_code": "assert sat([-78438935137696, 61037589119992, -46883574455344, 36087218554357], 2021) == True\nassert sat([-2173468761856, 1691293909312, -1299099539584, 999942720952], 56) == True\nassert sat([-2288546170407840, 1780841881474680, -1367882220563760, 1052886116802405], 58965) == True\nassert sat([-19452240240309870112, 15136843012556526424, -11626758471782518768, 8949346949848706329], 501192137) == True\nassert sat([0, 0, 0, 0], 0) == True\nassert sat([-78438935137696, 61037589119992, -46883574455344, 36087218554357], 5) == False\nassert sat([-78438935137696, 61037589119992, -46883574455344, 36087218554357], 5) == False\nassert sat([0, 0, 0, 0], 5) == False\nassert sat([-2173468761856, 1691293909312, -1299099539584, 999942720952], 5) == False\nassert sat([0, 0, 0, 0], 5) == False\nassert sat([-2288546170407840, 1780841881474680, -1367882220563760, 1052886116802405], 5) == False\nassert sat([0, 0, 0, 0], 5) == False\nassert sat([-2173468761856, 1691293909312, -1299099539584, 999942720952], 5) == False\nassert sat([0, 0, 0, 0], 5) == False\nassert sat([-2173468761856, 1691293909312, -1299099539584, 999942720952], 5) == False", "entry_fn_name": "sat"}
{"id": "98", "text": "Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\nSample Input:\n[3, 6, 1, 2, 5, 4, 100], upper=105\nSample Output:\n4", "solution": "def sat(x: int, nums, upper):\n    dev = sum((n - x for n in nums))\n    return dev <= upper", "title": "TP3/Median", "testing_code": "assert sat(28141, [132666041, 237412, 28141, -12, 11939, 912414, 17], 133658965) == True\nassert sat(7464351342, [-8813279918, 7464351342, 8037181984, 8564600186, 660800781], -21408102335) == True\nassert sat(0, [], 0) == True\nassert sat(-34560579, [-2350083760, -34560579, 3780403495, -9390708907, 2424237816, -6782611896, 624505871], -11486893907) == True\nassert sat(5887293672, [-2410166269, 5887293672], -8297459941) == True\nassert sat(5, [], -21408102335) == False\nassert sat(5, [], -21408102335) == False\nassert sat(5, [], -8297459941) == False\nassert sat(0, [0], -8297459941) == False\nassert sat(5, [], -8297459941) == False\nassert sat(5, [], -11486893907) == False\nassert sat(5, [], -11486893907) == False\nassert sat(5, [], -8297459941) == False\nassert sat(5, [], -8297459941) == False\nassert sat(-34560579, [0], 0) == False", "entry_fn_name": "sat"}
{"id": "99", "text": "Test whether the given strings are palindromes\nSample Input:\n[\"aba\", \"no\"]\nSample Output:\n[True, False]", "solution": "def sat(pals: List[bool], strs):\n    return all((pals[i] == (s == s[::-1]) for (i, s) in enumerate(strs)))", "title": "TP3/Palindrome", "testing_code": "assert sat([False, True, True, False, False, False], ['palindrome', 'madamimadam', '', 'foo', 'eyes', '(-:-)']) == True\nassert sat([True, True, True, False, True, True, False, True, True], ['getuteg', 'quiuq', 'tebetextxetebet', 'quyquykame', 'palimubibibumilap', 'chirowykigollogikyworihc', 'jyt', 'zenoryluchydoquuzohehozuuqodyhculyronez', 'gumizilixogylygoxilizimug']) == True\nassert sat([False, False, False, True, False], ['hahez', 'fuchuwas', 'fatextynuruce', 'wetewotuzoggozutowetew', 'vutot']) == True\nassert sat([True, True, True, True, False, False, False, True, False], ['wexivivixew', 'fyzalagalazyf', 's', 'quizylymaquequqeuqamylyziuq', 'cydilozuthytex', 'quu', 'vygylaf', 'chotexttxetohc', 'hequedipothovof']) == True\nassert sat([], []) == True\nassert sat('[]', '[]') == False\nassert sat('[False, False, False, True, False]', '[]') == False\nassert sat('[True, True, True, False, True, True, False, True, True]', '[]') == False\nassert sat('[True, True, True, True, False, False, False, True, False]', '[]') == False\nassert sat('[False, True, True, False, False, False]', '[]') == False", "entry_fn_name": "sat"}
{"id": "100", "text": "Fermat's little theorem implies that any polynomial can be written equivalently as a degree p-1\npolynomial (mod p).\nGiven the p coefficients of a polynomial poly, compute a polynomial equivalent to poly^d (mod p).\nSample Input:\nd=2, poly=[1, 0, 0, 1, 0]  # 1 + x^3\nSample Output:\n[1, 0, 1, 2, 0]  # 1+ x^2 + 2x^3 because (1 + x^3)^2 = 1 + 2x^3 + x^6 and x^6 = x^2 (mod 5)", "solution": "def sat(exp_poly: List[int], d, poly):\n    p = len(poly)\n    if not (p > 2 and all((p % i for i in range(2, p)))):\n        return False\n\n    def val(coeffs, n):\n        return sum((c * pow(n, i, p) for (i, c) in enumerate(coeffs))) % p\n    return all((val(exp_poly, n) == pow(val(poly, n), d, p) for n in range(p)))", "title": "TP3/LittleFermat", "testing_code": "assert sat([1, 6, 3, 1, 0, 4, 4], 74152093423, [1, 6, 3, 1, 0, 4, 4]) == True\nassert sat([1, 6, 3, 1, 0, 4, 4], 74152093423, []) == False\nassert sat([], 74152093423, [1, 6, 3, 1, 0, 4, 4]) == False", "entry_fn_name": "sat"}
{"id": "101", "text": "Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\nSample Input:\nresult='very good', shift=-1\nSample Output:\n'wfsz!hppe'", "solution": "def sat(orig: str, result, shift):\n    n = len(result)\n    if not len(orig) == n:\n        return False\n    return all((ord(orig[i]) + shift == ord(result[i]) for i in range(n)))", "title": "TP3/ShiftChars", "testing_code": "assert sat('A^eeh%\\x19phke]\\x1a', 'Hello, world!', 7) == True\nassert sat('{~yxv\\x82tnl\\x82t\\x82w~{rl', 'rupomykecykynuric', -9) == True\nassert sat('ob\\\\rsZ', 'vicyza', 7) == True\nassert sat('fa`qrYlabqbgc]', 'nihyzatijyjoke', 8) == True\nassert sat('nonbcdin_rn', 'tuthijotext', 6) == True\nassert sat('', 'Hello, world!', 7) == False", "entry_fn_name": "sat"}
{"id": "102", "text": "Remove the vowels from the original string.\nSample Input:\n\"very good\"\nSample Output:\n'vry gd'", "solution": "def sat(txt: str, text):\n    n = 0\n    for c in text:\n        if c.lower() not in 'aeiou':\n            if not txt[n] == c:\n                return False\n            n += 1\n    if not n == len(txt):\n        return False\n    return True", "title": "TP3/RemoveVowels", "testing_code": "assert sat('Hll, wrld!', 'Hello, world!') == True\nassert sat('GSXGPJbqj', 'GUSUXeGePUJibAqUojo') == True\nassert sat('CsVyVTHbHwh', 'CAsaVyVOTHobAHEwIhI') == True\nassert sat('TX', 'TeX') == True\nassert sat('Q', 'Q') == True\nassert sat('Hll, wrld!', '') == False", "entry_fn_name": "sat"}
{"id": "103", "text": "Find the indexes of numbers below a given threshold\nSample Input:\nnums=[4, 7, 11, 5], threshold=10\nSample Output:\n[0, 1, 3]", "solution": "def sat(indexes: List[int], nums, thresh):\n    j = 0\n    for (i, n) in enumerate(nums):\n        if n < thresh:\n            if not indexes[j] == i:\n                return False\n            j += 1\n    if not j == len(indexes):\n        return False\n    return True", "title": "TP3/BelowThreshold", "testing_code": "assert sat([0, 1, 2, 3, 7, 8, 9, 10], [0, 2, 17, 4, 4213, 322, 102, 29, 15, 39, 55], 100) == True\nassert sat([1, 2], [35, -96, -51, 7, 56, 0], -30) == True\nassert sat([0, 1], [-20, 45], 91) == True\nassert sat([], [84, 56, 13], -80) == True\nassert sat([0, 1, 2, 3], [3, -70, -88, 38], 95) == True\nassert sat('[0, 1]', '[-20, 45]', '91') == False\nassert sat('[1, 2]', '[-20, 45]', '100') == False\nassert sat('[0, 1]', '[-20, 45]', '95') == False\nassert sat('[]', '[-20, 45]', '-80') == False\nassert sat('[]', '[84, 56, 13]', '95') == False\nassert sat('[1, 2]', '[-20, 45]', '-80') == False\nassert sat('[1, 2]', '[-20, 45]', '91') == False\nassert sat('[]', '[-20, 45]', '95') == False\nassert sat('[1, 2]', '[-20, 45]', '-30') == False\nassert sat('[]', '[84, 56, 13]', '100') == False", "entry_fn_name": "sat"}
{"id": "104", "text": "Find the number which when appended to the list makes the total 0\nSample Input:\n[1, 2, 3]\nSample Output:\n-6", "solution": "def sat(n: int, nums):\n    return sum(nums + [-n]) == 0", "title": "TP3/ListTotal", "testing_code": "assert sat(1316384, [10, 42, 17, 9, 1315182, 184, 102, 29, 15, 39, 755]) == True\nassert sat(1278833299, [40388491, -864787067, 862143530, 604555885, -81302113, 717834573]) == True\nassert sat(-243, [-93, 35, -95, -7, -85, 2]) == True\nassert sat(11052597, [-2040052, -6582681, -6604315, 1042475, 7287312, 8050849, 5566992, 4332017]) == True\nassert sat(-4, [-1, -1, -1, -1, 0, 0]) == True\nassert sat(1316384, []) == False", "entry_fn_name": "sat"}
{"id": "105", "text": "Find a character in one string that is not in the other.\nSample Input:\n'Do you like green eggs and ham?', 'I do not like green eggs and ham.'\nSample Output:\n't'  # or .?yI", "solution": "def sat(c: str, a, b):\n    return (c in a) != (c in b)", "title": "TP3/DiffChars", "testing_code": "assert sat('s', 'the quick brown fox jumped over the lazy dog', 'how vexingly quick daft zebras jump') == True\nassert sat('d', 'jyhud', 'nexysezomevus') == True\nassert sat('a', 'vofawawumovisajuryt', 't') == True\nassert sat('m', 'textuzaxoch', 'acehmottuxxz') == True\nassert sat('d', 'quytextila', 'mydyhopakokinavo') == True\nassert sat('', 'the quick brown fox jumped over the lazy dog', 'how vexingly quick daft zebras jump') == False\nassert sat('s', 'the quick brown fox jumped over the lazy dog', '') == False", "entry_fn_name": "sat"}
{"id": "106", "text": "Find the index of the matching brackets for each character in the string\nSample Input:\n\"<><>\"\nSample Output:\n[1, 0, 3, 2]", "solution": "def sat(matches: List[int], brackets):\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        if not (brackets[j] != c and matches[j] == i and all((i < matches[k] < j for k in range(i + 1, j)))):\n            return False\n    return len(matches) == len(brackets)", "title": "TP3/MatchBrackets", "testing_code": "assert sat([3, 2, 1, 0, 15, 10, 7, 6, 9, 8, 5, 14, 13, 12, 11, 4], '<<>><<<><>><<>>>') == True\nassert sat([1, 0, 3, 2, 5, 4, 7, 6, 11, 10, 9, 8, 23, 22, 15, 14, 17, 16, 21, 20, 19, 18, 13, 12, 25, 24, 27, 26, 29, 28], '<><><><><<>><<<><><<>>>><><><>') == True\nassert sat([1, 0, 3, 2, 25, 8, 7, 6, 5, 24, 17, 16, 13, 12, 15, 14, 11, 10, 21, 20, 19, 18, 23, 22, 9, 4, 27, 26], '<><><<<>><<<<><>>><<>><>>><>') == True\nassert sat([1, 0, 3, 2, 5, 4, 7, 6, 19, 10, 9, 12, 11, 18, 15, 14, 17, 16, 13, 8, 21, 20, 25, 24, 23, 22, 27, 26, 31, 30, 29, 28, 33, 32, 35, 34, 37, 36, 45, 42, 41, 40, 39, 44, 43, 38, 47, 46], '<><><><><<><><<><>>><><<>><><<>><><><><<<>><>><>') == True\nassert sat([9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 11, 10, 13, 12, 17, 16, 15, 14], '<<<<<>>>>><><><<>>') == True\nassert sat([3, 2, 1, 0, 15, 10, 7, 6, 9, 8, 5, 14, 13, 12, 11, 4], '') == False", "entry_fn_name": "sat"}
{"id": "107", "text": "Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\nSample Input:\n[1, 2, 5]\nSample Output:\n\"increasing\"", "solution": "def sat(direction: str, nums):\n    if direction == 'increasing':\n        return all((nums[i] < nums[i + 1] for i in range(len(nums) - 1)))\n    if direction == 'decreasing':\n        return all((nums[i + 1] < nums[i] for i in range(len(nums) - 1)))", "title": "TP3/Monotonic", "testing_code": "assert sat('increasing', [2, 4, 17, 29, 31, 1000, 416629]) == True\nassert sat('increasing', [540, 713, 887, 964]) == True\nassert sat('decreasing', [764, 291, 171]) == True\nassert sat('increasing', [74, 168, 229, 302, 430, 450, 481, 783]) == True\nassert sat('decreasing', [826, 784, 726, 537, 536, 392, 250, 241, 161]) == True", "entry_fn_name": "sat"}
{"id": "108", "text": "Find numbers common to a and b\nSample Input:\n[1, 2, 3], [3, 4, 5]\nSample Output:\n[3]", "solution": "def sat(common: List[int], a, b):\n    return all(((i in common) == (i in a and i in b) for i in a + b + common))", "title": "TP3/CommonNumbers", "testing_code": "assert sat([2, 4, 17, 29, 31], [2, 416629, 2, 4, 17, 29, 31, 1000], [31, 2, 4, 17, 29, 41205]) == True\nassert sat([], [824, 853, 392, 835, 225, 96], [73, 534, 705, 376, 376, 965, 404, 976]) == True\nassert sat([], [338, 882, 92, 234], [993, 977, 403]) == True\nassert sat([490, 581, 758, 808, 814, 950], [950, 299, 581, 222, 490, 758, 58, 76, 808, 814], [790, 200, 814, 851, 902, 490, 581, 808, 950, 343, 758]) == True\nassert sat([318, 348, 452, 699, 733, 874, 995], [452, 318, 348, 995, 733, 874, 699], [733, 348, 614, 874, 699, 995, 318, 167, 452]) == True\nassert sat('[]', '[452, 318, 348, 995, 733, 874, 699]', '[993, 977, 403]') == False\nassert sat('[490, 581, 758, 808, 814, 950]', '[338, 882, 92, 234]', '[993, 977, 403]') == False\nassert sat('[2, 4, 17, 29, 31]', '[2, 416629, 2, 4, 17, 29, 31, 1000]', '[993, 977, 403]') == False\nassert sat('[2, 4, 17, 29, 31]', '[452, 318, 348, 995, 733, 874, 699]', '[993, 977, 403]') == False\nassert sat('[]', '[824, 853, 392, 835, 225, 96]', '[993, 977, 403]') == False\nassert sat('[]', '[338, 882, 92, 234]', '[73, 534, 705, 376, 376, 965, 404, 976]') == False\nassert sat([2, 4, 17, 29, 31], [2, 416629, 2, 4, 17, 29, 31, 1000], []) == False\nassert sat('[]', '[824, 853, 392, 835, 225, 96]', '[31, 2, 4, 17, 29, 41205]') == False\nassert sat('[2, 4, 17, 29, 31]', '[824, 853, 392, 835, 225, 96]', '[993, 977, 403]') == False\nassert sat('[2, 4, 17, 29, 31]', '[338, 882, 92, 234]', '[31, 2, 4, 17, 29, 41205]') == False", "entry_fn_name": "sat"}
{"id": "109", "text": "Find the largest prime factor of n.\nSample Input:\n125\nSample Output:\n5", "solution": "def sat(p: int, n):\n\n    def is_prime(m):\n        return all((m % i for i in range(2, m - 1)))\n    return is_prime(p) and n % p == 0 and (p > 0) and all((n % i or not is_prime(i) for i in range(p + 1, n)))", "title": "TP3/LargestPrimeFactor", "testing_code": "assert sat(8423, 101076) == True\nassert sat(97, 15132) == True\nassert sat(59, 22184) == True\nassert sat(7, 70875) == True\nassert sat(3943, 63088) == True\nassert sat(97, 5) == False\nassert sat(59, 5) == False\nassert sat(97, 5) == False\nassert sat(59, 5) == False\nassert sat(7, 5) == False\nassert sat(59, 5) == False\nassert sat(97, 5) == False\nassert sat(7, 5) == False\nassert sat(3943, 5) == False\nassert sat(3943, 5) == False", "entry_fn_name": "sat"}
{"id": "110", "text": "Find the sums of the integers from 1 to n\nSample Input:\n3\nSample Output:\n[0, 1, 3, 6]", "solution": "def sat(sums: List[int], n):\n    return all((sums[i + 1] - sums[i] == i for i in range(n))) and sums[0] == 0", "title": "TP3/CumulativeSums", "testing_code": "assert sat([0, 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950, 5050, 5151, 5253, 5356], 104) == True", "entry_fn_name": "sat"}
{"id": "111", "text": "Find the index of the matching parentheses for each character in the string\nSample Input:\n\"()((()))\"\nSample Output:\n[1, 0, 7, 6, 5, 4, 3, 2]", "solution": "def sat(matches: List[int], parens):\n    for (i, (j, c)) in enumerate(zip(matches, parens)):\n        if not (parens[j] != c and matches[j] == i and all((i < matches[k] < j for k in range(i + 1, j)))):\n            return False\n    return len(matches) == len(parens)", "title": "TP3/ParenDepth", "testing_code": "assert sat([13, 4, 3, 2, 1, 6, 5, 12, 9, 8, 11, 10, 7, 0, 17, 16, 15, 14], '((())()(()()))(())') == True\nassert sat([], '') == True\nassert sat([1, 0], '()') == True\nassert sat([9, 8, 3, 2, 7, 6, 5, 4, 1, 0], '((()(())))') == True\nassert sat([3, 2, 1, 0], '(())') == True\nassert sat([13, 4, 3, 2, 1, 6, 5, 12, 9, 8, 11, 10, 7, 0, 17, 16, 15, 14], '') == False\nassert sat([], '((())()(()()))(())') == False\nassert sat('[13, 4, 3, 2, 1, 6, 5, 12, 9, 8, 11, 10, 7, 0, 17, 16, 15, 14]', \"''\") == False\nassert sat('[3, 2, 1, 0]', \"''\") == False\nassert sat('[1, 0]', \"''\") == False\nassert sat('[9, 8, 3, 2, 7, 6, 5, 4, 1, 0]', \"''\") == False\nassert sat('[]', \"''\") == False", "entry_fn_name": "sat"}
{"id": "112", "text": "Find the derivative of the given polynomial, with coefficients in order of increasing degree\nSample Input:\n[3, 4, 1] # 3 + 4x + x^2\nSample Output:\n[2, 4]   # 4 + 2x^2", "solution": "def sat(derivative: List[int], poly):\n\n    def val(poly, x):\n        return sum((coeff * x ** i for (i, coeff) in enumerate(poly)))\n    return all((abs(val(poly, x + 1e-08) - val(poly, x) - 1e-08 * val(derivative, x)) < 0.0001 for x in range(len(poly))))", "title": "TP3/Derivative", "testing_code": "assert sat([1, 0, 12, 76, 1155, 0, 35], [2, 1, 0, 4, 19, 231, 0, 5]) == True\nassert sat([-7, -16, 9], [6, -7, -8, 3]) == True\nassert sat([5, -12, 21], [-5, 5, -6, 7]) == True\nassert sat([2, 2, -24, 36, -50, -12, -49, -80], [-8, 2, 1, -8, 9, -10, -2, -7, -10]) == True\nassert sat([-1, -8, -6, 28, -45, 18, 63], [5, -1, -4, -2, 7, -9, 3, 9]) == True\nassert sat([], [2, 1, 0, 4, 19, 231, 0, 5]) == False", "entry_fn_name": "sat"}
{"id": "113", "text": "Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\nthree. Given a target number, find an initial triple such that the 17th number in the sequence is the\ngiven target number.\nSample Input:\n0\nSample Output:\n[0, 0, 0]", "solution": "def sat(init: List[int], target):\n    (a, b, c) = init\n    for i in range(16):\n        (a, b, c) = (b, c, a + b + c)\n    return a == target", "title": "TP3/Fib3", "testing_code": "assert sat([-12788068, 0, 6952736], 124156) == True\nassert sat([-417150, 0, 226800], 4050) == True\nassert sat([0, 0, 0], 0) == True\nassert sat([-478332, 0, 260064], 4644) == True\nassert sat([-309, 0, 168], 3) == True\nassert sat([-417150, 0, 226800], 5) == False\nassert sat([-417150, 0, 226800], 5) == False\nassert sat([0, 0, 0], 5) == False\nassert sat([0, 0, 0], 5) == False\nassert sat([0, 0, 0], 5) == False\nassert sat([-478332, 0, 260064], 5) == False\nassert sat([0, 0, 0], 5) == False\nassert sat([-478332, 0, 260064], 5) == False\nassert sat([-309, 0, 168], 5) == False\nassert sat([-417150, 0, 226800], 5) == False", "entry_fn_name": "sat"}
{"id": "114", "text": "Find the vowels from each of the original texts (y counts as a vowel at the end of the word)\nSample Input:\n[\"You can do it!\", \"CAT\"]\nSample Output:\n[\"ouaoi\", \"A\"]", "solution": "def sat(vowels: List[str], texts):\n    for (v, t) in zip(vowels, texts):\n        i = 0\n        for (j, c) in enumerate(t):\n            if c.lower() in 'aeiou' or (c.lower() == 'y' and j == len(t) - 1):\n                if not v[i] == c:\n                    return False\n                i += 1\n        if not i == len(v):\n            return False\n    return len(vowels) == len(texts)", "title": "TP3/FindVowels", "testing_code": "assert sat(['eoo', 'ooeo'], ['Hello, world!', 'Goodbye, world!']) == True\nassert sat(['eUI', 'ou', 'uEeIaEuaa', 'IEOEAiii', 'EIOeY', 'e', 'EouOEEu', 'AI'], ['kelUthI', 'RoRu', 'JuKEBesYtIcHakEQuala', 'TIzEXOtExTyJASiNiKi', 'tEWIFObesY', 'KyxySe', 'kEboWulOfEZEFuMYCH', 'XAPIFYS']) == True\nassert sat(['AEIoEOIU', '', 'eOOeE', 'Ae', 'AiuUI', 'a'], ['sATExtIjopEJOWIvU', 'v', 'teXTOGOzetEX', 'CAMe', 'SApiQuUzISYG', 'NaV']) == True\nassert sat([], []) == True\nassert sat(['AoOAU', '', 'EIeeoO'], ['mAloCyBOSAwUg', 'W', 'BEsICHeCeLoNO']) == True\nassert sat(['eoo', 'ooeo'], []) == False\nassert sat([], ['Hello, world!', 'Goodbye, world!']) == False\nassert sat('[]', '[]') == False", "entry_fn_name": "sat"}
{"id": "115", "text": "Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\ndigits of n, reverse the string.\nn=12345 shift=2 => '34512'", "solution": "def sat(shifted: str, n, shift):\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])", "title": "TP3/CircularShiftNum", "testing_code": "assert sat('582369835124', 124582369835, 3) == True\nassert sat('2948192586', 6852918492, 12) == True\nassert sat('61694019601582923', 32928510691049616, 28) == True\nassert sat('732', 237, 26) == True\nassert sat('6', 6, 26) == True\nassert sat('6', 5, 3) == False\nassert sat('1', 6, 12) == False\nassert sat('1', 6, 3) == False\nassert sat('6', 5, 28) == False\nassert sat('6', 5, 12) == False\nassert sat('1', 6, 28) == False\nassert sat('1', 6, 3) == False\nassert sat('1', 6, 26) == False\nassert sat('1', 6, 3) == False\nassert sat('1', 6, 12) == False", "entry_fn_name": "sat"}
{"id": "116", "text": "Compute the sum of the ASCII values of the upper-case characters in the string.\nSample Input:\nARt\nSample Output:\n147 # = 65 + 82", "solution": "def sat(tot: int, s):\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0", "title": "TP3/CharSum", "testing_code": "assert sat(2023, 'Add ME uP AND YOU WILL GET A BIG NUMBER!') == True\nassert sat(326, 'VRkmX=(1oF#l') == True\nassert sat(507, '*?sAJJ;FY8c!7zFwA') == True\nassert sat(166, 'Vmv%e8d3P') == True\nassert sat(141, 'K8B') == True\nassert sat(2023, '') == False", "entry_fn_name": "sat"}
{"id": "117", "text": "Determine how many bananas are necessary to reach a certain total amount of fruit\nbowl=\"3 apples and 4 oranges\", total=12 => 5", "solution": "def sat(bananas: int, bowl, total):\n    bowl += f' and {bananas} bananas'\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total", "title": "TP3/MissingBananas", "testing_code": "assert sat(12474028, '5024 apples and 12189 oranges', 12491241) == True\nassert sat(5, '7 apples and 9 oranges', 21) == True\nassert sat(597341712, '508738582 apples and 346410095 oranges', 1452490389) == True\nassert sat(34048, '28767 apples and 49488 oranges', 112303) == True\nassert sat(25872, '29991 apples and 99737 oranges', 155600) == True\nassert sat(12474028, '', 12491241) == False", "entry_fn_name": "sat"}
{"id": "118", "text": "Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\nIn the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\nSample Input:\n[1, 7, 4, 6, 10, 11, 14]\nSample Output:\n[4, 2]", "solution": "def sat(val_index: List[int], nums):\n    if val_index == []:\n        return all((n % 2 == 1 for n in nums))\n    (v, i) = val_index\n    if not (v % 2 == 0 and nums[i] == v):\n        return False\n    return all((n > v or n % 2 == 1 for n in nums[:i])) and all((n >= v or n % 2 == 1 for n in nums[i:]))", "title": "TP3/SmallestEven", "testing_code": "assert sat([812152, 4], [125123, 422323, 141, 5325, 812152, 9, 42145, 5313, 421, 812152]) == True\nassert sat([7988, 1], [38940, 7988, 78915]) == True\nassert sat([26392632, 0], [26392632, 33805163]) == True\nassert sat([744557286, 0], [744557286]) == True\nassert sat([5506558, 2], [4512821, 7022753, 5506558]) == True\nassert sat([], [125123, 422323, 141, 5325, 812152, 9, 42145, 5313, 421, 812152]) == False", "entry_fn_name": "sat"}
{"id": "119", "text": "Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\nh = -1 if there is no such positive number.\nSample Input:\n[1, 2, 2, 3, 3, 3, 4, 4]\nSample Output:\n3", "solution": "def sat(h: int, seq):\n    for i in seq:\n        if not not (i > 0 and i > h and (seq.count(i) >= i)):\n            return False\n    return h == -1 or seq.count(h) >= h > 0", "title": "TP3/GreatestHIndex", "testing_code": "assert sat(5, [3, 1, 4, 17, 5, 17, 2, 1, 41, 32, 2, 5, 5, 5, 5]) == True\nassert sat(7, [5, 5, 4, 4, 0, 1, 3, 7, 2, 1, 0, 1, 8, 7, 2, 7, 4, 5, 2, 7, 5, 1, 9, 4, 7, 6, 3, 0, 1, 0, 6, 8, 0, 8, 9, 8, 3, 9, 4, 4, 4, 3, 8, 9, 5, 2, 5, 7, 9, 6, 2, 3, 0, 6, 0, 7, 8, 2, 2, 5, 1, 6, 1, 7, 8, 7, 6, 7]) == True\nassert sat(4, [3, 9, 0, 8, 2, 9, 6, 1, 8, 3, 5, 5, 4, 9, 0, 1, 0, 3, 4, 8, 7, 2, 4, 7, 1, 1, 7, 2, 1, 4, 1, 0]) == True\nassert sat(8, [7, 4, 1, 8, 6, 6, 6, 8, 5, 5, 8, 3, 0, 7, 2, 7, 2, 4, 5, 8, 6, 1, 1, 0, 0, 8, 8, 1, 5, 2, 1, 1, 7, 1, 3, 5, 6, 1, 7, 9, 6, 2, 6, 4, 7, 4, 3, 1, 2, 3, 9, 7, 7, 1, 7, 8, 6, 5, 9, 1, 6, 3, 4, 2, 4, 1, 7, 6, 3, 2, 5, 6, 1, 3, 9, 4, 9, 6, 9, 8, 1, 2, 3, 8]) == True\nassert sat(2, [1, 2, 6, 2]) == True\nassert sat(5, []) == False", "entry_fn_name": "sat"}
{"id": "120", "text": "Find the following strange sort of li: the first element is the smallest, the second is the largest of the\nremaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\nSample Input:\n[1, 2, 7, 3, 4, 5, 6]\nSample Output:\n[1, 7, 2, 6, 3, 5, 4]", "solution": "def sat(strange: List[int], li):\n    if not sorted(strange) == sorted(li):\n        return False\n    return all((n == (min, max)[i % 2](strange[i:]) for (i, n) in enumerate(strange)))", "title": "TP3/WildSort", "testing_code": "assert sat([-1, 717, 12, 491, 15, 317, 30, 200, 32, 45, 42], [30, 12, 42, 717, 45, 317, 200, -1, 491, 32, 15]) == True\nassert sat([0, 9, 0, 8, 0, 8, 0, 8, 0, 7, 1, 7, 1, 5, 1, 4, 2, 3, 3], [8, 1, 0, 8, 1, 5, 2, 1, 7, 3, 0, 4, 0, 3, 8, 0, 9, 0, 7]) == True\nassert sat([0, 9, 2, 7, 2, 6, 4], [2, 0, 2, 4, 7, 6, 9]) == True\nassert sat([0, 9, 1, 9, 2, 9, 2, 7, 3, 7, 5, 5, 5], [5, 3, 9, 9, 5, 2, 9, 7, 0, 5, 7, 1, 2]) == True\nassert sat([1, 7, 3], [7, 1, 3]) == True\nassert sat('[0, 9, 2, 7, 2, 6, 4]', '[5, 3, 9, 9, 5, 2, 9, 7, 0, 5, 7, 1, 2]') == False\nassert sat('[0, 9, 0, 8, 0, 8, 0, 8, 0, 7, 1, 7, 1, 5, 1, 4, 2, 3, 3]', '[7, 1, 3]') == False\nassert sat([-1, 717, 12, 491, 15, 317, 30, 200, 32, 45, 42], []) == False\nassert sat('[-1, 717, 12, 491, 15, 317, 30, 200, 32, 45, 42]', '[2, 0, 2, 4, 7, 6, 9]') == False\nassert sat('[0, 9, 1, 9, 2, 9, 2, 7, 3, 7, 5, 5, 5]', '[2, 0, 2, 4, 7, 6, 9]') == False\nassert sat('[1, 7, 3]', '[2, 0, 2, 4, 7, 6, 9]') == False\nassert sat('[-1, 717, 12, 491, 15, 317, 30, 200, 32, 45, 42]', '[7, 1, 3]') == False\nassert sat('[0, 9, 2, 7, 2, 6, 4]', '[7, 1, 3]') == False\nassert sat('[1, 7, 3]', '[30, 12, 42, 717, 45, 317, 200, -1, 491, 32, 15]') == False\nassert sat('[0, 9, 1, 9, 2, 9, 2, 7, 3, 7, 5, 5, 5]', '[5, 3, 9, 9, 5, 2, 9, 7, 0, 5, 7, 1, 2]') == False", "entry_fn_name": "sat"}
{"id": "121", "text": "Find the coordinates of a triangle with the given side lengths\nSample Input:\n[3.0, 4.0, 5.0\nSample Output:\n[[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]", "solution": "def sat(coords: List[List[float]], sides):\n    if not len(coords) == 3:\n        return False\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for (i, (x, y)) in enumerate(coords) for (x2, y2) in coords[:i]]\n    return all((abs(a - b) < 1e-06 for (a, b) in zip(sorted(sides), sorted(sides2))))", "title": "TP3/HeronTriangle", "testing_code": "assert sat([[0.0, 0.0], [8.9, 0.0], [14.133146067415726, 9.447443158711852]], [8.9, 10.8, 17.0]) == True\nassert sat([[0.0, 0.0], [24.408110376178705, 0.0], [39.085669373208304, 29.24733766104687]], [24.408110376178705, 32.72365349973282, 48.81696744586911]) == True\nassert sat([[0.0, 0.0], [27.451864724831378, 0.0], [15.037730083355163, 70.6538913654791]], [27.451864724831378, 71.73620497337176, 72.2364568008756]) == True\nassert sat([[0.0, 0.0], [22.39325953731467, 0.0], [22.95411031476556, 22.633928572734597]], [22.39325953731467, 22.640876224877417, 32.23640648363397]) == True\nassert sat([[0.0, 0.0], [45.986905476840235, 0.0], [34.34759182258875, 79.12830680250462]], [45.986905476840235, 79.97976343909342, 86.26149779271437]) == True\nassert sat('[[0.0, 0.0], [22.39325953731467, 0.0], [22.95411031476556, 22.633928572734597]]', '[27.451864724831378, 71.73620497337176, 72.2364568008756]') == False\nassert sat('[[0.0, 0.0], [8.9, 0.0], [14.133146067415726, 9.447443158711852]]', '[45.986905476840235, 79.97976343909342, 86.26149779271437]') == False\nassert sat('[[0.0, 0.0], [45.986905476840235, 0.0], [34.34759182258875, 79.12830680250462]]', '[24.408110376178705, 32.72365349973282, 48.81696744586911]') == False\nassert sat('[[0.0, 0.0], [45.986905476840235, 0.0], [34.34759182258875, 79.12830680250462]]', '[8.9, 10.8, 17.0]') == False\nassert sat('[[0.0, 0.0], [22.39325953731467, 0.0], [22.95411031476556, 22.633928572734597]]', '[8.9, 10.8, 17.0]') == False\nassert sat('[[0.0, 0.0], [27.451864724831378, 0.0], [15.037730083355163, 70.6538913654791]]', '[27.451864724831378, 71.73620497337176, 72.2364568008756]') == False\nassert sat('[[0.0, 0.0], [8.9, 0.0], [14.133146067415726, 9.447443158711852]]', '[22.39325953731467, 22.640876224877417, 32.23640648363397]') == False\nassert sat('[[0.0, 0.0], [27.451864724831378, 0.0], [15.037730083355163, 70.6538913654791]]', '[24.408110376178705, 32.72365349973282, 48.81696744586911]') == False\nassert sat('[[0.0, 0.0], [45.986905476840235, 0.0], [34.34759182258875, 79.12830680250462]]', '[27.451864724831378, 71.73620497337176, 72.2364568008756]') == False\nassert sat('[[0.0, 0.0], [24.408110376178705, 0.0], [39.085669373208304, 29.24733766104687]]', '[8.9, 10.8, 17.0]') == False", "entry_fn_name": "sat"}
{"id": "122", "text": "An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\nYou have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\nweights=[77, 40], max_weight=100 => -1\nweights=[1,2,3], max_weight=50   => 0 # because 1 != 3", "solution": "def sat(problem: int, weights, max_weight):\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[-1 - problem]", "title": "TP3/InvestigateCrash", "testing_code": "assert sat(0, [1, 2, 5, 2, 1, 17], 100) == True\nassert sat(-1, [17, 97, 77, 13, 13, 77, 13, 17], 314) == True\nassert sat(4, [51, 23, 10, 4, 7, 56, 12, 4, 10, 23, 51], 276) == True\nassert sat(1, [22, 81, 93, 22], 222) == True\nassert sat(0, [43, 37, 79, 37, 20], 222) == True\nassert sat(0, [0], 314) == False\nassert sat(0, [0], 314) == False\nassert sat(0, [0], 314) == False\nassert sat(0, [0], 314) == False\nassert sat(0, [0], 222) == False\nassert sat(0, [0], 276) == False\nassert sat(0, [0], 276) == False\nassert sat(0, [0], 276) == False\nassert sat(0, [0], 222) == False\nassert sat(0, [0], 222) == False", "entry_fn_name": "sat"}
{"id": "123", "text": "Find the closest palindrome\nSample Input:\n\"cat\"\nSample Output:\n\"tat\"", "solution": "def sat(pal: str, s):\n    if not (pal == pal[::-1] and len(pal) == len(s)):\n        return False\n    return sum((a != b for (a, b) in zip(pal, s))) == sum((a != b for (a, b) in zip(s, s[::-1]))) // 2", "title": "TP3/ClosestPalindrome", "testing_code": "assert sat('palindromordnilap', 'palindromordinals') == True\nassert sat('tit', 'ti=') == True\nassert sat('bb', 'bC') == True\nassert sat('chachatexxetahcahc', 'chachatexc0vchX)e1') == True\nassert sat('w', 'w') == True\nassert sat('palindromordnilap', '') == False\nassert sat('', 'palindromordinals') == False", "entry_fn_name": "sat"}
{"id": "124", "text": "Find the list that has fewer total characters (including repetitions)\nSample Input:\n[[\"sh\", \"ort\"], [\"longest\"]]\nSample Output:\n[[\"sh\", \"ort\"]", "solution": "def sat(li: List[str], lists):\n    width = sum((len(s) for s in li))\n    for li2 in lists:\n        if not width <= sum((len(s) for s in li2)):\n            return False\n    return li in lists", "title": "TP3/NarrowerList", "testing_code": "assert sat(['this', 'list', 'is', 'narrow'], [['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]) == True\nassert sat(['gefypo', 'gomecythib'], [['gefypo', 'gomecythib'], ['vicowodasyhifeme', 'mojowu', 'poxuchuchacyweth']]) == True\nassert sat(['cil', 'vesic', 'gaquedane'], [['cil', 'vesic', 'gaquedane'], ['machetyt', 'pumepywotatofo'], ['zatex', 'gilygyxejimagiquav']]) == True\nassert sat(['mochokyhyzylethy', 'we'], [['hubibexuratezixekyl', 'todot'], ['mochokyhyzylethy', 'we'], ['sygymithajyhu', 'byziruchocetextyram', 'thizupesakocami']]) == True\nassert sat(['faryjav', 'textebyquyho'], [['r', 'datucykokegyquazyta', 'gytextevavasochub'], ['faryjav', 'textebyquyho']]) == True\nassert sat(['this', 'list', 'is', 'narrow'], []) == False\nassert sat([], [['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]) == False", "entry_fn_name": "sat"}
{"id": "125", "text": "Find all 247 integers <= 1000 that are the product of exactly three primes.\nEach integer should represented as the list of its three prime factors.\n[[2, 2, 2], [2, 2, 3],  [2, 2, 5], ...", "solution": "def sat(factors: List[List[int]]):\n    primes = set(range(2, 1000))\n    for n in range(2, 1000):\n        if n in primes:\n            primes.difference_update(range(2 * n, 1000, n))\n    if not all((p in primes for f in factors for p in f)):\n        return False\n    nums = {p * q * r for (p, q, r) in factors}\n    return max(nums) < 1000 and len(nums) == 247", "title": "TP3/ThreePrimes", "testing_code": "assert sat([[2, 2, 2], [2, 2, 3], [2, 2, 5], [2, 2, 7], [2, 2, 11], [2, 2, 13], [2, 2, 17], [2, 2, 19], [2, 2, 23], [2, 2, 29], [2, 2, 31], [2, 2, 37], [2, 2, 41], [2, 2, 43], [2, 2, 47], [2, 2, 53], [2, 2, 59], [2, 2, 61], [2, 2, 67], [2, 2, 71], [2, 2, 73], [2, 2, 79], [2, 2, 83], [2, 2, 89], [2, 2, 97], [2, 2, 101], [2, 2, 103], [2, 2, 107], [2, 2, 109], [2, 2, 113], [2, 2, 127], [2, 2, 131], [2, 2, 137], [2, 2, 139], [2, 2, 149], [2, 2, 151], [2, 2, 157], [2, 2, 163], [2, 2, 167], [2, 2, 173], [2, 2, 179], [2, 2, 181], [2, 2, 191], [2, 2, 193], [2, 2, 197], [2, 2, 199], [2, 2, 211], [2, 2, 223], [2, 2, 227], [2, 2, 229], [2, 2, 233], [2, 2, 239], [2, 2, 241], [2, 3, 3], [2, 3, 5], [2, 3, 7], [2, 3, 11], [2, 3, 13], [2, 3, 17], [2, 3, 19], [2, 3, 23], [2, 3, 29], [2, 3, 31], [2, 3, 37], [2, 3, 41], [2, 3, 43], [2, 3, 47], [2, 3, 53], [2, 3, 59], [2, 3, 61], [2, 3, 67], [2, 3, 71], [2, 3, 73], [2, 3, 79], [2, 3, 83], [2, 3, 89], [2, 3, 97], [2, 3, 101], [2, 3, 103], [2, 3, 107], [2, 3, 109], [2, 3, 113], [2, 3, 127], [2, 3, 131], [2, 3, 137], [2, 3, 139], [2, 3, 149], [2, 3, 151], [2, 3, 157], [2, 3, 163], [2, 5, 5], [2, 5, 7], [2, 5, 11], [2, 5, 13], [2, 5, 17], [2, 5, 19], [2, 5, 23], [2, 5, 29], [2, 5, 31], [2, 5, 37], [2, 5, 41], [2, 5, 43], [2, 5, 47], [2, 5, 53], [2, 5, 59], [2, 5, 61], [2, 5, 67], [2, 5, 71], [2, 5, 73], [2, 5, 79], [2, 5, 83], [2, 5, 89], [2, 5, 97], [2, 7, 7], [2, 7, 11], [2, 7, 13], [2, 7, 17], [2, 7, 19], [2, 7, 23], [2, 7, 29], [2, 7, 31], [2, 7, 37], [2, 7, 41], [2, 7, 43], [2, 7, 47], [2, 7, 53], [2, 7, 59], [2, 7, 61], [2, 7, 67], [2, 7, 71], [2, 11, 11], [2, 11, 13], [2, 11, 17], [2, 11, 19], [2, 11, 23], [2, 11, 29], [2, 11, 31], [2, 11, 37], [2, 11, 41], [2, 11, 43], [2, 13, 13], [2, 13, 17], [2, 13, 19], [2, 13, 23], [2, 13, 29], [2, 13, 31], [2, 13, 37], [2, 17, 17], [2, 17, 19], [2, 17, 23], [2, 17, 29], [2, 19, 19], [2, 19, 23], [3, 3, 3], [3, 3, 5], [3, 3, 7], [3, 3, 11], [3, 3, 13], [3, 3, 17], [3, 3, 19], [3, 3, 23], [3, 3, 29], [3, 3, 31], [3, 3, 37], [3, 3, 41], [3, 3, 43], [3, 3, 47], [3, 3, 53], [3, 3, 59], [3, 3, 61], [3, 3, 67], [3, 3, 71], [3, 3, 73], [3, 3, 79], [3, 3, 83], [3, 3, 89], [3, 3, 97], [3, 3, 101], [3, 3, 103], [3, 3, 107], [3, 3, 109], [3, 5, 5], [3, 5, 7], [3, 5, 11], [3, 5, 13], [3, 5, 17], [3, 5, 19], [3, 5, 23], [3, 5, 29], [3, 5, 31], [3, 5, 37], [3, 5, 41], [3, 5, 43], [3, 5, 47], [3, 5, 53], [3, 5, 59], [3, 5, 61], [3, 7, 7], [3, 7, 11], [3, 7, 13], [3, 7, 17], [3, 7, 19], [3, 7, 23], [3, 7, 29], [3, 7, 31], [3, 7, 37], [3, 7, 41], [3, 7, 43], [3, 7, 47], [3, 11, 11], [3, 11, 13], [3, 11, 17], [3, 11, 19], [3, 11, 23], [3, 11, 29], [3, 13, 13], [3, 13, 17], [3, 13, 19], [3, 13, 23], [3, 17, 17], [3, 17, 19], [5, 5, 5], [5, 5, 7], [5, 5, 11], [5, 5, 13], [5, 5, 17], [5, 5, 19], [5, 5, 23], [5, 5, 29], [5, 5, 31], [5, 5, 37], [5, 7, 7], [5, 7, 11], [5, 7, 13], [5, 7, 17], [5, 7, 19], [5, 7, 23], [5, 11, 11], [5, 11, 13], [5, 11, 17], [5, 13, 13], [7, 7, 7], [7, 7, 11], [7, 7, 13], [7, 7, 17], [7, 7, 19], [7, 11, 11]]) == True\nassert sat([[1, 2]]) == False\nassert sat([[1, 2]]) == False\nassert sat([[1, 2]]) == False\nassert sat([[1, 2]]) == False\nassert sat([[1, 2]]) == False", "entry_fn_name": "sat"}
{"id": "126", "text": "Find an integer exponent x such that a^x = n\nSample Input:\na=2, n=1024\nSample Output:\nx = 10", "solution": "def sat(x: int, a, n):\n    return a ** x == n", "title": "TP3/IntegerLog", "testing_code": "assert sat(170, 3, 1290070078170102666248196035845070394933441741644993085810116441344597492642263849) == True\nassert sat(242, 4, 49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816) == True\nassert sat(62, 2, 4611686018427387904) == True\nassert sat(124, 7, 619664992585427611791050679609026893099690427802915014534984716820652776102999166869953170315965558474401) == True\nassert sat(112, 3, 273892744995340833777347939263771534786080723599733441) == True\nassert sat(62, 3, 5) == False\nassert sat(62, 2, 5) == False\nassert sat(62, 4, 5) == False\nassert sat(62, 7, 5) == False\nassert sat(62, 3, 5) == False\nassert sat(62, 3, 5) == False\nassert sat(62, 7, 5) == False\nassert sat(62, 7, 5) == False\nassert sat(62, 3, 5) == False\nassert sat(62, 4, 5) == False", "entry_fn_name": "sat"}
{"id": "127", "text": "Find an integer that when cubed is n\nSample Input:\n21\nSample Output:\n3", "solution": "def sat(x: int, n):\n    return x ** 3 == n", "title": "TP3/CubeRoot", "testing_code": "assert sat(3495634671232462032, 42714774173606970182754018064350848294149432972747296768) == True\nassert sat(-777245, -469541313747981125) == True\nassert sat(9878416608492391523536166, 963966660871383014273727008911874274513660721639801945125024924885086622296) == True\nassert sat(-9504452087740620424872132, -858580967744947820888627092732831059532555665642825043140896515384975483968) == True\nassert sat(-1181525523993989138, -1649412660748961726580117293638546881248424191676176072) == True\nassert sat(3495634671232462032, 5) == False\nassert sat(-1181525523993989138, 5) == False\nassert sat(-777245, 5) == False\nassert sat(-777245, 5) == False\nassert sat(-1181525523993989138, 5) == False\nassert sat(3495634671232462032, 5) == False\nassert sat(5, -469541313747981125) == False\nassert sat(-777245, 5) == False\nassert sat(5, -469541313747981125) == False\nassert sat(3495634671232462032, 5) == False", "entry_fn_name": "sat"}
{"id": "128", "text": "Determine which characters of a hexidecimal correspond to prime numbers\nSample Input:\n\"123ABCD\"\nSample Output:\n[False, True, True, False, True, False True]", "solution": "def sat(primes: List[bool], n):\n    return all((primes[i] == (c in '2357BD') for (i, c) in enumerate(n)))", "title": "TP3/HexPrimes", "testing_code": "assert sat([False, False, True, False, False, True, True, True, False, False, False, True, True, False, False, False, False, True, False, False, True, False, True], 'A4D4455214122CE192CCBE3') == True\nassert sat([False, False, False, False, False, False, False, False, False, True, False, False, False, True, True, False, False, True, False, True, True, False, False], 'a0eebda812c4c27a97d35f1') == True\nassert sat([False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, True], '4a4a5904aaa94eb2') == True\nassert sat([False, False, False, False, False, True, True, True, True, False, True, False, False, False], 'b696e7352d58ee') == True\nassert sat([False, False, False, False, False, False, False, True, False, False, False, True, False, False, False], '1a8dcd03abe2cdc') == True\nassert sat([False, True, False, True], 'a0eebda812c4c27a97d35f1') == False\nassert sat([False, True, False, True], '1a8dcd03abe2cdc') == False\nassert sat([False, True, False, True], '1a8dcd03abe2cdc') == False\nassert sat([False, True, False, True], '4a4a5904aaa94eb2') == False\nassert sat([False, True, False, True], 'A4D4455214122CE192CCBE3') == False\nassert sat([False, True, False, True], '1a8dcd03abe2cdc') == False\nassert sat([False, True, False, True], 'A4D4455214122CE192CCBE3') == False\nassert sat([False, True, False, True], 'a0eebda812c4c27a97d35f1') == False\nassert sat([False, True, False, True], '1a8dcd03abe2cdc') == False\nassert sat([False, True, False, True], 'b696e7352d58ee') == False", "entry_fn_name": "sat"}
{"id": "129", "text": "Write n base 2 followed and preceded by 'bits'\nSample Input:\n2\nSample Output:\nbits10bits", "solution": "def sat(b: str, n):\n    if not b[:4] == b[-4:] == 'bits':\n        return False\n    inside = b[4:-4]\n    if not all((c in '01' for c in inside)):\n        return False\n    if not (inside[0] == '1' or len(inside) == 1):\n        return False\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n", "title": "TP3/Binarize", "testing_code": "assert sat('bits100100111100101000100001000010011010101011101100001111100110101bits', 5324680297138495285) == True\nassert sat('bits10100000111010101100111000000010100011111011010bits', 88465169532890) == True\nassert sat('bits0bits', 0) == True\nassert sat('bits111011001011000100000010011110101110010001000001101010bits', 16655679678386282) == True\nassert sat('bits101101010100bits', 2900) == True\nassert sat('', 5324680297138495285) == False", "entry_fn_name": "sat"}
{"id": "130", "text": "A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\nSample Input:\n\"street\"\nSample Output:\n[3, 4]", "solution": "def sat(indices: List[int], s):\n    (i, j) = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3", "title": "TP3/NearbyDuplicates", "testing_code": "assert sat([12, 13], 'I am an unhappy string!') == True\nassert sat([4, 5], 'aeEm%%uIV0imR&xUvQvZf#1z4') == True\nassert sat([5, 6], 'e&S|C;;b1Nf[mmsQrQY') == True\nassert sat([1, 3], '?EaEc/oDAm(i gP') == True\nassert sat([4, 5], 'pXw|EEcTKZ;:n[-tBME[[sn%fR37l;bM,t%!') == True", "entry_fn_name": "sat"}
{"id": "131", "text": "Convert GPAs to letter grades according to the following table:\n4.0: A+\n3.7: A\n3.4: A-\n3.0: B+\n2.7: B\n2.4: B-\n2.0: C+\n1.7: C\n1.4: C-\nbelow: F\nSample input: [4.0, 3.5, 3.8]\nSample output: ['A+', 'A-', 'A']", "solution": "def sat(grades: List[str], gpas):\n    if not len(grades) == len(gpas):\n        return False\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for (grade, gpa) in zip(grades, gpas):\n        i = letters.index(grade)\n        if not gpa >= scores[i]:\n            return False\n        if not (i == 0 or gpa <= scores[i - 1]):\n            return False\n    return True", "title": "TP3/Grader", "testing_code": "assert sat(['B', 'B+', 'A+', 'C+', 'B+', 'B-', 'F'], [2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]) == True\nassert sat(['A', 'B-', 'A-', 'B-', 'F', 'C-'], [3.9759656717898215, 2.532507032264099, 3.695549189812313, 2.492545757546573, 0.9653857771911838, 1.619680869536884]) == True\nassert sat(['F'], [1.0670062946539565]) == True\nassert sat([], []) == True\nassert sat(['B', 'F'], [2.7731700871871414, 0.5127907383392896]) == True\nassert sat('[]', '[3.9759656717898215, 2.532507032264099, 3.695549189812313, 2.492545757546573, 0.9653857771911838, 1.619680869536884]') == False\nassert sat(['B', 'B+', 'A+', 'C+', 'B+', 'B-', 'F'], []) == False\nassert sat('[]', '[2.7731700871871414, 0.5127907383392896]') == False\nassert sat('[]', '[2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]') == False\nassert sat('[]', '[1.0670062946539565]') == False\nassert sat([], [2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]) == False", "entry_fn_name": "sat"}
{"id": "132", "text": "Find a string which when repeated more than once gives s\nSample Input:\n\"haha\"\nSample Output:\n\"ha\"", "solution": "def sat(factor: str, s):\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))", "title": "TP3/FactorString", "testing_code": "assert sat('catscat', 'catscatcatscatcatscat') == True\nassert sat('pamithelozefefitext', 'pamithelozefefitextpamithelozefefitext') == True\nassert sat('maher', 'mahermahermahermahermahermahermahermaher') == True\nassert sat('mapychys', 'mapychysmapychysmapychysmapychysmapychysmapychys') == True\nassert sat('thiha', 'thihathihathihathihathihathiha') == True\nassert sat('catscat', '') == False", "entry_fn_name": "sat"}
{"id": "133", "text": "Find an b-bit integer with a bit-sum of s\nb=3, s=2 => 5 # 5 is 101 in binary", "solution": "def sat(n: int, b, s):\n    n_str = bin(n)[2:]\n    return len(n_str) == b and sum((int(i) for i in n_str)) == s", "title": "TP3/BitSum", "testing_code": "assert sat(162259271993510084933061311463424, 107, 25) == True\nassert sat(576460752303423232, 59, 51) == True\nassert sat(223741436863085634409521749481834675708763587282583222886261325799305187541819563744885033326754909183041871165773435313081225474664635755472226765949723278285256830531087594548959384855304521689408388753604002367552745156977831476746479824573300736, 825, 653) == True\nassert sat(36695977855841144185773134324833391052745039826692497979801421430190766017415756929120149275809421308461056, 354, 287) == True\nassert sat(57896044618658097711785492504343953926634992332820282019728792003956564819968, 256, 1) == True\nassert sat(5, 59, 1) == False\nassert sat(5, 107, 1) == False\nassert sat(5, 256, 1) == False\nassert sat(5, 825, 1) == False\nassert sat(5, 59, 1) == False\nassert sat(5, 354, 1) == False\nassert sat(5, 59, 51) == False\nassert sat(5, 59, 25) == False\nassert sat(5, 825, 1) == False\nassert sat(5, 256, 1) == False", "entry_fn_name": "sat"}
{"id": "134", "text": "Find the sum of the even elements that are at odd indices\n[1, 2, 8, 3, 9, 4] => 6", "solution": "def sat(even_odd_sum: int, nums):\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0", "title": "TP3/EvenOddSum", "testing_code": "assert sat(132974818761244, [2341, 125146894, 12521, -12451293476325, 535284623934, 132974693614350]) == True\nassert sat(10, [63, 11, -95, 69, 73, -43, 69, -26, -49, 36, 83, 21, -26, 11]) == True\nassert sat(-148, [29, -100, 94, -10, -97, -70, 86, 69, -61, 44, 48, -12, 92]) == True\nassert sat(52, [-75, -2, 68, 36, -4, 58, -42, -92, 28, 59, -66, 52]) == True\nassert sat(-210, [48, -42, -19, -82, -71, -57, -85, 61, 61, -86]) == True\nassert sat(132974818761244, []) == False", "entry_fn_name": "sat"}
{"id": "135", "text": "Create a new string by taking s, and word by word rearranging its characters in ascii order\nSample input:\n'maltos wow'\nSample output:\n'almost oww'", "solution": "def sat(s: str, orig):\n    for (a, b) in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            if not a[i] <= a[i + 1]:\n                return False\n        if not (len(a) == len(b) and all((a.count(c) == b.count(c) for c in b))):\n            return False\n    return len(s) == len(orig)", "title": "TP3/AntiShuffle", "testing_code": "assert sat('Hello !!!dlorw', 'Hello world!!!') == True\nassert sat('OUY ACN aaeegnrrr my ,eelrstt esy ouy !acn', 'YOU CAN rearrange my letters, yes you can!') == True\nassert sat('Nac ouy Eadhln GGGGGGGGGGGGLNO ?ginrsst', 'caN you handlE LONGGGGGGGGGGGG strings?') == True\nassert sat('how botu    acepss adn deirw !#$%%?@acinnopttuu', 'how bout    spaces and weird punctuation!?$%@#%') == True\nassert sat('chhiiijrtuuux abbceeehhiklotttuwxy ooquz', 'ruhixuthuciji kebelobawitextythuch quozo') == True\nassert sat('', 'Hello world!!!') == False\nassert sat('Hello !!!dlorw', '') == False", "entry_fn_name": "sat"}
{"id": "136", "text": "Find the indices of all occurrences of target in the uneven matrix\nSample input:\nuneven=[[2, 3, 2], [], [9, 2]], target=2\nSample output:\n[[0, 0], [0, 2], [2, 1]]", "solution": "def sat(indices: List[List[int]], uneven, target):\n    for (i, j) in indices:\n        if not uneven[i][j] == target:\n            return False\n    for (i, row) in enumerate(uneven):\n        for (j, n) in enumerate(row):\n            if not (n != target or [i, j] in indices):\n                return False\n    return True", "title": "TP3/UnevenFind", "testing_code": "assert sat([[0, 4], [1, 0], [1, 3], [4, 1]], [[1, 3, 2, 32, 17], [17, 2, 48, 17], [], [9, 35, 4], [3, 17]], 17) == True\nassert sat([[0, 0], [0, 2], [0, 3], [1, 1], [1, 3], [1, 4], [3, 0]], [[64, 7, 64, 64, 20], [72, 64, 22, 64, 64], [21, 35], [64, 0, 96, 27]], 64) == True\nassert sat([[0, 1]], [[16, 87]], 87) == True\nassert sat([], [], 30) == True\nassert sat([[1, 1], [1, 4], [1, 5], [1, 6], [4, 0], [4, 3], [4, 4], [4, 6], [4, 7], [4, 8], [6, 0], [6, 2], [6, 5], [6, 7], [7, 0], [7, 3]], [[5, 30, 18], [53, 64, 87, 69, 64, 64, 64], [], [44], [64, 88, 68, 64, 64, 84, 64, 64, 64], [31], [64, 5, 64, 71, 42, 64, 48, 64, 27], [64, 80, 11, 64]], 64) == True\nassert sat([], [[1, 3, 2, 32, 17], [17, 2, 48, 17], [], [9, 35, 4], [3, 17]], 17) == False", "entry_fn_name": "sat"}
{"id": "137", "text": "Reorder nums in increasing/decreasing order based on whether the first plus last element is even/odd\nSample input:\n[1, 7, 4]\nSample output:\n[1, 4, 7] # because 1 + 4 is odd\nSample input:\n[1, 7, 5]\nSample output:\n[8, 5, 1] # because 1 + 5 is even", "solution": "def sat(up_down: List[int], nums):\n    if not all((up_down.count(i) == nums.count(i) for i in set(up_down + nums))):\n        return False\n    increasing_sign = 1 if (nums[0] + nums[-1]) % 2 == 1 else -1\n    return all(((up_down[i + 1] - up_down[i]) * increasing_sign >= 0 for i in range(len(up_down) - 1)))", "title": "TP3/UpDownSort", "testing_code": "assert sat([523, 18, 17, 3, 2, 2, 0, -1, -2], [17, 2, 3, 523, 18, -2, 0, 2, -1]) == True\nassert sat([], [17, 2, 3, 523, 18, -2, 0, 2, -1]) == False\nassert sat([523, 18, 17, 3, 2, 2, 0, -1, -2], []) == False", "entry_fn_name": "sat"}
{"id": "138", "text": "Apply a substitution cypher in which each character is advanced by two multiplied by two places.\n'substitution cypher' => 'wyfwxmxyxmsr$g}tliv'", "solution": "def sat(encrypted: str, orig):\n    if not len(encrypted) == len(orig):\n        return False\n    return all((chr(ord(a) - 2 * 2) == b for (a, b) in zip(encrypted, orig)))", "title": "TP3/SubstitutionCypher", "testing_code": "assert sat('Lipps0${svph%', 'Hello, world!') == True\nassert sat('', '') == True\nassert sat('f}j}oszizyz}|ersjm$p}kspsrs$t}~yl$x', 'byfykovevuvyxanofi lygolono pyzuh t') == True\nassert sat('hsk}zsxmxsrygy|igiuy$nely~s{m~$n}re', 'dogyvotitonucuxecequ jahuzowiz jyna') == True\nassert sat('glshexi|x$uy}gmqsuy}xyrio', 'chodatext quycimoquytunek') == True\nassert sat('Lipps0${svph%', '') == False\nassert sat('', 'Hello, world!') == False", "entry_fn_name": "sat"}
{"id": "139", "text": "Find the second smallest unique number in the list nums.\nSample input:\n[2, 5, 2, 7, 9]\nSample output:\n5", "solution": "def sat(n: int, nums):\n    if not n in nums:\n        return False\n    return len({i for i in nums if i <= n}) == 2", "title": "TP3/SecondSmallestUnique", "testing_code": "assert sat(-1023589211, [17, -1023589211, -293485382500, 31, -293485382500, 105762, 94328103589]) == True\nassert sat(-4, [-3, -4, -3, 8, -9]) == True\nassert sat(-7, [0, -5, -7, -5, 0, -2, 6, -8]) == True\nassert sat(6, [6, 5]) == True\nassert sat(4, [4, -8, 8, 4]) == True\nassert sat('4', '[6, 5]') == False\nassert sat('-1023589211', '[6, 5]') == False\nassert sat('4', '[0, -5, -7, -5, 0, -2, 6, -8]') == False\nassert sat('-1023589211', '[4, -8, 8, 4]') == False\nassert sat('6', '[-3, -4, -3, 8, -9]') == False\nassert sat('-7', '[4, -8, 8, 4]') == False\nassert sat('-4', '[4, -8, 8, 4]') == False\nassert sat('-4', '[-3, -4, -3, 8, -9]') == False\nassert sat('6', '[6, 5]') == False\nassert sat('4', '[4, -8, 8, 4]') == False", "entry_fn_name": "sat"}
{"id": "140", "text": "A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\n--- Example input ---\n'I wrote this. You read it? I think I am so cool. In another time, I would be lame.'\n--- Example output ---\n['I wrote this', ' I think I am so cool']", "solution": "def sat(boring: List[str], text):\n    sentences = text.replace('!', '.').replace('?', '.').split('.')\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != ['I']]\n    return sorted(boring_and_exciting) == sorted(sentences)", "title": "TP3/FindBored", "testing_code": "assert sat([' I am boring', ' I am sooo tired'], 'This is not boring. I am boring! I am sooo tired.') == True\nassert sat(['I', 'I wevymicygequipi cicemyte tha cetexti vuhoxadivelabyduxix', 'I lanusutho kuzit', 'I kacuquedewapojedu thulocho', 'I chezeri'], 'dexuzuhyfac lifugerimosiwybot.hesukawycat!hawymemof pa text z.nuquyt weminubadithikanat gejetextipafex vobenekothob.reraxithechaquipapav wexamew lobihus zygijehequesatextacy jucyth?I?I wevymicygequipi cicemyte tha cetexti vuhoxadivelabyduxix?I lanusutho kuzit?nathor sopati myjamygukiwyhuje.I kacuquedewapojedu thulocho?I chezeri.thubitozogukenejugox.cytonoc tex tobaquy wiwithij!vinam rarile sibizytexta notaxithyzu?') == True\nassert sat([], '') == True\nassert sat(['I textovugythecodo ruwatekat dane wachikechanequi matupisofunehac'], 'nysydajywigi vefusivechucirochuw tipeko pogofinifyk.I textovugythecodo ruwatekat dane wachikechanequi matupisofunehac.tubicetofalat colawuhemedexeq lurytext?') == True\nassert sat(['I', 'I chypufomiwylojen ziwuwygawyfyg makatex', 'I gujyduvafe gykizubam cofurythoc'], '?zihithi ch chithe vuluzuquidawyquo.I?I chypufomiwylojen ziwuwygawyfyg makatex?textidigefoc nyjav.I gujyduvafe gykizubam cofurythoc.coc thohifycepy tex kybiwulatextux.') == True\nassert sat([' I am boring', ' I am sooo tired'], '') == False\nassert sat([], 'This is not boring. I am boring! I am sooo tired.') == False", "entry_fn_name": "sat"}
{"id": "141", "text": "Determine which triples sum to zero\n--- Example input ---\n[1, 2, 4, -3, 5]\n--- Example output ---\n[0, 1, 3]", "solution": "def sat(zero_sums: List[bool], trips):\n    return len(zero_sums) == len(trips) and all((z == (a + b + c == 0) for (z, (a, b, c)) in zip(zero_sums, trips)))", "title": "TP3/IdentifyZeroTrips", "testing_code": "assert sat([False, True, True, False, False], [[1253532, -3920635, 332], [-24, 18, 6], [0, 5, -5], [1, 1, 1], [-20, 17, 4]]) == True\nassert sat([False, False, False, True], [[7, -5, -4], [-7, 1, -6], [-2, 10, 3], [-9, -1, 10]]) == True\nassert sat([False, False, False, False, False, False], [[-9, 9, -1], [-3, -7, -10], [0, -8, 5], [-8, -3, 3], [4, 8, 2], [-10, 8, 3]]) == True\nassert sat([False, False, False, False, False, False, False, False, False, True, False, False, False, False, False], [[-9, 3, 5], [-2, 8, 6], [1, 7, 8], [-4, 3, 4], [1, -6, 10], [-5, -8, -13], [-4, 10, -8], [1, -2, -4], [7, 2, 9], [4, -4, 0], [8, -1, 2], [-6, 0, -7], [-10, -4, 8], [-2, 6, 4], [-6, 8, 2]]) == True\nassert sat([False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False], [[7, -10, -3], [2, 9, 11], [-3, -10, -1], [-10, -5, 2], [-4, -5, -9], [-10, 5, -5], [1, 7, -6], [-3, -9, -12], [-5, -2, -7], [8, 10, 2], [-5, -2, 0], [-1, -6, -7], [8, 6, 2], [-8, 0, 7], [5, -5, 10], [-8, -6, -1], [-1, 1, 0], [-10, 9, -7]]) == True\nassert sat('[False, True, True, False, False]', '[[-9, 3, 5], [-2, 8, 6], [1, 7, 8], [-4, 3, 4], [1, -6, 10], [-5, -8, -13], [-4, 10, -8], [1, -2, -4], [7, 2, 9], [4, -4, 0], [8, -1, 2], [-6, 0, -7], [-10, -4, 8], [-2, 6, 4], [-6, 8, 2]]') == False\nassert sat('[False, True, True, False, False]', '[[1253532, -3920635, 332], [-24, 18, 6], [0, 5, -5], [1, 1, 1], [-20, 17, 4]]') == False\nassert sat('[False, False, False, False, False, False]', '[[7, -5, -4], [-7, 1, -6], [-2, 10, 3], [-9, -1, 10]]') == False\nassert sat('[False, False, False, True]', '[[7, -5, -4], [-7, 1, -6], [-2, 10, 3], [-9, -1, 10]]') == False\nassert sat('[False, False, False, False, False, False, False, False, False, True, False, False, False, False, False]', '[[-9, 9, -1], [-3, -7, -10], [0, -8, 5], [-8, -3, 3], [4, 8, 2], [-10, 8, 3]]') == False\nassert sat('[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]', '[[1253532, -3920635, 332], [-24, 18, 6], [0, 5, -5], [1, 1, 1], [-20, 17, 4]]') == False\nassert sat('[False, False, False, True]', '[[-9, 3, 5], [-2, 8, 6], [1, 7, 8], [-4, 3, 4], [1, -6, 10], [-5, -8, -13], [-4, 10, -8], [1, -2, -4], [7, 2, 9], [4, -4, 0], [8, -1, 2], [-6, 0, -7], [-10, -4, 8], [-2, 6, 4], [-6, 8, 2]]') == False\nassert sat('[False, False, False, False, False, False]', '[[-9, 3, 5], [-2, 8, 6], [1, 7, 8], [-4, 3, 4], [1, -6, 10], [-5, -8, -13], [-4, 10, -8], [1, -2, -4], [7, 2, 9], [4, -4, 0], [8, -1, 2], [-6, 0, -7], [-10, -4, 8], [-2, 6, 4], [-6, 8, 2]]') == False\nassert sat('[False, False, False, True]', '[[1253532, -3920635, 332], [-24, 18, 6], [0, 5, -5], [1, 1, 1], [-20, 17, 4]]') == False\nassert sat('[False, True, True, False, False]', '[[-9, 9, -1], [-3, -7, -10], [0, -8, 5], [-8, -3, 3], [4, 8, 2], [-10, 8, 3]]') == False", "entry_fn_name": "sat"}
{"id": "142", "text": "Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n--- Example input ---\n'THIS is a TEST'\n--- Example output ---\n'thks KS C tgst'", "solution": "def sat(s: str, target):\n    subs = {ord(c): ord(c) + 2 for c in 'aeiouAEIOU'}\n    return s.swapcase() == target.translate(subs)", "title": "TP3/WeirdDecodeVowels", "testing_code": "assert sat('hGLLQ, WQRLD!', 'Hello, world!') == True\nassert sat('tHKS KS C GQQD TGST', 'This is a good test') == True\nassert sat('', '') == True\nassert sat('tHCT LCST TGST WCS C BCD TGST!', 'That last test was a bad test!') == True\nassert sat('PNGWMQNQWLTRCMKCRQSCQPKCSKLKCQVQLCNQCQNKQSKS', 'pneumonoultramicroscopicsilicovolanoconiosis') == True\nassert sat('', 'Hello, world!') == False\nassert sat('hGLLQ, WQRLD!', '') == False", "entry_fn_name": "sat"}
{"id": "143", "text": "Find the index of the largest prime in the list and the sum of its digits\n--- Example input ---\n[2, 4, 7, 19, 21]\n--- Example output ---\n[3, 10]", "solution": "def sat(ans: List[int], nums):\n    (i, digit_sum) = ans\n    n = nums[i]\n\n    def is_prime(n):\n        return n > 1 and all((n % j for j in range(2, int(n ** 0.5) + 1)))\n    return is_prime(n) and all((m <= n for m in nums if is_prime(m))) and (digit_sum == sum((int(c) for c in str(n))))", "title": "TP3/LargestPrimeDigitSum", "testing_code": "assert sat([6, 7], [23, 17, 201, 14, 10473, 43225, 421, 423, 11, 10, 2022, 342157]) == True\nassert sat([6, 7], [84545, 52, 5755523, 666, 1984, 97315, 7, 3, 789, 427]) == True\nassert sat([0, 5], [5, 7151804, 432154, 5700, 9, 8, 253, 29062, 960, 721]) == True\nassert sat([9, 16], [233804, 41, 6149533, 79, 956, 317909, 8628, 248, 35086, 79]) == True\nassert sat([7, 16], [87, 2, 2883, 32665, 26115, 32, 77, 97, 717, 674175]) == True\nassert sat([0, 5], [0]) == False\nassert sat([0, 5], [0]) == False\nassert sat([0, 5], [0]) == False\nassert sat([0, 5], [0]) == False\nassert sat([0, 5], [0]) == False", "entry_fn_name": "sat"}
{"id": "144", "text": "Find the dictionary key whose case is different than all other keys\n--- Example input ---\n{\"red\": \"\", \"GREEN\": \"\", \"blue\": \"orange\"}\n--- Example output ---\n\"GREEN\"", "solution": "def sat(different: str, d):\n    return different in d and all((k.islower() != different.islower() for k in d if k != different))", "title": "TP3/OddCase", "testing_code": "assert sat('OK', {'cat': 'CAT', 'tree': 'T', 'pick me': 'not', 'OK': 'red', 'blah': 'blah', 'z': 'Z'}) == True\nassert sat('THEMITOTH', {'den': 'fymehihyxuro', 'madufitextuthohyv': 'sofekuhepokosixyzoza', 'xechygo': 'kythubehuzagu', 'xukefulete': 'hugevybelypyrer', 'maw': 'vaveraral', 'hichaquidyto': 'quisi', 'remenidasohijetybah': 'bukomegewisevoxoz', 'kyte': 'fonecohynipesewyth', 'cax': 'bilesequ', 'caduquetextan': 'juzedabaz', 'THEMITOTH': 'xotugythuzu'}) == True\nassert sat('tizenyry', {'CHIRATICHUHUQUYZYPYW': 'kopakyquotyhaquome', 'QUEBYTEXTEXUROBEK': 'tituxa', 'ZUVU': 'xupovutexti', 'NATEXTESYTUBUMY': 'ponusewaquufot', 'THUK': 'gyvy', 'CETEXTOFENAXIXANEKA': 'xyjytextecywykoquo', 'SEKAMIWEHYTHYTEXTUCU': 'jehu', 'H': 'quicyquohofowejivun', 'KYTEXTIBAXUTAV': 'nygutextin', 'LYQUA': 'biruji', 'tizenyry': 'xavyquukoc'}) == True\nassert sat('rixechy', {'CHEWA': 'geratenegafa', 'WATHYHUVOTEXTINO': 'th', 'DIFUS': 'zetextatasohunibathe', 'TUBEZA': 'rajytextar', 'NEZALEQUAZAHEKAGUPU': 'bequexucoxy', 'SEBOLIZEDUL': 'wyxufyhodymube', 'ZU': 'conuhywumychogije', 'DE': 'lebemypovoke', 'DEBURUGINOC': 'gequilithyjyvymufi', 'TEXTURAFA': 'textejesyko', 'rixechy': 'fate'}) == True\nassert sat('B', {'quicaboguc': 'su', 'sacylir': 'tholubakypynythiryr', 'vijuchox': 'matextyquorewetytefy', 'lechi': 'nuch', 'viz': 'cheferopa', 'textowikalihehupyxi': 'quuchonasufexi', 'wuhujasi': 'f', 'tytextedoma': 'zifehabumabocate', 'gaviquolaxagihisice': 'sulywuzoquo', 'muvequo': 'juxachameje', 'B': 'quanesyfeku'}) == True\nassert sat('OK', {}) == False\nassert sat('', {'cat': 'CAT', 'tree': 'T', 'pick me': 'not', 'OK': 'red', 'blah': 'blah', 'z': 'Z'}) == False", "entry_fn_name": "sat"}
{"id": "145", "text": "Find all primes up to n\n--- Example input ---\n9\n--- Example output ---\n[2, 3, 5, 7]", "solution": "def sat(primes: List[int], n):\n    if not (all((1 < p for p in primes)) and all((p % q for p in primes for q in primes if q < p))):\n        return False\n    return len({i for p in primes for i in range(p, n, p)}) == max(n - 2, 0)", "title": "TP3/PrimesUpTo", "testing_code": "assert sat([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231], 1234) == True\nassert sat([2, 3, 5, 7], 10) == True\nassert sat([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997], 1000) == True\nassert sat([], -1) == True\nassert sat([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973], 10000) == True\nassert sat([], 1234) == False", "entry_fn_name": "sat"}
{"id": "146", "text": "Find the product of the units digits in the numbers\n[12, 34] => 8", "solution": "def sat(prod: int, nums):\n    if not all(nums):\n        return prod == 0\n    for n in nums:\n        k = abs(n % 10)\n        if k == 0:\n            return prod == 0\n        if not prod % k == 0:\n            return False\n        prod //= k\n    return prod == 1", "title": "TP3/UnitsProduct", "testing_code": "assert sat(352800, [17, 24, 39, 15, 11, 201, 97, 65, 18]) == True\nassert sat(0, [1, 9, 96, 79, 86, -30, -33, 63, 39, 35]) == True\nassert sat(0, [-29, -50, -4, 79, 2, 19, 34, 9, 27, -42]) == True\nassert sat(0, [-28, -34, 90, 0, -38, -39, -13, 13, 56, 50]) == True\nassert sat(0, [81, 36, -53, 17, 40, -30, -20, 13, -16, -18]) == True\nassert sat(352800, []) == False", "entry_fn_name": "sat"}
{"id": "147", "text": "Find the positions of all uppercase vowels (not counting Y) in even indices\n\"EAT here NOW\" => [0, 10]", "solution": "def sat(positions: List[int], s):\n    if not all((s[i] in 'AEIOU' for i in positions)):\n        return False\n    return all((i in positions or c not in 'AEIOU' or i % 2 == 1 for (i, c) in enumerate(s)))", "title": "TP3/UppercaseEven", "testing_code": "assert sat([2, 8, 16, 20], 'ThIs is A tEsT, Or *IS* iT?') == True\nassert sat([], 'j') == True\nassert sat([], 'FYZuLOLYcoduHUSA') == True\nassert sat([], 'vEWUquyCo') == True\nassert sat([], 'JUtARefAzeVyruJEvAKy') == True\nassert sat([], 'ThIs is A tEsT, Or *IS* iT?') == False", "entry_fn_name": "sat"}
{"id": "148", "text": "Round to nearest integer\n--- input ---\n3.7\n--- output ---\n4", "solution": "def sat(n: int, x):\n    return abs(n - x) <= 0.5", "title": "TP3/ClosestInteger", "testing_code": "assert sat(329437924, 329437923.5) == True\nassert sat(3557710971, 3557710970.9527555) == True\nassert sat(-250407, -250406.87146656853) == True\nassert sat(346687, 346686.79646634863) == True\nassert sat(1087255, 1087254.523941833) == True\nassert sat(5, 329437923.5) == False\nassert sat(329437924, 0.5) == False\nassert sat(1087255, 0.5) == False\nassert sat(1087255, 0.5) == False\nassert sat(5, 329437923.5) == False\nassert sat(1087255, 0.5) == False\nassert sat(-250407, 0.5) == False\nassert sat(346687, 0.5) == False\nassert sat(1087255, 0.5) == False\nassert sat(-250407, 0.5) == False", "entry_fn_name": "sat"}
{"id": "149", "text": "We are making n stone piles! The first pile has n stones. If n is even, then all piles have an even\nnumber of stones. If n is odd, all piles have an odd number of stones. Each pile must more stones\nthan the previous pile but as few as possible. Return the number of stones in each pile.\n2 => [2, 4]", "solution": "def sat(li: List[int], n):\n    return li[0] == n and len(li) == n and all((b - a == 2 for (a, b) in zip(li, li[1:])))", "title": "TP3/StonePiles", "testing_code": "assert sat([909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977, 1979, 1981, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625, 2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 2723, 2725], 909) == True\nassert sat([0], 909) == False\nassert sat([0], 909) == False\nassert sat([0], 909) == False\nassert sat([0], 909) == False\nassert sat([909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977, 1979, 1981, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625, 2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 2723, 2725], 5) == False\nassert sat([909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977, 1979, 1981, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625, 2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 2723, 2725], 5) == False\nassert sat([909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977, 1979, 1981, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625, 2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 2723, 2725], 5) == False\nassert sat([0], 909) == False\nassert sat([909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977, 1979, 1981, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625, 2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 2723, 2725], 5) == False\nassert sat([909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 1897, 1899, 1901, 1903, 1905, 1907, 1909, 1911, 1913, 1915, 1917, 1919, 1921, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 1977, 1979, 1981, 1983, 1985, 1987, 1989, 1991, 1993, 1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015, 2017, 2019, 2021, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 2057, 2059, 2061, 2063, 2065, 2067, 2069, 2071, 2073, 2075, 2077, 2079, 2081, 2083, 2085, 2087, 2089, 2091, 2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345, 2347, 2349, 2351, 2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 2385, 2387, 2389, 2391, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 2409, 2411, 2413, 2415, 2417, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 2505, 2507, 2509, 2511, 2513, 2515, 2517, 2519, 2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2553, 2555, 2557, 2559, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 2619, 2621, 2623, 2625, 2627, 2629, 2631, 2633, 2635, 2637, 2639, 2641, 2643, 2645, 2647, 2649, 2651, 2653, 2655, 2657, 2659, 2661, 2663, 2665, 2667, 2669, 2671, 2673, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 2719, 2721, 2723, 2725], 5) == False", "entry_fn_name": "sat"}
{"id": "150", "text": "Split a string of words separated by commas and spaces into 2 lists: words and separators\nSample input: \"Hi there, Anna\"\nSample output: [[\"Hi\", \"there\", \"Anna\"], [\" \", \", \"]]", "solution": "def sat(splits: List[List[str]], string):\n    (words, separators) = splits\n    if not len(words) == len(separators) + 1:\n        return False\n    merged = []\n    for (w, s) in zip(words, separators + [' ']):\n        if not s.count(' ') + s.count(',') == len(s) > 0:\n            return False\n        if not w.count(' ') + w.count(',') == 0:\n            return False\n        merged += [w, s]\n    return ''.join(merged[:-1]) == string", "title": "TP3/CompleteSplit", "testing_code": "assert sat([['Hello', 'world!', 'You', 'look', 'like', \"you're\", 'on', 'turtles.'], [', ', '  ', ' ', ' ', ' ', ' ', ' ']], \"Hello, world!  You look like you're on turtles.\") == True\nassert sat([['', 'This', 'is', 'a', 'valley', 'so', 'so', 'so', ''], ['    ', ' ', '     ', ' ', ', ', ', ', ' ', ',,,,']], '    This is     a valley, so, so so,,,,') == True\nassert sat([[''], []], '') == True\nassert sat([['', ''], [' ,,,,, , , ']], ' ,,,,, , , ') == True\nassert sat([['Do', 'not', 'worry\\nabout', 'newlines\\n!'], [' ', ' ', ' ']], 'Do not worry\\nabout newlines\\n!') == True\nassert sat([[''], []], '1') == False\nassert sat([[''], []], '1') == False\nassert sat([['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']], ' ,,,,, , , ') == False\nassert sat([['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']], ' ,,,,, , , ') == False\nassert sat([['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']], '') == False\nassert sat([['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']], '') == False\nassert sat([[''], []], '1') == False\nassert sat([[''], []], '1') == False\nassert sat([[''], []], '1') == False\nassert sat([['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']], ' ,,,,, , , ') == False", "entry_fn_name": "sat"}
{"id": "151", "text": "Return the biggest even number between a and b inclusive, or -1 if there is no such number\nExample input:\na=20, b=99\nExample output:\n98", "solution": "def sat(x: int, a, b):\n    if x == -1:\n        return all((i % 2 == 1 for i in range(a, b + 1)))\n    return a <= x <= b and all((i % 2 == 1 for i in range(x + 1, b + 1)))", "title": "TP3/BiggestEven", "testing_code": "assert sat(24126846790974, 145, 24126846790974) == True\nassert sat(-1, 17, 17) == True\nassert sat(-6, -10, -6) == True\nassert sat(-1, 100, 84) == True\nassert sat(323523571222, 0, 323523571223) == True\nassert sat('-6', '17', '-6') == False\nassert sat('-1', '145', '17') == False\nassert sat('-1', '100', '-6') == False\nassert sat('-1', '100', '17') == False\nassert sat('-1', '145', '84') == False\nassert sat('-1', '-10', '-6') == False\nassert sat('-6', '17', '17') == False\nassert sat('-1', '17', '-6') == False\nassert sat('-6', '0', '17') == False\nassert sat('-1', '100', '84') == False", "entry_fn_name": "sat"}
{"id": "152", "text": "Return the average of the numbers a through b rounded to nearest integer, in binary\n(or -1 if there are no such numbers)\na=4, b=7 => '110' because the mean of 4, 5, 6 is 5 which is 110 in binary", "solution": "def sat(s: str, a, b):\n    n = int(s, 2)\n    r = range(a, b)\n    if len(r) == 0:\n        return n == -1\n    mu = sum(r) / len(r)\n    return abs(mu - n) <= min(abs(mu - n - 1), abs(mu - n + 1))", "title": "TP3/BinaryAverage", "testing_code": "assert sat('-0b1011010011011010', -103252, 10657) == True\nassert sat('-1', 70421, 70421) == True\nassert sat('-1', -10299, -10300) == True\nassert sat('0b11010', 0, 52) == True\nassert sat('-0b101101', -89, 0) == True\nassert sat('1', 0, 52) == False\nassert sat('-1', 5, 52) == False\nassert sat('1', 0, 0) == False\nassert sat('1', 0, 0) == False\nassert sat('-1', 0, 5) == False\nassert sat('-1', 0, 5) == False\nassert sat('-1', 5, 52) == False\nassert sat('1', 0, 52) == False\nassert sat('1', 0, 52) == False\nassert sat('-1', 0, 5) == False", "entry_fn_name": "sat"}
{"id": "153", "text": "Find the sublist of numbers with only odd digits in increasing order\n[17, 21, 18, 1, 4] => [1, 17, 21]", "solution": "def sat(sub: List[int], nums):\n    for i in range(len(sub)):\n        n = sub[i]\n        if not n == min(sub[i:]):\n            return False\n        if not all((int(c) % 2 for c in str(abs(n)))):\n            return False\n        if not sub.count(n) == nums.count(n):\n            return False\n    for n in nums:\n        if n not in sub:\n            if not any((int(c) % 2 == 0 for c in str(abs(n)))):\n                return False\n    return True", "title": "TP3/SortedOdds", "testing_code": "assert sat([-11, 17, 9351773], [17, 20, -100, 101, 423258, 19949, 0, 20174, 9351773, -11]) == True\nassert sat([], [57463, -919281, 3293, 346, 319386, 14840, -423, 8892, 4689075, -4526385, 5889, 1226706, -5422, 7630106, 74198, 7835, 1050438, 602897]) == True\nassert sat([-5391], [0, 7888, -1156983, 67, -304732, 128, -5391, 0, 468568]) == True\nassert sat([], [630253, -40, -8050056, -18536, 5847702, -90469, 290800, 0, -1431502, -5837, -945, 97582, 8673, 2729]) == True\nassert sat([], []) == True\nassert sat('[-5391]', '[630253, -40, -8050056, -18536, 5847702, -90469, 290800, 0, -1431502, -5837, -945, 97582, 8673, 2729]') == False\nassert sat('[-11, 17, 9351773]', '[630253, -40, -8050056, -18536, 5847702, -90469, 290800, 0, -1431502, -5837, -945, 97582, 8673, 2729]') == False\nassert sat('[-11, 17, 9351773]', '[0, 7888, -1156983, 67, -304732, 128, -5391, 0, 468568]') == False\nassert sat('[-5391]', '[]') == False\nassert sat('[-11, 17, 9351773]', '[]') == False\nassert sat('[-5391]', '[57463, -919281, 3293, 346, 319386, 14840, -423, 8892, 4689075, -4526385, 5889, 1226706, -5422, 7630106, 74198, 7835, 1050438, 602897]') == False\nassert sat('[-5391]', '[17, 20, -100, 101, 423258, 19949, 0, 20174, 9351773, -11]') == False\nassert sat([-11, 17, 9351773], []) == False\nassert sat([], [17, 20, -100, 101, 423258, 19949, 0, 20174, 9351773, -11]) == False\nassert sat('[-11, 17, 9351773]', '[57463, -919281, 3293, 346, 319386, 14840, -423, 8892, 4689075, -4526385, 5889, 1226706, -5422, 7630106, 74198, 7835, 1050438, 602897]') == False", "entry_fn_name": "sat"}
{"id": "154", "text": "Return the single digits in nums sorted backwards and converted to English words\n[2, 3, 4, 5, 17] => ['five', 'four', 'three', 'two']", "solution": "def sat(backwards_digits: List[str], nums):\n    digits = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    li = [digits[s] for s in backwards_digits]\n    for (i, n) in enumerate(li):\n        if not n == max(li[i:i + 2]):\n            return False\n        if not nums.count(n) == li.count(n):\n            return False\n    return all((n not in range(1, 10) or n in li for n in nums))", "title": "TP3/BackwardsDigits", "testing_code": "assert sat(['nine', 'eight', 'seven', 'six', 'five', 'five', 'four', 'three', 'two', 'two'], [0, 2, 14, -2, 3, 8, 4, 5, 5, 7, 21, 101, 41, 2, 9, 6]) == True\nassert sat([], [98, -3]) == True\nassert sat(['nine', 'five'], [22, 5, 27, 10, 70, 9, 82, -5, 30, 51, 10, 0, 48]) == True\nassert sat(['nine', 'four', 'one'], [-5, -3, 9, 1, 93, -1, 4]) == True\nassert sat(['seven', 'six', 'five', 'five', 'three', 'three'], [-1, 3, 75, 86, 70, -5, 31, 5, 62, 6, 92, 60, 29, 5, 7, 3]) == True\nassert sat([], [0, 2, 14, -2, 3, 8, 4, 5, 5, 7, 21, 101, 41, 2, 9, 6]) == False\nassert sat(['nine', 'eight', 'seven', 'six', 'five', 'five', 'four', 'three', 'two', 'two'], []) == False", "entry_fn_name": "sat"}
{"id": "155", "text": "Output a list of n integers, where the mth entry is m! if m is even or else (1+2+...+m)\n5 => [1, 2, 6, 9, 120]", "solution": "def sat(li: List[int], n):\n    if not len(li) == n:\n        return False\n    for (i, m) in enumerate(li):\n        if i < 2:\n            if not m == i + 1:\n                return False\n        elif i % 2 == 1:\n            if not m == li[i - 2] + i + (i + 1):\n                return False\n        elif not m == li[i - 2] * i * (i + 1):\n            return False\n    return True", "title": "TP3/AlternatingFactorials", "testing_code": "assert sat([1, 2, 6, 9, 120, 20, 5040, 35, 362880, 54, 39916800, 77, 6227020800, 104, 1307674368000, 135, 355687428096000, 170, 121645100408832000, 209, 51090942171709440000, 252, 25852016738884976640000, 299, 15511210043330985984000000, 350, 10888869450418352160768000000, 405, 8841761993739701954543616000000, 464, 8222838654177922817725562880000000, 527, 8683317618811886495518194401280000000, 594, 10333147966386144929666651337523200000000, 665, 13763753091226345046315979581580902400000000, 740, 20397882081197443358640281739902897356800000000, 819, 33452526613163807108170062053440751665152000000000, 902, 60415263063373835637355132068513997507264512000000000, 989, 119622220865480194561963161495657715064383733760000000000, 1080, 258623241511168180642964355153611979969197632389120000000000, 1175, 608281864034267560872252163321295376887552831379210240000000000, 1274, 1551118753287382280224243016469303211063259720016986112000000000000, 1377, 4274883284060025564298013753389399649690343788366813724672000000000000, 1484, 12696403353658275925965100847566516959580321051449436762275840000000000000, 1595, 40526919504877216755680601905432322134980384796226602145184481280000000000000, 1710, 138683118545689835737939019720389406345902876772687432540821294940160000000000000, 1829, 507580213877224798800856812176625227226004528988036003099405939480985600000000000000, 1952, 1982608315404440064116146708361898137544773690227268628106279599612729753600000000000000, 2079, 8247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000, 2210, 36471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000, 2345, 171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000, 2484, 850478588567862317521167644239926010288584608120796235886430763388588680378079017697280000000000000000, 2627, 4470115461512684340891257138125051110076800700282905015819080092370422104067183317016903680000000000000000, 2774, 24809140811395398091946477116594033660926243886570122837795894512655842677572867409443815424000000000000000000, 2925, 145183092028285869634070784086308284983740379224208358846781574688061991349156420080065207861248000000000000000000, 3080, 894618213078297528685144171539831652069808216779571907213868063227837990693501860533361810841010176000000000000000000, 3239, 5797126020747367985879734231578109105412357244731625958745865049716390179693892056256184534249745940480000000000000000000, 3402, 39455239697206586511897471180120610571436503407643446275224357528369751562996629334879591940103770870906880000000000000000000, 3569, 281710411438055027694947944226061159480056634330574206405101912752560026159795933451040286452340924018275123200000000000000000000, 3740, 2107757298379527717213600518699389595229783738061356212322972511214654115727593174080683423236414793504734471782400000000000000000000, 3915, 16507955160908461081216919262453619309839666236496541854913520707833171034378509739399912570787600662729080382999756800000000000000000000, 4094, 135200152767840296255166568759495142147586866476906677791741734597153670771559994765685283954750449427751168336768008192000000000000000000000, 4277, 1156772507081641574759205162306240436214753229576413535186142281213246807121467315215203289516844845303838996289387078090752000000000000000000000, 4464, 10329978488239059262599702099394727095397746340117372869212250571234293987594703124871765375385424468563282236864226607350415360000000000000000000000, 4655, 96192759682482119853328425949563698712343813919172976158104477319333745612481875498805879175589072651261284189679678167647067832320000000000000000000000, 4850, 933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000, 5049], 100) == True\nassert sat([], 100) == False", "entry_fn_name": "sat"}
{"id": "156", "text": "Find all even palindromes up to n\n3 => [0, 2]", "solution": "def sat(pals: List[int], n, count):\n    return all((0 <= i <= n and str(i) == str(i)[::-1] and (i % 2 == 0) for i in pals)) and len(set(pals)) >= count", "title": "TP3/EvenPalindromeNumbers", "testing_code": "assert sat([0, 2, 4, 6, 8, 22, 44, 66, 88, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898], 1099, 49) == True\nassert sat([0, 2, 4, 6, 8, 22, 44, 66, 88, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 2002, 2112, 2222, 2332, 2442, 2552, 2662], 2737, 56) == True\nassert sat([0, 2, 4, 6, 8, 22, 44, 66, 88, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996], 7895, 79) == True\nassert sat([0, 2, 4, 6, 8, 22, 44, 66, 88, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 2002, 2112, 2222, 2332, 2442, 2552], 2645, 55) == True\nassert sat([0, 2, 4, 6, 8, 22, 44, 66, 88, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992], 3173, 59) == True\nassert sat([], 1099, 49) == False", "entry_fn_name": "sat"}
{"id": "157", "text": "Filter for the numbers in nums whose sum of digits is > 0, where the first digit can be negative.\n[12, -7, -102, -100] => [12, -102]", "solution": "def sat(pos: List[int], nums):\n    for n in pos + nums:\n        s = str(n)\n        if int(s[:2]) + sum((int(c) for c in s[2:])) <= 0:\n            if not n not in pos:\n                return False\n        elif not pos.count(n) == nums.count(n):\n            return False\n    return True", "title": "TP3/PositiveDigitSums", "testing_code": "assert sat([9124, 2410, 21, -123], [-804, 9124, -945, 2410, 0, 21, -123]) == True\nassert sat([3885, -46840, -82208, 35161, -84028], [3885, -46840, -82208, 35161, -84028]) == True\nassert sat([42550, -90058], [42550, -7024, -90058]) == True\nassert sat([39739, -37931, -68285, -32414], [39739, -37931, -68285, -32414]) == True\nassert sat([26162, -47643, -37426], [26162, -47643, -37426]) == True\nassert sat([9124, 2410, 21, -123], []) == False\nassert sat([], [-804, 9124, -945, 2410, 0, 21, -123]) == False", "entry_fn_name": "sat"}
{"id": "158", "text": "An array is ring-sorted if it is a \"rotation\" of a non-decreasing list.\nRemove at most one element from arr to make it ring-sorted.\n[1, 2, 3, -1, 6, 0] => [1, 2, 3, -1, 0]", "solution": "def sat(original: List[int], arr):\n    if not str(original)[1:-1] in str(sorted(original) * 2):\n        return False\n    return any((original == arr[:i] + arr[i + 1:] for i in range(len(arr) + 1)))", "title": "TP3/RotateSort", "testing_code": "assert sat([2, 3, -1, -1, 0, 1, 1], [2, 3, -1, -1, 0, 1, 1]) == True\nassert sat([2, 3, 3, 5, 6, 0], [2, 3, 3, 5, 6, 0]) == True\nassert sat([3, 5], [3, 5]) == True\nassert sat([3, 3, 6, 6, 8, 9, 0, 0, 1], [3, 7, 3, 6, 6, 8, 9, 0, 0, 1]) == True\nassert sat([3, 6, 7, 7, 8, 3], [3, 2, 6, 7, 7, 8, 3]) == True\nassert sat('[3, 6, 7, 7, 8, 3]', '[2, 3, -1, -1, 0, 1, 1]') == False\nassert sat('[3, 6, 7, 7, 8, 3]', '[2, 3, 3, 5, 6, 0]') == False\nassert sat('[3, 6, 7, 7, 8, 3]', '[3, 5]') == False\nassert sat('[2, 3, 3, 5, 6, 0]', '[2, 3, -1, -1, 0, 1, 1]') == False\nassert sat('[3, 5]', '[2, 3, 3, 5, 6, 0]') == False\nassert sat('[2, 3, -1, -1, 0, 1, 1]', '[3, 2, 6, 7, 7, 8, 3]') == False\nassert sat('[3, 3, 6, 6, 8, 9, 0, 0, 1]', '[3, 5]') == False\nassert sat('[3, 5]', '[2, 3, -1, -1, 0, 1, 1]') == False\nassert sat('[2, 3, 3, 5, 6, 0]', '[3, 5]') == False\nassert sat('[2, 3, 3, 5, 6, 0]', '[2, 3, 3, 5, 6, 0]') == False", "entry_fn_name": "sat"}
{"id": "159", "text": "Find a sequence of swaps (indices into two lists) such that, after making those swaps, all numbers in the\nfirst list are even\n[1, 3, 4] [2, 4, 5] => [0, 1]", "solution": "def sat(swaps: List[List[int]], nums1, nums2):\n    copy1 = nums1[:]\n    copy2 = nums2[:]\n    for (i, j) in swaps:\n        (copy1[i], copy2[j]) = (copy2[j], copy1[i])\n    return all((n % 2 == 0 for n in copy1))", "title": "TP3/ParityExchange", "testing_code": "assert sat([[0, 0], [1, 2], [4, 3], [6, 5], [7, 8]], [1, 3, 2, 4, 5, 8, 7, 11], [0, 7, 0, 8, 19, 4, 41, 43, 42]) == True\nassert sat([[5, 0], [6, 1], [7, 2]], [-4, -8, -10, -6, 0, -3, -7, 5], [-6, 6, -8, -7, -7]) == True\nassert sat([[1, 2]], [8, -5, -4], [3, 1, 4, -3, 5, 7]) == True\nassert sat([], [-8, -6], [9, -4, 0, 9, -6, -5, -4, 3, -3]) == True\nassert sat([[7, 0]], [-6, -2, 8, -4, -8, 0, 8, -3, 8], [0]) == True\nassert sat([], [1, 3, 2, 4, 5, 8, 7, 11], [0, 7, 0, 8, 19, 4, 41, 43, 42]) == False", "entry_fn_name": "sat"}
{"id": "160", "text": "Find a string consisting of space-separated characters with given counts\n{\"f\": 1, \"o\": 2} => \"oof\"", "solution": "def sat(s: str, counts):\n    chars = s.split()\n    for c in chars:\n        if not chars.count(c) == counts[c]:\n            return False\n    return len(chars) == sum(counts.values())", "title": "TP3/CharCounts", "testing_code": "assert sat('a a a a b b b b b b b b b b b b b b b b b d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d f f f f f f f f f f f f', {'a': 4, 'b': 17, 'd': 101, 'e': 0, 'f': 12}) == True\nassert sat('d d d d d d d o o o y y y y y y y y w w w', {'z': 0, 'e': 0, 'd': 7, 'o': 3, 'y': 8, 'w': 3, 'a': 0}) == True\nassert sat('s s s s s s s s z z z z z z d o o o o o o', {'s': 8, 'z': 6, 'd': 1, 'o': 6}) == True\nassert sat('c c c c c p p p p p p g w w w w k k k k k k k k', {'c': 5, 'p': 6, 'j': 0, 'g': 1, 'w': 4, 'k': 8}) == True\nassert sat('c c', {'c': 2}) == True\nassert sat('', {'a': 4, 'b': 17, 'd': 101, 'e': 0, 'f': 12}) == False", "entry_fn_name": "sat"}
{"id": "161", "text": "Return a pair of a strings where the first string is the same as a with all the characters of b removed,\nand the second string is 'True' if this string is a palindrome otherwise 'False'.\na=\"madam, I'm adam.\" b = \"Yes, we're here.\" => ['madamImadam', 'True']", "solution": "def sat(strings: List[str], a, b):\n    (s, is_palindrome) = strings\n    i = 0\n    for c in a:\n        if c not in b:\n            if not s[i] == c:\n                return False\n            i += 1\n    if not i == len(s):\n        return False\n    return is_palindrome == str(s == s[::-1])", "title": "TP3/DelPalindrome", "testing_code": "assert sat(['his is  es', 'False'], 'this is a test', 'cat') == True\nassert sat(['vochmogogajsuxujfobmnpjyquizys', 'False'], 'vochemogogajesuxujefobemenepejyquizys', 'te') == True\nassert sat(['tgdeceqyfthegthtymbegeethe', 'False'], 'tagodecequyzafiwathegothatymuzabegelelathe', 'wululizokiwa') == True\nassert sat(['sipylvegubequagujete', 'False'], 'sipylovegubequagujete', 'doh') == True\nassert sat(['fodivahug', 'False'], 'fodivahug', 'ne') == True\nassert sat(['his is  es', 'False'], '', 'cat') == False\nassert sat(['his is  es', 'False'], 'this is a test', '') == False", "entry_fn_name": "sat"}
{"id": "162", "text": "For each string in lst, count the number of odd digits. Find a string with no t's such that replacing\nthis number by t gives the string 'this is a test'\n[\"123\", \"2\"] => [\"2his is a 2es2\", \"0his a 0es0\"]", "solution": "def sat(answers: List[str], lst):\n    if len(answers) != len(lst):\n        return False\n    for (a, s) in zip(answers, lst):\n        if 't' in a:\n            return False\n        num_odds = sum((int(i) % 2 for i in s))\n        if a.replace(str(num_odds), 't') != 'this is a test':\n            return False\n    return True", "title": "TP3/ReplaceMe", "testing_code": "assert sat(['4his is a 4es4', '3his is a 3es3', '4his is a 4es4'], ['234515', '21503', '2506236943']) == True\nassert sat(['1his is a 1es1', '0his is a 0es0'], ['56', '0']) == True\nassert sat([], []) == True\nassert sat(['2his is a 2es2', '3his is a 3es3'], ['767', '5707']) == True\nassert sat(['1his is a 1es1'], ['856']) == True\nassert sat(['4his is a 4es4', '3his is a 3es3', '4his is a 4es4'], []) == False\nassert sat([], ['234515', '21503', '2506236943']) == False", "entry_fn_name": "sat"}
{"id": "163", "text": "Find the start and end of the smallest-sum subarray of [(base^i mod p) - p/2 for i=start,..., end]\nbase=3, p=7, upper =-3 => [0, 3]\n# because -3 is the sum of the elements [0:3] of [-2, 0, -1, 3, 1, 2, -2, 0, -1, 3 ...", "solution": "def sat(start_end: List[int], base, p, upper):\n    (start, end) = start_end\n    return sum((pow(base, i, p) - p // 2 for i in range(start, end))) <= upper", "title": "TP3/MinSubArraySum", "testing_code": "assert sat([24337, 49707], 7, 50741, -4897754) == True\nassert sat([100, 218], 1706, 2004, -14268) == True\nassert sat([260, 6923], 4595, 7106, -193758) == True\nassert sat([0, 2655], 1181, 2664, -102305) == True\nassert sat([53, 214], 7160, 7736, -35852) == True\nassert sat([53, 214], 7, 7736, 5) == False\nassert sat([53, 214], 7, 7736, 5) == False\nassert sat([53, 214], 7, 7736, 5) == False\nassert sat([53, 214], 7, 7736, 5) == False\nassert sat([53, 214], 7, 7736, 5) == False\nassert sat([53, 214], 7, 7106, 5) == False\nassert sat([53, 214], 7, 7106, 5) == False\nassert sat([53, 214], 7, 7106, 5) == False\nassert sat([53, 214], 7, 7106, 5) == False\nassert sat([53, 214], 7, 7106, 5) == False", "entry_fn_name": "sat"}
{"id": "164", "text": "Given a grid, partition the 1's into groups of capacity [x, y] pairs, with at most one incomplete group", "solution": "def sat(wells: List[List[List[int]]], grid, capacity):\n    grid2 = [[0 for _ in row] for row in grid]\n    for group in wells:\n        if not len(group) <= capacity:\n            return False\n        for (i, j) in group:\n            if not grid2[i][j] == 0:\n                return False\n            grid2[i][j] = 1\n    if not sum((len(group) != capacity for group in wells)) <= 1:\n        return False\n    return grid2 == grid", "title": "TP3/Buckets", "testing_code": "assert sat([[[0, 0], [0, 1]], [[0, 3], [0, 4]], [[2, 0], [2, 1]], [[2, 4]]], [[1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1]], 2) == True\nassert sat([[[0, 0], [0, 3], [0, 4], [0, 7], [1, 0], [1, 3]], [[1, 6], [1, 7], [2, 1], [2, 2], [2, 4], [2, 6]], [[3, 1], [3, 2], [3, 3], [3, 7], [4, 0], [4, 4]], [[4, 5]]], [[1, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0]], 6) == True\nassert sat([[[1, 0]]], [[0], [1]], 7) == True\nassert sat([[[0, 2], [0, 3], [0, 4], [0, 6], [0, 8]], [[1, 1], [2, 0], [2, 1], [2, 3], [2, 4]], [[2, 8], [3, 5], [3, 6], [4, 0], [4, 2]], [[4, 4], [4, 6], [4, 7], [5, 1], [5, 3]], [[5, 5], [5, 6]]], [[0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0]], 5) == True\nassert sat([[[0, 1], [1, 0], [2, 0], [2, 1], [3, 0], [4, 0], [4, 1]]], [[0, 1], [1, 0], [1, 1], [1, 0], [1, 1]], 9) == True\nassert sat([], [[1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1]], 2) == False", "entry_fn_name": "sat"}
{"id": "165", "text": "Sort the numbers in arr based on the number of 1's in their binary representation.\n[1, 2, 3, 4, 6] => [1, 2, 4, 3, 6]", "solution": "def sat(ordered: List[int], arr):\n    if sorted(ordered) != sorted(arr):\n        return False\n    return all((bin(a).count('1') <= bin(b).count('1') for (a, b) in zip(ordered, ordered[1:])))", "title": "TP3/BinarySort", "testing_code": "assert sat([4, 2, -1, 2, 16, 1048576, 3, 6, 9, 5, 15], [4, 2, 3, -1, 15, 2, 6, 9, 5, 16, 1048576]) == True\nassert sat([0, 16, 40, 6, 19, 41, 13, 7, -51, 57, -27, 47], [19, 47, -51, 40, 6, 0, 41, 57, 13, 16, -27, 7]) == True\nassert sat([1, 62, 63], [62, 63, 1]) == True\nassert sat([-9, -17, 42, -78, 85, 79, 61], [-9, -78, -17, 42, 85, 79, 61]) == True\nassert sat([-65, -6, 82, -84, 97, -85, 54, 55], [-65, -6, 82, -85, -84, 97, 55, 54]) == True\nassert sat('[0, 16, 40, 6, 19, 41, 13, 7, -51, 57, -27, 47]', '[-9, -78, -17, 42, 85, 79, 61]') == False\nassert sat('[-9, -17, 42, -78, 85, 79, 61]', '[-65, -6, 82, -85, -84, 97, 55, 54]') == False\nassert sat('[0, 16, 40, 6, 19, 41, 13, 7, -51, 57, -27, 47]', '[-65, -6, 82, -85, -84, 97, 55, 54]') == False\nassert sat('[-65, -6, 82, -84, 97, -85, 54, 55]', '[4, 2, 3, -1, 15, 2, 6, 9, 5, 16, 1048576]') == False\nassert sat('[-65, -6, 82, -84, 97, -85, 54, 55]', '[19, 47, -51, 40, 6, 0, 41, 57, 13, 16, -27, 7]') == False\nassert sat('[1, 62, 63]', '[-9, -78, -17, 42, 85, 79, 61]') == False\nassert sat('[4, 2, -1, 2, 16, 1048576, 3, 6, 9, 5, 15]', '[62, 63, 1]') == False\nassert sat('[-9, -17, 42, -78, 85, 79, 61]', '[19, 47, -51, 40, 6, 0, 41, 57, 13, 16, -27, 7]') == False\nassert sat('[4, 2, -1, 2, 16, 1048576, 3, 6, 9, 5, 15]', '[-9, -78, -17, 42, 85, 79, 61]') == False\nassert sat('[-65, -6, 82, -84, 97, -85, 54, 55]', '[-9, -78, -17, 42, 85, 79, 61]') == False", "entry_fn_name": "sat"}
{"id": "166", "text": "Find all words in the string with n consonants\nSample input:\ns=\"An eye for an I\", n=1\nSample output:\n[\"An\", \"eye\", \"an\"]", "solution": "def sat(words: List[str], s, n):\n    i = 0\n    for w in s.split():\n        num_consonants = 0\n        for c in w.lower():\n            if c not in 'aeiou':\n                num_consonants += 1\n        if num_consonants == n:\n            if words[i] != w:\n                return False\n            i += 1\n    return i == len(words)", "title": "TP3/ConsonantFilter", "testing_code": "assert sat(['This', 'very', 'hard'], 'This is not a very hard puzzle', 3) == True\nassert sat([], 'xopike tha textufuzowapa xaxiweborite dutextequuch metojylucazasysebi wy', 5) == True\nassert sat([], 'tihyc pydykosisaroquicoc text', 6) == True\nassert sat(['wu'], 'chalejugedijypiq jypityvekifate mobekolupumymikana quaxizot vurikojithokasatuka teragusaculi vyceth dachaci wu', 1) == True\nassert sat(['wy', 'pep'], 'thigafamyhuchykikoxe limyb wy textitextomyc regolathagychiby pep', 2) == True\nassert sat(['This', 'very', 'hard'], '', 3) == False", "entry_fn_name": "sat"}
{"id": "167", "text": "Find any vowel sandwich, a string consisting of a vowel between two consonants, contained in s\n\"sandwhich\" => \"hic\"", "solution": "def sat(ham: str, s):\n    vows = 'aeiou'\n    cons = 'bcdfghjklmnpqrstvwxz'\n    return ham in s and ham[0].lower() in cons and (ham[1].lower() in vows) and (ham[2].lower() in cons)", "title": "TP3/VowelSandwich", "testing_code": "assert sat('vow', 'Any vowel is OK') == True\nassert sat('wOw', 'wOwwwww!') == True\nassert sat('now', 'do pyp you know ?') == True\nassert sat('zoc', 'zocofiwihilyfizi ku pivanydebodygawepu nyfanusocosypinezaz pune') == True\nassert sat('cit', 'citextitozuwatextoq hutextawicogylalex wi wamu') == True\nassert sat('vow', '') == False", "entry_fn_name": "sat"}
{"id": "168", "text": "The string s consists of groups of parentheses separated by spaces.\nPermute the groups such that the parentheses match.\n\"( ) )(\" => \"( )( )\"", "solution": "def sat(perm: str, s):\n    if not sorted(perm.split()) == sorted(s.split()):\n        return False\n    return all((perm[:i].count('(') >= perm[:i].count(')') for i in range(len(perm))))", "title": "TP3/ParenthesesPermutation", "testing_code": "assert sat('(((((((((( ))))))))((((((( )))))))))((((((( )))))))(((((( ))))))((((( )))))(((( ))))((( )))(( ))( )()()()', '))(  )()()() )))(( ))))((( )))))(((( ))))))))((((((( ))))))((((( )))))))(((((( )))))))))(((((((  ((((((((((') == True\nassert sat('(((((((()(()))(( (( ()()()(((())() ()(())())() ()()))) ())(())))(()()) )()))))', ' (( ()(())())() ())(())))(()()) (((((((()(()))(( ()()))) )())))) ()()()(((())()') == True\nassert sat('()()(( ))', '()()(( ))') == True\nassert sat('', '') == True\nassert sat('()(()())( )()', '()(()())( )()') == True\nassert sat('(((((((((( ))))))))((((((( )))))))))((((((( )))))))(((((( ))))))((((( )))))(((( ))))((( )))(( ))( )()()()', '') == False\nassert sat('', '))(  )()()() )))(( ))))((( )))))(((( ))))))))((((((( ))))))((((( )))))))(((((( )))))))))(((((((  ((((((((((') == False", "entry_fn_name": "sat"}
{"id": "169", "text": "Find the largest k numbers\nk=2, [1, 2, 3, 4, 5, 5, 3, 5, 2] => [5, 5]", "solution": "def sat(biggest: List[int], k, nums):\n    if len(biggest) != k:\n        return False\n    smallest = nums[:]\n    for n in biggest:\n        smallest.remove(n)\n    return k == 0 or k == len(nums) or max(smallest) <= min(biggest)", "title": "TP3/BiggestK", "testing_code": "assert sat([31, 21, 20, 20, 18, 18, 17], 7, [31, 1, 2, -10, -2, 4, 17, 18, 20, 14, 20, 21, 18, 0]) == True\nassert sat([97, 93, 32], 3, [-5, 30, 31, 32, 30, 93, 97]) == True\nassert sat([75, 53], 2, [75, 30, 53, 25, 14]) == True\nassert sat([99], 1, [-6, 9, 36, 36, 99, 66, 41, 38, 11, 61]) == True\nassert sat([71, 65], 2, [4, 65, 52, 41, 21, 0, 45, 71]) == True\nassert sat('[99]', '1', '[75, 30, 53, 25, 14]') == False\nassert sat('[99]', '3', '[-5, 30, 31, 32, 30, 93, 97]') == False\nassert sat('[71, 65]', '1', '[75, 30, 53, 25, 14]') == False\nassert sat('[71, 65]', '7', '[75, 30, 53, 25, 14]') == False\nassert sat('[99]', '1', '[-5, 30, 31, 32, 30, 93, 97]') == False\nassert sat('[97, 93, 32]', '7', '[75, 30, 53, 25, 14]') == False\nassert sat('[99]', '7', '[-5, 30, 31, 32, 30, 93, 97]') == False\nassert sat('[97, 93, 32]', '2', '[75, 30, 53, 25, 14]') == False\nassert sat('[99]', '2', '[75, 30, 53, 25, 14]') == False\nassert sat('[71, 65]', '2', '[75, 30, 53, 25, 14]') == False", "entry_fn_name": "sat"}
{"id": "170", "text": "Find the sum of the odd elements that are at even indices\n[0, 1, 2, 3, 5, 6] => 5", "solution": "def sat(tot: int, nums):\n    for i in nums[::2]:\n        if i % 2 == 1:\n            tot -= i\n    return tot == 0", "title": "TP3/OddEvenSum", "testing_code": "assert sat(125023538, [18, 42152, 125023521, -1221873620123, 17, 19]) == True\nassert sat(0, [-52, 89, -74, -27]) == True\nassert sat(-149, [-95, -24, -50, -51, -18, -77, -61, 64, 7]) == True\nassert sat(-122, [-85, -83, 62, -27, -37, -76, -10, 40, 34, -20]) == True\nassert sat(-40, [-11, -9, -29, 30, -70]) == True\nassert sat(125023538, []) == False", "entry_fn_name": "sat"}
{"id": "171", "text": "Find the sum of the numbers among the first k with more than 2 digits\nk=3, nums=[2, 102, 12, 1000] => 102", "solution": "def sat(tot: int, k, nums):\n    for n in nums[:k]:\n        if len(str(abs(n))) > 2:\n            tot -= n\n    return tot == 0", "title": "TP3/LongEarlySum", "testing_code": "assert sat(125274875, 5, [1252, 125273523, 0, 42, 100, 214532, 2, 0, 11, 14]) == True\nassert sat(-6364749258, 5, [-7157016423, 2782843150, 7219126112, -6508908448, -2700793649]) == True\nassert sat(-7298444493, 9, [-5897482060, -6124803429, 460595384, -4038677051, 4034899461, 4374130613, -107107411]) == True\nassert sat(-10562080320, 9, [-8188839170, -4196027936, 7189346049, -3904396164, -6197615761, -1925353242, 4455917604, -60399777, 2265288077, -5809369361, -1403148167, 4937241577, 6147738064, 2911928645, -3466247912]) == True\nassert sat(16100064873, 7, [9205334525, 5459823374, -7169802732, 9865454706, -7321060937, 6045166493, 15149444, 1118638089, -4595115991, -3388779539]) == True\nassert sat(125274875, 5, []) == False", "entry_fn_name": "sat"}
{"id": "172", "text": "Find the odd numbers in the collatz sequence starting at n\n3 => [3, 5, 1]  # because the Collatz sequence starting with 3 is [3, 10, 5, 16, 8, 4, 2, 1]", "solution": "def sat(odds: List[int], n):\n    num_odds = 0\n    while True:\n        if n % 2 == 1:\n            num_odds += 1\n            if n not in odds:\n                return False\n        if n <= 1:\n            return num_odds == len(odds)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2", "title": "TP3/OddCollatz", "testing_code": "assert sat([1243272912731, 1864909369097, 1398682026823, 2098023040235, 3147034560353, 2360275920265, 1770206940199, 2655310410299, 3982965615449, 2987224211587, 4480836317381, 840156809509, 157529401783, 236294102675, 354441154013, 132915432755, 199373149133, 74764930925, 28036849097, 21027636823, 31541455235, 47312182853, 8871034285, 3326637857, 2494978393, 1871233795, 2806850693, 526284505, 394713379, 592070069, 55506569, 41629927, 62444891, 93667337, 70250503, 105375755, 158063633, 118547725, 44455397, 8335387, 12503081, 9377311, 14065967, 21098951, 31648427, 47472641, 35604481, 26703361, 20027521, 15020641, 11265481, 8449111, 12673667, 19010501, 3564469, 334169, 250627, 375941, 70489, 52867, 79301, 14869, 697, 523, 785, 589, 221, 83, 125, 47, 71, 107, 161, 121, 91, 137, 103, 155, 233, 175, 263, 395, 593, 445, 167, 251, 377, 283, 425, 319, 479, 719, 1079, 1619, 2429, 911, 1367, 2051, 3077, 577, 433, 325, 61, 23, 35, 53, 5, 1], 1243272912731) == True\nassert sat([3484714807, 5227072211, 7840608317, 2940228119, 4410342179, 6615513269, 620204369, 465153277, 174432479, 261648719, 392473079, 588709619, 883064429, 331149161, 248361871, 372542807, 558814211, 838221317, 157166497, 117874873, 88406155, 132609233, 99456925, 37296347, 55944521, 41958391, 62937587, 94406381, 35402393, 26551795, 39827693, 14935385, 11201539, 16802309, 3150433, 2362825, 1772119, 2658179, 3987269, 747613, 280355, 420533, 39425, 29569, 22177, 16633, 12475, 18713, 14035, 21053, 7895, 11843, 17765, 3331, 4997, 937, 703, 1055, 1583, 2375, 3563, 5345, 4009, 3007, 4511, 6767, 10151, 15227, 22841, 17131, 25697, 19273, 14455, 21683, 32525, 12197, 2287, 3431, 5147, 7721, 5791, 8687, 13031, 19547, 29321, 21991, 32987, 49481, 37111, 55667, 83501, 31313, 23485, 8807, 13211, 19817, 14863, 22295, 33443, 50165, 4703, 7055, 10583, 15875, 23813, 4465, 3349, 157, 59, 89, 67, 101, 19, 29, 11, 17, 13, 5, 1], 6969429614) == True\nassert sat([529, 397, 149, 7, 11, 17, 13, 5, 1], 529) == True\nassert sat([37, 7, 11, 17, 13, 5, 1], 37) == True\nassert sat([2972487, 4458731, 6688097, 5016073, 3762055, 5643083, 8464625, 6348469, 595169, 446377, 334783, 502175, 753263, 1129895, 1694843, 2542265, 1906699, 2860049, 2145037, 804389, 150823, 226235, 339353, 254515, 381773, 143165, 53687, 80531, 120797, 45299, 67949, 25481, 19111, 28667, 43001, 32251, 48377, 36283, 54425, 40819, 61229, 22961, 17221, 3229, 1211, 1817, 1363, 2045, 767, 1151, 1727, 2591, 3887, 5831, 8747, 13121, 9841, 7381, 173, 65, 49, 37, 7, 11, 17, 13, 5, 1], 95119584) == True\nassert sat([], 1243272912731) == False", "entry_fn_name": "sat"}
{"id": "173", "text": "Find a valid date mm-dd-yyyy such that the date, viewed as a mathematical expression, evaluates to target\n-2029 => \"10-18-2021\" # because 10-18-2021 == -2029", "solution": "def sat(s: str, target):\n    if not (all((c in '0123457689-' for c in s)) and s[2] == s[5] == '-'):\n        return False\n    (m, d, y) = [int(n) for n in s.split('-')]\n    if not m in range(1, 13):\n        return False\n    if not d in range(1, 32):\n        return False\n    if m in [4, 6, 9, 11]:\n        if not d <= 30:\n            return False\n    if m == 2:\n        if not d <= 29:\n            return False\n    return m - d - y == target", "title": "TP3/DateDiff", "testing_code": "assert sat('01-31-2045', -2075) == True\nassert sat('12-01-0000', 11) == True\nassert sat('12-01-0041', -30) == True\nassert sat('01-31-1969', -1999) == True\nassert sat('01-31-9999', -10029) == True\nassert sat('12-01-0000', 5) == False\nassert sat('01-31-1969', 5) == False\nassert sat('12-01-0041', 5) == False\nassert sat('01-31-1969', 5) == False\nassert sat('01-31-9999', 5) == False\nassert sat('01-31-9999', 5) == False\nassert sat('01-31-1969', 5) == False\nassert sat('01-31-9999', 5) == False\nassert sat('12-01-0000', 5) == False\nassert sat('12-01-0000', 5) == False", "entry_fn_name": "sat"}
{"id": "174", "text": "Split s into strings if there is a space in s, otherwise split on commas if there is a comma, otherwise\nreturn the list of lowercase letters with odd order (order of a = 0, b = 1, etc.)\n\"a b c\" => [\"a\", \"b\", \"c\"]\n\"a,b\" => [\"a\", \"b\"]", "solution": "def sat(lst: List[str], s):\n    if ' ' in s:\n        return ' '.join(lst) == s\n    if ',' in s:\n        return ','.join(lst) == s\n    return ''.join(lst) == ''.join((c for c in s if c.islower() and ord(c) % 2 == 0))", "title": "TP3/StrangeSplit", "testing_code": "assert sat(['Hello,', 'world!'], 'Hello, world!') == True\nassert sat(['Goodbye', 'spaces!'], 'Goodbye,spaces!') == True\nassert sat(['b', 'b', 'b', 'b', 'd', 'f', 'f', 'b', 'f', 'j', 'h', 'b', 'n', 'p', 't'], 'abcbcbbedfsgfakbfjghskbne[pewte') == True\nassert sat(['wotekitex', 'textarinequo', 'do', 'machoki', 'balecethotuwy', 'jarynutextopimud', 'dethexifythuthyc'], 'wotekitex,textarinequo,do,machoki,balecethotuwy,jarynutextopimud,dethexifythuthyc') == True\nassert sat(['jitys', 'py', 'sepocedynechuhegu', 'lekinihiluwefax'], 'jitys py sepocedynechuhegu lekinihiluwefax') == True\nassert sat(['Hello,', 'world!'], '') == False\nassert sat([], 'Hello, world!') == False", "entry_fn_name": "sat"}
{"id": "175", "text": "Find the indices of two entries that show that the list is not in increasing order.\nIf there are no violations (they are increasing), return an empty list.\n[1,2,3,0,4,5,6] => [1, 3]", "solution": "def sat(violation: List[int], nums):\n    if not violation:\n        return all((nums[i] < nums[i + 1] for i in range(len(nums) - 1)))\n    (i, j) = violation\n    return 0 <= i < j and nums[i] >= nums[j]", "title": "TP3/IncreasingViolation", "testing_code": "assert sat([10, 11], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 17, 17, 18, 19, 20, 22, 24]) == True\nassert sat([5, 6], [10, 16, 19, 23, 25, 27, 27, 39, 39, 44, 52, 60, 64, 1, 92, 96]) == True\nassert sat([0, 1], [10, 10, 10, 11, 17, 22, 31, 35, 42, 48, 61, 75, 90, 92]) == True\nassert sat([0, 1], [5, 5, 84]) == True\nassert sat([8, 9], [2, 5, 12, 40, 41, 47, 52, 53, 60, 46, 64, 66, 71]) == True\nassert sat([], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 17, 17, 18, 19, 20, 22, 24]) == False", "entry_fn_name": "sat"}
{"id": "176", "text": "Find an interval whose intersection with a given interval has a width that is a prime integer.\n[7, 100] => [0, 10]  # because 10-7=3 is prime", "solution": "def sat(interval2: List[int], interval1):\n    intersection_width = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    return intersection_width > 1 and all((intersection_width % i for i in range(2, intersection_width)))", "title": "TP3/PrimeIntervalIntersection", "testing_code": "assert sat([32157, 32159], [32157, 93210127]) == True\nassert sat([-3367, -3365], [-3367, 4628]) == True\nassert sat([0, 2], [0, 2381571]) == True\nassert sat([0, 2], [0, 1867]) == True\nassert sat([-9017, -9015], [-9017, 9358096]) == True", "entry_fn_name": "sat"}
{"id": "177", "text": "Find the sum of the magnitudes of the elements in the array with a sign that is equal to the product of\nthe signs of the entries.\n[1, -2, 3] => -6  # negative because there is one negative", "solution": "def sat(n: int, arr):\n    tot = 0\n    for i in arr:\n        if tot >= 0:\n            tot += abs(i)\n        else:\n            tot -= abs(i)\n        if i < 0:\n            tot = -tot\n        elif i == 0:\n            tot = 0\n            break\n    return n == tot", "title": "TP3/ProductSigns", "testing_code": "assert sat(-1045337, [1, 7, -20052, 14, -3, -11, 1025235, 14]) == True\nassert sat(582, [13, 38, 57, 6, -79, 85, -96, 60, 45, 37, 66]) == True\nassert sat(-439, [-58, -49, -56, 75, 52, -54, -95]) == True\nassert sat(-740, [-41, 67, -27, -41, 16, 1, 66, -91, 4, 36, 10, -95, 7, 54, -97, -87]) == True\nassert sat(-205, [-62, 46, -83, -14]) == True\nassert sat(-1045337, []) == False", "entry_fn_name": "sat"}
{"id": "178", "text": "Find the lexicographically smallest path of length k in graph with given edge matrix (and no dead ends)\nk=3, edges=[[1,3], [0, 3], [2], [3]] => [0, 1, 0] # because 0-1 and 1-0 are edges", "solution": "def sat(path: List[int], k, edges):\n\n    def check(prefix):\n        for (i, j) in zip(path, prefix):\n            if i != j:\n                return i < j\n        return len(prefix) >= k or all((check(prefix + [i]) for i in edges[prefix[-1]]))\n    return all((path[i] in edges[path[i - 1]] for i in range(1, k))) and all((check([i]) for i in range(len(edges))))", "title": "TP3/LexPath", "testing_code": "assert sat([0, 2, 1, 3, 4, 0, 2, 1, 3, 4], 10, [[2, 4], [3], [4, 1], [4], [0]]) == True\nassert sat([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], 12, [[2, 1], [0], [1, 3, 0], [1, 0, 3]]) == True\nassert sat([], 0, [[2, 0], [0, 3, 1, 2], [3, 0, 1, 2], [1, 2]]) == True\nassert sat([0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], 14, [[2], [2, 1, 0], [2, 1, 0]]) == True\nassert sat([0], 1, [[2, 0, 3, 1], [3, 1], [2, 0, 1], [0]]) == True\nassert sat([4], 0, [[2, 4], [3], [4, 1], [4], [0]]) == False\nassert sat([4], 1, [[2, 4], [3], [4, 1], [4], [0]]) == False\nassert sat([4], 0, [[2, 4], [3], [4, 1], [4], [0]]) == False\nassert sat([4], 0, [[2], [2, 1, 0], [2, 1, 0]]) == False\nassert sat([4], 1, [[2, 4], [3], [4, 1], [4], [0]]) == False\nassert sat([4], 1, [[2, 4], [3], [4, 1], [4], [0]]) == False\nassert sat([4], 1, [[2], [2, 1, 0], [2, 1, 0]]) == False\nassert sat([4], 0, [[2, 4], [3], [4, 1], [4], [0]]) == False\nassert sat([4], 0, [[2], [2, 1, 0], [2, 1, 0]]) == False\nassert sat([4], 1, [[2], [2, 1, 0], [2, 1, 0]]) == False", "entry_fn_name": "sat"}
{"id": "179", "text": "Find a sequence where seq[n] == 1 + n / 2 for even n, and\nseq[n] == seq[n - 1] + seq[n - 2] + seq[n + 1] for odd n < length.", "solution": "def sat(seq: List[int], length):\n    return all((seq[n] == (seq[n - 1] + seq[n - 2] + seq[n + 1] if n % 2 else 1 + n // 2) for n in range(length)))", "title": "TP3/Tribonacci", "testing_code": "assert sat([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11, 143, 12, 168, 13, 195, 14, 224, 15, 255, 16, 288, 17, 323, 18, 360, 19, 399, 20, 440, 21, 483, 22, 528, 23, 575, 24, 624, 25, 675, 26, 728, 27, 783, 28, 840, 29, 899, 30, 960, 31, 1023, 32, 1088, 33, 1155, 34, 1224, 35, 1295, 36, 1368, 37, 1443, 38, 1520, 39, 1599, 40, 1680, 41, 1763, 42, 1848, 43, 1935, 44, 2024, 45, 2115, 46, 2208, 47, 2303, 48, 2400, 49, 2499, 50, 2600, 51, 2703, 52, 2808, 53, 2915, 54, 3024, 55, 3135, 56, 3248, 57, 3363, 58, 3480, 59, 3599, 60, 3720, 61, 3843, 62, 3968, 63, 4095, 64, 4224, 65, 4355, 66, 4488, 67, 4623, 68, 4760, 69, 4899, 70, 5040, 71, 5183, 72, 5328, 73, 5475, 74, 5624, 75, 5775, 76, 5928, 77, 6083, 78, 6240, 79, 6399, 80, 6560, 81, 6723, 82, 6888, 83, 7055, 84, 7224, 85, 7395, 86, 7568, 87, 7743, 88, 7920, 89, 8099, 90, 8280, 91, 8463, 0], 181) == True\nassert sat([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11, 143, 12, 168, 13, 195, 14, 224, 15, 255, 16, 288, 17, 323, 18, 360, 19, 399, 20, 440, 21, 483, 22, 528, 23, 575, 24, 624, 25, 675, 26, 728, 27, 783, 28, 840, 29, 899, 30, 960, 31, 1023, 32, 1088, 33, 1155, 34, 1224, 35, 1295, 36, 1368, 37, 1443, 38, 1520, 39, 1599, 40, 1680, 41, 1763, 42, 1848, 43, 1935, 44, 2024, 45, 2115, 46, 2208, 47, 2303, 48, 2400, 49, 2499, 50, 2600, 51, 2703, 52, 2808, 53, 2915, 54, 3024, 55, 3135, 56, 3248, 57, 3363, 58, 3480, 59, 3599, 60, 3720, 61, 3843, 62, 3968, 63, 4095, 64, 4224, 65, 4355, 66, 4488, 67, 4623, 68, 4760, 69, 4899, 70, 5040, 71, 5183, 72, 5328, 73, 5475, 74, 5624, 75, 5775, 76, 5928, 77, 6083, 78, 6240, 79, 6399, 80, 6560, 81, 6723, 82, 6888, 83, 7055, 84, 7224, 85, 7395, 86, 7568, 87, 7743, 88, 7920, 89, 8099, 90, 8280, 91, 8463, 92, 8648, 93, 8835, 94, 9024, 95, 9215, 96, 9408, 97, 9603, 98, 9800, 99, 9999, 100, 10200, 101, 10403, 102, 10608, 103, 10815, 104, 11024, 105, 11235, 106, 11448, 107, 11663, 108, 11880, 109, 12099, 110, 12320, 111, 12543, 112, 12768, 113, 12995, 114, 13224, 115, 13455, 116, 13688, 117, 13923, 118, 14160, 119, 14399, 120, 14640, 121, 14883, 122, 15128, 123, 15375, 124, 15624, 125, 15875, 126, 16128, 127, 16383, 128, 16640, 129, 16899, 130, 17160, 131, 17423, 132, 17688, 133, 17955, 134, 18224, 135, 18495, 136, 18768, 137, 19043, 138, 19320, 139, 19599, 140, 19880, 141, 20163, 142, 20448, 143, 20735, 144, 21024, 145, 21315, 146, 21608, 147, 21903, 148, 22200, 149, 22499, 150, 22800, 151, 23103, 152, 23408, 153, 23715, 154, 24024, 155, 24335, 156, 24648, 157, 24963, 158, 25280, 159, 25599, 160, 25920, 161, 26243, 162, 26568, 163, 26895, 164, 27224, 165, 27555, 166, 27888, 167, 28223, 168, 28560, 169, 28899, 170, 29240, 171, 29583, 172, 29928, 173, 30275, 174, 30624, 175, 30975, 176, 31328, 177, 31683, 178, 32040, 179, 32399, 180, 32760, 181, 33123, 182, 33488, 183, 33855, 184, 34224, 185, 34595, 186, 34968, 187, 35343, 188, 35720, 189, 36099, 190, 36480, 191, 36863, 192, 37248, 193, 37635, 194, 38024, 195, 38415, 196, 38808, 197, 39203, 198, 39600, 199, 39999, 200, 40400, 201, 40803, 202, 41208, 203, 41615, 204, 42024, 205, 42435, 206, 42848, 207, 0], 412) == True\nassert sat([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11, 143, 12, 168, 13, 195, 14, 224, 15, 255, 16, 288, 17, 323, 18, 360, 19, 399, 20, 440, 21, 483, 22, 528, 23, 575, 24, 624, 25, 675, 26, 728, 27, 783, 28, 840, 29, 899, 30, 960, 31, 1023, 32, 1088, 33, 1155, 34, 1224, 35, 1295, 36, 1368, 37, 1443, 38, 1520, 39, 1599, 40, 1680, 41, 1763, 42, 1848, 43, 1935, 44, 2024, 45, 2115, 46, 2208, 47, 2303, 48, 2400, 49, 2499, 50, 2600, 51, 2703, 52, 2808, 53, 2915, 54, 3024, 55, 3135, 56, 3248, 57, 3363, 58, 3480, 59, 3599, 60, 3720, 61, 3843, 62, 3968, 63, 4095, 64, 4224, 65, 4355, 66, 4488, 67, 4623, 68, 4760, 69, 4899, 70, 5040, 71, 5183, 72, 5328, 73, 5475, 74, 5624, 75, 5775, 76, 5928, 77, 6083, 78, 6240, 79, 6399, 80, 6560, 81, 6723, 82, 6888, 83, 7055, 84, 7224, 85, 7395, 86, 7568, 87, 7743, 88, 7920, 89, 8099, 90, 8280, 91, 8463, 92, 8648, 93, 8835, 94, 9024, 95, 9215, 96, 9408, 97, 9603, 98, 9800, 99, 9999, 100, 10200, 101, 10403, 102, 10608, 103, 10815, 104, 11024, 105, 11235, 106, 11448, 107, 11663, 108, 11880, 109, 12099, 110, 12320, 111, 12543, 112, 12768, 113, 12995, 114, 13224, 115, 13455, 116, 13688, 117, 13923, 118, 14160, 119, 14399, 120, 14640, 121, 14883, 122, 15128, 123, 15375, 124, 15624, 125, 15875, 126, 16128, 127, 16383, 128, 16640, 129, 16899, 130, 17160, 131, 17423, 132, 17688, 133, 17955, 134, 18224, 135, 18495, 136, 18768, 137, 19043, 138, 19320, 139, 19599, 140, 19880, 141, 20163, 142, 20448, 143, 20735, 144, 21024, 145, 21315, 146, 21608, 147, 21903, 148, 22200, 149, 22499, 150, 22800, 151, 23103, 152, 23408, 153, 23715, 154, 24024, 155, 24335, 156, 24648, 157, 24963, 158, 25280, 159, 25599, 160, 25920, 161, 26243, 162, 26568, 163, 26895, 164, 27224, 165, 27555, 166, 27888, 167, 28223, 168, 28560, 169, 28899, 170, 29240, 171, 29583, 172, 29928, 173, 30275, 174, 30624, 175, 30975, 176, 31328, 177, 31683, 178, 32040, 179, 32399, 180, 32760, 181, 33123, 182, 33488, 183, 33855, 184, 34224, 185, 34595, 186, 34968, 187, 35343, 188, 35720, 189, 36099, 190, 36480, 191, 36863, 192, 37248, 193, 37635, 194, 38024, 195, 38415, 196, 38808, 197, 39203, 198, 39600, 199, 39999, 200, 40400, 201, 40803, 202, 41208, 203, 41615, 204, 42024, 205, 42435, 206, 42848, 207, 43263, 208, 43680, 209, 44099, 210, 44520, 211, 44943, 212, 45368, 213, 45795, 214, 46224, 215, 46655, 216, 47088, 217, 47523, 218, 47960, 219, 48399, 220, 48840, 221, 49283, 222, 49728, 223, 50175, 224, 50624, 225, 51075, 226, 51528, 227, 51983, 228, 52440, 229, 52899, 230, 53360, 231, 53823, 232, 54288, 233, 54755, 234, 55224, 235, 55695, 236, 56168, 237, 56643, 238, 57120, 239, 57599, 240, 58080, 241, 58563, 242, 0], 482) == True\nassert sat([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11, 143, 12, 168, 13, 195, 14, 224, 15, 255, 16, 288, 17, 323, 18, 360, 19, 399, 20, 440, 21, 483, 22, 528, 23, 575, 24, 624, 25, 675, 26, 0], 50) == True\nassert sat([1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11, 143, 12, 168, 13, 195, 14, 224, 15, 255, 16, 288, 17, 323, 18, 360, 19, 399, 20, 440, 21, 483, 22, 528, 23, 575, 24, 624, 25, 675, 26, 728, 27, 783, 28, 840, 29, 899, 30, 960, 31, 1023, 32, 1088, 33, 1155, 34, 1224, 35, 1295, 36, 1368, 37, 1443, 38, 1520, 39, 1599, 40, 1680, 41, 1763, 42, 1848, 43, 1935, 44, 2024, 45, 2115, 46, 2208, 47, 2303, 48, 2400, 49, 2499, 50, 2600, 51, 2703, 52, 2808, 53, 2915, 54, 3024, 55, 3135, 56, 3248, 57, 3363, 58, 3480, 59, 3599, 60, 3720, 61, 3843, 62, 3968, 63, 4095, 64, 4224, 65, 4355, 66, 4488, 67, 4623, 68, 4760, 69, 4899, 70, 5040, 71, 5183, 72, 5328, 73, 5475, 74, 5624, 75, 5775, 76, 5928, 77, 6083, 78, 6240, 79, 6399, 80, 6560, 81, 6723, 82, 6888, 83, 7055, 84, 7224, 85, 7395, 86, 7568, 87, 7743, 88, 7920, 89, 8099, 90, 8280, 91, 8463, 92, 8648, 93, 8835, 94, 9024, 95, 9215, 96, 9408, 97, 9603, 98, 9800, 99, 9999, 100, 10200, 101, 10403, 102, 10608, 103, 10815, 104, 11024, 105, 11235, 106, 11448, 107, 11663, 108, 11880, 109, 12099, 110, 12320, 111, 12543, 112, 12768, 113, 12995, 114, 13224, 115, 13455, 116, 13688, 117, 13923, 118, 14160, 119, 14399, 120, 14640, 121, 14883, 122, 15128, 123, 15375, 124, 15624, 125, 15875, 126, 16128, 127, 16383, 128, 16640, 129, 16899, 130, 17160, 131, 17423, 132, 17688, 133, 17955, 134, 18224, 135, 18495, 136, 18768, 137, 19043, 138, 19320, 139, 19599, 140, 19880, 141, 20163, 142, 20448, 143, 20735, 144, 21024, 145, 21315, 146, 21608, 147, 21903, 148, 22200, 149, 22499, 150, 22800, 151, 23103, 152, 23408, 153, 23715, 154, 24024, 155, 24335, 156, 24648, 157, 24963, 158, 25280, 159, 25599, 160, 25920, 161, 26243, 162, 26568, 163, 26895, 164, 27224, 165, 27555, 166, 27888, 167, 28223, 168, 28560, 169, 28899, 170, 29240, 171, 29583, 172, 29928, 173, 30275, 174, 30624, 175, 30975, 176, 31328, 177, 31683, 178, 32040, 179, 32399, 180, 32760, 181, 33123, 182, 33488, 183, 33855, 184, 34224, 185, 34595, 186, 34968, 187, 35343, 188, 35720, 189, 36099, 190, 36480, 191, 36863, 192, 37248, 193, 37635, 194, 38024, 195, 38415, 196, 38808, 197, 39203, 198, 39600, 199, 39999, 200, 40400, 201, 40803, 202, 41208, 203, 41615, 204, 42024, 205, 42435, 206, 42848, 207, 43263, 208, 43680, 209, 44099, 210, 44520, 211, 44943, 212, 45368, 213, 45795, 214, 46224, 215, 46655, 216, 47088, 217, 47523, 218, 47960, 219, 48399, 220, 48840, 221, 49283, 222, 49728, 223, 50175, 224, 50624, 225, 51075, 226, 51528, 227, 51983, 228, 52440, 229, 52899, 230, 53360, 231, 53823, 232, 54288, 233, 54755, 234, 55224, 235, 55695, 236, 56168, 237, 56643, 238, 57120, 239, 57599, 240, 58080, 241, 58563, 242, 59048, 243, 59535, 244, 60024, 245, 60515, 246, 61008, 247, 61503, 248, 62000, 249, 62499, 250, 63000, 251, 63503, 252, 64008, 253, 64515, 254, 65024, 255, 65535, 256, 66048, 257, 66563, 258, 67080, 259, 67599, 260, 68120, 261, 68643, 262, 69168, 263, 69695, 264, 70224, 265, 70755, 266, 71288, 267, 71823, 268, 72360, 269, 72899, 270, 73440, 271, 73983, 272, 74528, 273, 75075, 274, 75624, 275, 76175, 276, 76728, 277, 77283, 278, 77840, 279, 78399, 280, 78960, 281, 79523, 282, 80088, 283, 80655, 284, 81224, 285, 81795, 286, 82368, 287, 82943, 288, 83520, 289, 84099, 290, 84680, 291, 85263, 292, 85848, 293, 86435, 294, 87024, 295, 87615, 296, 88208, 297, 88803, 298, 89400, 299, 89999, 300, 90600, 301, 91203, 302, 91808, 303, 92415, 304, 93024, 305, 93635, 306, 94248, 307, 94863, 308, 95480, 309, 96099, 310, 96720, 311, 97343, 312, 97968, 313, 98595, 314, 99224, 315, 99855, 316, 100488, 317, 101123, 318, 101760, 319, 102399, 320, 103040, 321, 103683, 322, 104328, 323, 104975, 324, 105624, 325, 106275, 326, 106928, 327, 107583, 328, 108240, 329, 108899, 330, 109560, 331, 110223, 332, 110888, 333, 111555, 334, 112224, 335, 112895, 336, 113568, 337, 114243, 338, 114920, 339, 115599, 340, 116280, 341, 116963, 342, 117648, 343, 118335, 344, 119024, 345, 119715, 346, 120408, 347, 121103, 348, 121800, 349, 122499, 350, 123200, 351, 123903, 352, 124608, 353, 125315, 354, 126024, 355, 126735, 356, 127448, 357, 128163, 358, 128880, 359, 129599, 360, 130320, 361, 131043, 362, 131768, 363, 132495, 364, 133224, 365, 133955, 366, 134688, 367, 135423, 368, 136160, 369, 136899, 370, 137640, 371, 138383, 372, 139128, 373, 139875, 374, 140624, 375, 141375, 376, 142128, 377, 142883, 378, 143640, 379, 144399, 380, 145160, 381, 145923, 0], 761) == True\nassert sat([0], 482) == False\nassert sat([0], 482) == False\nassert sat([0], 181) == False\nassert sat([0], 761) == False\nassert sat([0], 181) == False\nassert sat([0], 761) == False\nassert sat([0], 761) == False\nassert sat([0], 482) == False\nassert sat([0], 482) == False\nassert sat([0], 412) == False", "entry_fn_name": "sat"}
{"id": "180", "text": "Return the product of the odd digits in n, or 0 if there aren't any\n12345 => 15", "solution": "def sat(prod: int, n):\n    for c in str(n):\n        i = int(c)\n        if i % 2 == 1:\n            if not prod % i == 0:\n                return False\n            prod //= i\n    return prod == any((int(c) % 2 for c in str(n)))", "title": "TP3/OddProduct", "testing_code": "assert sat(12658629375, 14235764939971075543215213) == True\nassert sat(5, 8502) == True\nassert sat(8505, 95973) == True\nassert sat(0, 0) == True\nassert sat(2250423, 331901673137376013) == True\nassert sat('0', '0') == False\nassert sat('5', '0') == False\nassert sat('12658629375', '0') == False\nassert sat('2250423', '0') == False\nassert sat('8505', '0') == False", "entry_fn_name": "sat"}
{"id": "181", "text": "Find a valid substring of s that contains matching brackets, at least one of which is nested\n\"]][][[]]]\" => \"[][[]]\"", "solution": "def sat(valid: str, s):\n    if not valid in s:\n        return False\n    depths = [0]\n    for c in valid:\n        if c == '[':\n            depths.append(depths[-1] + 1)\n        elif c == ']':\n            depths.append(depths[-1] - 1)\n    return depths[-1] == 0 and min(depths) == 0 and (max(depths) > 1)", "title": "TP3/ValidBracketSubsequence", "testing_code": "assert sat('[[][][][]]', ']]]]]]]]]]]]]]]]][][][][]]]]]]]]]]][[[][[][[[[[][][][]][[[[[[[[[[[[[[[[[[') == True\nassert sat('[[][][][][][][]]', '[[[[][][][][][][]][[]][]][[[][]][[]]') == True\nassert sat('[[]]', ']][[]][[][[[[][]]][[][[[][') == True\nassert sat('[[][][][][][][][]]', '][]]][]][[[][][][][][][][]][[]][[]]][[') == True\nassert sat('[[]]', '[[[][][[[[[[]][[]][[[][][][][][][][][]][') == True\nassert sat('[[][][][]]', '') == False\nassert sat('', ']]]]]]]]]]]]]]]]][][][][]]]]]]]]]]][[[][[][[[[[][][][]][[[[[[[[[[[[[[[[[[') == False", "entry_fn_name": "sat"}
{"id": "182", "text": "Round each float in x up to the next integer and return the running total of the integer squares\n[2.4, 3.7, 0.1] => [9, 25, 26]", "solution": "def sat(running_squares: List[int], x):\n    for (i, v) in enumerate(x):\n        ceiling = int(v) + (v > 0 and (not v.is_integer()))\n        square = ceiling ** 2\n        if running_squares[i] != square + (i > 0 and running_squares[i - 1]):\n            return False\n    return len(running_squares) == len(x)", "title": "TP3/CeilingSquares", "testing_code": "assert sat([40804, 132008, 132332, 1547839683216, 1547941733620, 101547941733620], [201.1, 301.4, -18.1, 1244122.0, 10101.0101, 10000000.0]) == True\nassert sat([100, 164, 173, 174, 175, 184, 220, 284, 288], [9.650000588598111, -8.077324515062926, 2.649836251190308, 0.7153951297675469, -1.9181388431489204, 2.7112675102232675, -6.813543009125667, 7.029917456417941, -2.821293215347511]) == True\nassert sat([4, 29, 30, 94, 175], [-2.6340066467560996, 4.322176523433114, -1.5079841130054472, -8.985060763252859, -9.074227436202381]) == True\nassert sat([81, 90, 190, 239, 275, 279, 288, 292], [8.257528417306844, -3.7315204726521944, 9.856438333047798, -7.228652980051451, -6.343263566703614, -2.5469735103334834, -3.2923884429492762, -2.991171802818804]) == True\nassert sat([49, 53, 69, 94, 143, 144, 193], [6.608264692857215, -2.204391758043112, 3.8328091843913974, 4.122558586426074, 6.79452673601816, -1.8532801154281735, 6.207567645800566]) == True\nassert sat([40804, 132008, 132332, 1547839683216, 1547941733620, 101547941733620], []) == False", "entry_fn_name": "sat"}
{"id": "183", "text": "Determine, for each string in x, whether the last character is an isolated letter\n[\"a b c\", \"abc\"] => [True, False]", "solution": "def sat(y: List[bool], x):\n    if not len(x) == len(y):\n        return False\n    for (s, b) in zip(x, y):\n        if len(s.split(' ')[-1]) == 1:\n            if not b == s[-1].isalpha():\n                return False\n        elif not not b:\n            return False\n    return True", "title": "TP3/LastLetters", "testing_code": "assert sat([False, False, False, False, True, True, True, True, True], ['Hello, world!', 'cat', '', 'a test', 'test a', 'i e', 'o', 'I O U', 'You and I']) == True\nassert sat([False, True, False, True], ['bymuthuzuxanehun tuwugycyhewavazow 1', ' x', 'womavyra', 'nitex quufojythobubetexto e']) == True\nassert sat([True, False, False, False, True, False, False, True, True, False, False, False, True, False, False, True, True, True, False, True, False, False, True, False, False, False, True], [' D', '', 'xamywathozuch 6', 'zulopatextathusyro *', ' y', 'wuvoguthixytexte textydytoquizazuquyt', 'texta duthu [', 'zebozegifelutaxyquix cabach d', ' C', 'rodumelidet quutaquukythusyb', ' %', 'b (', 'kabezanolipesethyba dyvechikathuwi n', 'fyzotextyhukokydihuc 8', '', 'memadapuc y', 'thavajythysojecywut g', 'wekirevajezexyfitex j', '', 'sekytextyko C', 'pe sobekujodefypo', 'dyjagiko chyfin', ' v', 'nisytextinexochych  ', '', 'ni', 'l zitufutachot R']) == True\nassert sat([False, False, False, False, True, False, False, False, True, True, False, False, True, False, True, False, False, False, True, False, True, False, False, False, False], ['ryxadec', 'pyfixotibujadyxe', 'mopubywewexi witethig 7', ' !', 'jethi sed c', 'lotextusavufubynyb', 'wuxesafetatextysima pebutextiwafufok', 'tuchonip', ' S', 'xyvovikofutex pylekazuquekedajota E', 'wik xofoxujegerigubo ?', 'gipimakude 1', ' O', ' ^', 'lakiquuvuhenugu vajyquy P', ' 6', 'fezore', 'vabithin textusichytilejocoke', ' B', 'lasuthasebuvy que &', 'mymanuzuzudyc thazufys y', '', ' ?', 'gecohywelawu', 'wath']) == True\nassert sat([False, False, True, False, False, True], ['ribesaquotextytazech #', '', ' Y', 'tychawicemafethupi 3', 'laz kakumynohyw', 'quotextifethixyvo pofukixa l']) == True\nassert sat([False, False, False, False, True, True, True, True, True], []) == False\nassert sat([], ['Hello, world!', 'cat', '', 'a test', 'test a', 'i e', 'o', 'I O U', 'You and I']) == False", "entry_fn_name": "sat"}
{"id": "184", "text": "Find the indices for which the nums array drops.\n[1,2,3,0,2,4,1] => [3,6]", "solution": "def sat(drop_indexes: List[int], nums):\n    d = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            if not drop_indexes[d] == i:\n                return False\n            d += 1\n    return d == len(drop_indexes)", "title": "TP3/Drops", "testing_code": "assert sat([1, 3, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19], [2, -1, 14, 8, 9, 9, 8, 4, 2, 4, 3, -100, 1000, 18, 4, -2, -3, -3, 1, 0]) == True\nassert sat([1, 3, 6, 7, 8, 10, 11, 13, 14, 15, 16, 19], []) == False", "entry_fn_name": "sat"}
{"id": "185", "text": "Find the largest negative ans smallest positive numbers (or 0 if none)\n[-2, -4, 14, 50] => [-2, 14]\n[3, 22] => [0, 3]", "solution": "def sat(extremes: List[int], nums):\n    (neg, pos) = extremes\n    if neg == 0:\n        if not (nums == [] or min(nums) >= 0):\n            return False\n    elif not (neg < 0 and neg in nums and all((n >= 0 or n <= neg for n in nums))):\n        return False\n    if pos == 0:\n        if not (nums == [] or max(nums) <= 0):\n            return False\n    elif not (pos > 0 and pos in nums and all((n <= 0 or n >= pos for n in nums))):\n        return False\n    return True", "title": "TP3/LargestNegSmallestPos", "testing_code": "assert sat([-4, 2], [-10, -4, 100, -40, 2, 2, 3, 17, -50, -25, 18, 41, 9, 11, 15]) == True\nassert sat([-114, 0], [-566, -114, -971]) == True\nassert sat([-90, 212], [-90, -123, 227, 905, 613, 735, 988, -215, -190, 272, -920, 581, 212, 317]) == True\nassert sat([0, 0], []) == True\nassert sat([-257, 52], [-719, 922, 52, -861, 495, 327, -955, -301, -542, -257, -712]) == True\nassert sat([-4, 2], []) == False", "entry_fn_name": "sat"}
{"id": "186", "text": "Find the largest number where commas or periods are decimal points\n[\"99,9\", \"100\"] => 100.0", "solution": "def sat(x: float, str_nums):\n    found = False\n    for s in str_nums:\n        y = float(s.replace(',', '.'))\n        if not y <= x:\n            return False\n        if y == x:\n            found = True\n    return found", "title": "TP3/LargestStringNum", "testing_code": "assert sat(99.09, ['1,3', '-11', '17.5', '-11', '2', '2.2', '2,2', '4', '-18,18', '99.09']) == True\nassert sat(73.72440474051831, ['31.39683666368859', '73,72440474051831', '72.34060469647804', '73']) == True\nassert sat(98.0, ['-6', '68', '-100', '42,449764091997196', '-29,24317717823544', '-41.15991554949425', '93.91903086808122', '-40', '95,64713000645497', '10.987133348617888', '-12', '-30', '-67.5420580170809', '58', '66,77819624303987', '-37.8232752327492', '8', '-99', '98']) == True\nassert sat(86.60853263788738, ['-13', '-9,405268331489253', '86,60853263788738', '1.6303719756540573', '25,638544353710756']) == True\nassert sat(57.12265333169756, ['-100', '43', '12,380225941003388', '-10', '55', '40,34567619114577', '45', '-26,348841728512014', '-79.01130149535118', '48', '57', '-87', '24,13286574459906', '8', '57.12265333169756', '19,864244993734175', '24', '-82', '22']) == True\nassert sat(99.09, []) == False", "entry_fn_name": "sat"}
{"id": "187", "text": "Find four positive even integers whose sum is n\n100 => [22, 24, 26, 28]", "solution": "def sat(summands: List[int], n):\n    return sum(summands) == n and min(summands) > 0 and (len(summands) == 4) and all((s % 2 == 0 for s in summands))", "title": "TP3/Even4Sum", "testing_code": "assert sat([2, 2, 2, 1234567884], 1234567890) == True\nassert sat([2, 2, 2, 2], 8) == True\nassert sat([2, 2, 2, 4], 10) == True\nassert sat([2, 2, 2, 6], 12) == True\nassert sat([2, 2, 2, 465665802], 465665808) == True\nassert sat([], 1234567890) == False", "entry_fn_name": "sat"}
{"id": "188", "text": "The super-factorial of n is n! (n-1)! (n-2)! ... 1!. Invert a given list of super-factorials.\n[1, 2, 2, 12] => [1, 2, 2, 3]", "solution": "def sat(nums: List[int], super_factorials):\n    for (i, sf) in enumerate(super_factorials):\n        n = nums[i]\n        for j in range(n, 0, -1):\n            k = j ** (n - j + 1)\n            if not sf % k == 0:\n                return False\n            sf //= k\n        if not sf == 1:\n            return False\n    return True", "title": "TP3/InverseSuperFactorial", "testing_code": "assert sat([1, 2, 1], [1, 2, 1]) == True\nassert sat([6, 4, 6, 9, 7, 8, 2, 7, 5, 9, 5], [24883200, 288, 24883200, 1834933472251084800000, 125411328000, 5056584744960000, 2, 125411328000, 34560, 1834933472251084800000, 34560]) == True\nassert sat([2, 2, 3, 2, 2, 1, 9, 1, 6, 6, 9], [2, 2, 12, 2, 2, 1, 1834933472251084800000, 1, 24883200, 24883200, 1834933472251084800000]) == True\nassert sat([1, 1, 3, 2, 3, 3, 2, 2, 3, 2, 6], [1, 1, 12, 2, 12, 12, 2, 2, 12, 2, 24883200]) == True\nassert sat([1, 7, 5, 4, 6, 1, 3, 2, 8, 9, 7], [1, 125411328000, 34560, 288, 24883200, 1, 12, 2, 5056584744960000, 1834933472251084800000, 125411328000]) == True\nassert sat([1, 1, 3, 2, 3, 3, 2, 2, 3, 2, 6], [0]) == False\nassert sat([1, 2, 1], [0]) == False\nassert sat([1, 2, 1], [0]) == False\nassert sat([6, 4, 6, 9, 7, 8, 2, 7, 5, 9, 5], [0]) == False\nassert sat([6, 4, 6, 9, 7, 8, 2, 7, 5, 9, 5], [0]) == False\nassert sat([6, 4, 6, 9, 7, 8, 2, 7, 5, 9, 5], [0]) == False\nassert sat([1, 7, 5, 4, 6, 1, 3, 2, 8, 9, 7], [0]) == False\nassert sat([1, 2, 1], [0]) == False\nassert sat([1, 1, 3, 2, 3, 3, 2, 2, 3, 2, 6], [0]) == False\nassert sat([2, 2, 3, 2, 2, 1, 9, 1, 6, 6, 9], [0]) == False", "entry_fn_name": "sat"}
{"id": "189", "text": "Find a string such that, when three or more spaces are compacted to a '-' and one or two spaces are\nreplaced by underscores, leads to the target.\n\"_o-k__?-\" => \"  o        k  ?     \"", "solution": "def sat(orig: str, target):\n    if not ('_' not in orig and '-' not in orig):\n        return False\n    new = ''\n    space_count = 0\n    for c in orig:\n        if c == ' ':\n            space_count += 1\n        else:\n            new += '-' if space_count > 2 else '_' * space_count\n            new += c\n            space_count = 0\n    new += '-' if space_count > 2 else '_' * space_count\n    return new == target", "title": "TP3/ExpandSpaces", "testing_code": "assert sat('   Hello, world!  This is   so   easy!   ', '-Hello,_world!__This_is-so-easy!-') == True\nassert sat('H   d', 'H-d') == True\nassert sat('', '') == True\nassert sat('H@zoxyquygupaxofirefavuvubadigwQ', 'H@zoxyquygupaxofirefavuvubadigwQ') == True\nassert sat('   O!6quag', '-O!6quag') == True\nassert sat('   Hello, world!  This is   so   easy!   ', '') == False\nassert sat('', '-Hello,_world!__This_is-so-easy!-') == False", "entry_fn_name": "sat"}
{"id": "190", "text": "Return a list of Yes/No strings that determine whether candidate filename is valid. A valid filename\nshould end in .txt, .exe, or .dll, and should have at most three digits, no additional periods\n[\"train.jpg\", \"doc10234.txt\", \"3eadme.txt\"] = [\"No\", \"No\", \"Yes\"]", "solution": "def sat(valids: List[str], filenames):\n    if not len(valids) == len(filenames):\n        return False\n    for (v, f) in zip(valids, filenames):\n        n_digits = sum((c.isdigit() for c in f))\n        if v == 'Yes':\n            (prefix, ext) = f.split('.')\n            if not (ext in ['txt', 'dll', 'exe'] and prefix[0].isalpha() and (n_digits < 4)):\n                return False\n        else:\n            if not v == 'No':\n                return False\n            if not (f.split('.')[1:] not in [['txt'], ['dll'], ['exe']] or not f[0].isalpha() or n_digits > 3):\n                return False\n    return True", "title": "TP3/FilenameOK", "testing_code": "assert sat(['Yes', 'No', 'No', 'Yes', 'No', 'No'], ['cat.txt', '!jog.dll', '31F9.html', 'Is this okay?.txt', '.exe', '']) == True\nassert sat(['Yes', 'No', 'Yes', 'No', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'No', 'No'], ['mtherylP.exe', 'Qbatw.mp4', 'DtextadusypykagusakoA.exe', 'Bmigusocycyth].mp4', ')kutextulelucezyQ.tar.zip', 'nchelycozitixiM.exe', 'wrichevyxi.exe', 'Nvew0.txt', 'dnochofazehaxaharop!.dll', '8mefasechuxacyxg.txt', 'isijufotextydycifu3.mp4', 'vmithujydet[.mp4']) == True\nassert sat(['No', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'Yes', 'No', 'Yes', 'No', 'No'], ['WbytyjachuquithX.tar.zip', 'Pzuzuvetextr.mp4', 'Xcymem[.tar.zip', 'AhypagacheJ.dll', 'JbubefichiwyryzydochC.exe', '8te;.dll', 'wtextoL.mp4', 'mthowexezixexuqd.exe', '^nehapu4.txt', 'Hsovap].txt', 'Cchoxe>.tar.zip', '1quobejugichewabechek#.dll']) == True\nassert sat(['No', 'No', 'No'], ['+thunidothytextofi..txt', 'Onithytemolysefel$.mp4', 'Clychifopozesuxijuvo.mp4']) == True\nassert sat(['Yes', 'Yes', 'No', 'No', 'No', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'No', 'No'], ['XsiwemunarytextatecY.exe', 'Dfanachofegerevojyv].dll', ')pethymula0.exe', '4dihurudyjahatextov.exe', '0hyxZ.tar.zip', 'WbywithachoxenomeW.mp4', 'rniworatuzepatapuy.txt', '6quypucocj.exe', 'Zmavifolulitek.txt', 'ywue.exe', 'QhI.txt', ')vugu^.mp4', 'ygihycogaduhalyfyzen.tar.zip', 'icubonaguchegupejuha(.exe', ']gothusodawinuwidinexD.mp4', ' wyw(.exe']) == True\nassert sat([], ['cat.txt', '!jog.dll', '31F9.html', 'Is this okay?.txt', '.exe', '']) == False\nassert sat(['Yes', 'No', 'No', 'Yes', 'No', 'No'], []) == False", "entry_fn_name": "sat"}
{"id": "191", "text": "Find a list of integers such that tot is the sum of (n^2 if 3 | n, else n^3 if 4 | n, else n)", "solution": "def sat(lst: List[int], tot):\n    return sum((n ** 2 if n % 3 == 0 else n ** 3 if n % 4 == 0 else n for n in lst)) == tot", "title": "TP3/FindStrangeSum", "testing_code": "assert sat([1, 1, 1, 1, 1125181293217], 1125181293221) == True\nassert sat([1, 1, 1, 1, 1, 1, 1, 697], 704) == True\nassert sat([1, 1, 1, 1, 8845], 8849) == True\nassert sat([1, 1, 1, 1, 1, 1, 1, -516791], -516784) == True\nassert sat([1, 1, 1, 1, 976643989], 976643993) == True\nassert sat([], 1125181293221) == False", "entry_fn_name": "sat"}
{"id": "192", "text": "Find the string consisting of all the words whose lengths are prime numbers\n\"A bird in the hand is worth two in the bush\" => \"in the is worth two in the\"", "solution": "def sat(primes: str, s):\n\n    def is_prime(n):\n        return n > 1 and all((n % j for j in range(2, int(n ** 0.5) + 1)))\n    prime_words = primes.split()\n    i = 0\n    for word in s.split():\n        if is_prime(len(word)):\n            if not prime_words[i] == word:\n                return False\n            i += 1\n    return i == len(prime_words)", "title": "TP3/PrimeWords", "testing_code": "assert sat('is of whether you would to do strange puzzles', 'This is a test of whether you would want to do such strange puzzles') == True\nassert sat('thacycotextilequa jufutozozat', 't quiquitutohetextyvod thacycotextilequa thavow rygo q xythejixojubuz jufutozozat cabuthymuchyji') == True\nassert sat('caquovovich jajabyv kibatextuchisimoz', 'caquovovich keguqu tatextuhok jajabyv kibatextuchisimoz xibe sotext s helalewipixemujiwixa') == True\nassert sat('', '') == True\nassert sat('sidathochocek qualodu thugolo pesethimine', 'sidathochocek qualodu thugolo wywyfykyxyhewyjapeke matofamep n wemahu pesethimine') == True\nassert sat('is of whether you would to do strange puzzles', '') == False", "entry_fn_name": "sat"}
{"id": "193", "text": "Write x * y as the shortest equivalent fraction using at most max_len chars\nx=\"-2/3\", y=\"-3/8\", max_len=3 => \"1/4\"", "solution": "def sat(z: str, x, y, max_len):\n    [[a, b], [c, d], [u, v]] = [[int(n) for n in s.split('/')] for s in [x, y, z]]\n    return a * c * v == b * d * u and len(z) <= max_len", "title": "TP3/SimplifyProductFraction", "testing_code": "assert sat('29855584/571210019', '-8142432/763083', '66/-13474', 18) == True\nassert sat('0/1', '0/47460', '357/8389715', 3) == True\nassert sat('7865/92452137', '-20/-54383610', '7865/34', 13) == True\nassert sat('0/1', '0/2', '79/45361', 3) == True\nassert sat('0/1', '1316/-4820197', '0/28968', 3) == True\nassert sat('0/1', '1316/-4820197', '7865/34', 5) == False\nassert sat('0/1', '1316/-4820197', '7865/34', 5) == False\nassert sat('7865/92452137', '0/2', '0/28968', 5) == False\nassert sat('7865/92452137', '0/2', '0/28968', 5) == False\nassert sat('7865/92452137', '0/2', '0/28968', 5) == False\nassert sat('7865/92452137', '0/2', '0/28968', 5) == False\nassert sat('7865/92452137', '0/2', '0/28968', 5) == False\nassert sat('0/1', '1316/-4820197', '7865/34', 5) == False\nassert sat('0/1', '1316/-4820197', '7865/34', 5) == False\nassert sat('0/1', '1316/-4820197', '7865/34', 5) == False", "entry_fn_name": "sat"}
{"id": "194", "text": "Sort the numbers by the sum of their digits\n[17, 21, 0] => [0, 17, 21]", "solution": "def sat(ordered: List[int], nums):\n    digit_sums = [sum((int(c) for c in str(n) if c != '-')) for n in ordered]\n    return sorted(ordered) == sorted(nums) and digit_sums == sorted(digit_sums)", "title": "TP3/SortByDigitSum", "testing_code": "assert sat([0, 1, -1, -100, 10, 10000, 11, 2000001, 14, -155, 235251], [1, 0, -1, -100, 10, 14, 235251, 11, 10000, 2000001, -155]) == True\nassert sat([-222, 914, 817, -896], [-222, -896, 914, 817]) == True\nassert sat([208], [208]) == True\nassert sat([], []) == True\nassert sat([232, -710], [232, -710]) == True\nassert sat([], [1, 0, -1, -100, 10, 14, 235251, 11, 10000, 2000001, -155]) == False\nassert sat([0, 1, -1, -100, 10, 10000, 11, 2000001, 14, -155, 235251], []) == False", "entry_fn_name": "sat"}
{"id": "195", "text": "Find the numbers that are greater than 10 and have odd first and last digits\n[73, 4, 72] => [73]", "solution": "def sat(odds: List[int], nums):\n    if not all((o > 10 and odds.count(o) == nums.count(o) and int(str(o)[i]) % 2 for o in odds for i in [-1, 0])):\n        return False\n    return all((n in odds or n <= 10 or int(str(n)[0]) % 2 == 0 or (int(str(n)[-1]) % 2 == 0) for n in nums))", "title": "TP3/BigOdds", "testing_code": "assert sat([109, 17, 11, 99, 909, 17], [204, 109, 203, 17, 45, 11, 21, 99, 909, 16, -33, 3, 17]) == True\nassert sat([13559], [13559]) == True\nassert sat([771, 17261], [12320, 771, 11224, 17261]) == True\nassert sat([13251, 5595, 16271], [13251, 8503, 5595, 19712, 10196, 16271]) == True\nassert sat([], []) == True\nassert sat([109, 17, 11, 99, 909, 17], []) == False\nassert sat([], [204, 109, 203, 17, 45, 11, 21, 99, 909, 16, -33, 3, 17]) == False", "entry_fn_name": "sat"}
{"id": "196", "text": "Find all triples of increasing indices where the sum of the numbers is divisible by three\na=[1, 2, 4, 8, 14, 10], count=2 => [[0, 2, 5], [1, 3, 4]] = > because 1 + 4 + 10, 2 + 8 + 14 are divisible by 3", "solution": "def sat(trips: List[List[int]], a, count):\n    if not len({tuple(t) for t in trips}) >= count:\n        return False\n    return all((0 <= i < j < k and (a[i] + a[j] + a[k]) % 3 == 0 for (i, j, k) in trips))", "title": "TP3/Threeples", "testing_code": "assert sat([[1, 3, 4], [1, 3, 5], [1, 4, 5], [3, 4, 5], [1, 3, 6], [1, 4, 6], [3, 4, 6], [1, 5, 6], [3, 5, 6], [4, 5, 6], [0, 1, 7], [1, 2, 7], [0, 3, 7], [2, 3, 7], [0, 4, 7], [2, 4, 7], [0, 5, 7], [2, 5, 7], [0, 6, 7], [2, 6, 7], [0, 2, 8], [1, 7, 8], [3, 7, 8], [4, 7, 8], [5, 7, 8], [6, 7, 8], [0, 1, 9], [1, 2, 9], [0, 3, 9], [2, 3, 9], [0, 4, 9], [2, 4, 9], [0, 5, 9], [2, 5, 9], [0, 6, 9], [2, 6, 9], [1, 8, 9], [3, 8, 9], [4, 8, 9], [5, 8, 9], [6, 8, 9], [0, 1, 10], [1, 2, 10], [0, 3, 10], [2, 3, 10], [0, 4, 10], [2, 4, 10], [0, 5, 10], [2, 5, 10], [0, 6, 10], [2, 6, 10], [1, 8, 10], [3, 8, 10], [4, 8, 10], [5, 8, 10], [6, 8, 10], [7, 9, 10], [1, 3, 11], [1, 4, 11], [3, 4, 11], [1, 5, 11], [3, 5, 11], [4, 5, 11], [1, 6, 11], [3, 6, 11], [4, 6, 11], [5, 6, 11], [0, 7, 11], [2, 7, 11], [7, 8, 11], [0, 9, 11], [2, 9, 11], [8, 9, 11], [0, 10, 11], [2, 10, 11], [8, 10, 11], [1, 3, 12], [1, 4, 12], [3, 4, 12], [1, 5, 12], [3, 5, 12], [4, 5, 12], [1, 6, 12], [3, 6, 12], [4, 6, 12], [5, 6, 12], [0, 7, 12], [2, 7, 12], [7, 8, 12], [0, 9, 12], [2, 9, 12], [8, 9, 12], [0, 10, 12], [2, 10, 12], [8, 10, 12], [1, 11, 12], [3, 11, 12], [4, 11, 12], [5, 11, 12], [6, 11, 12], [0, 1, 13], [1, 2, 13], [0, 3, 13], [2, 3, 13], [0, 4, 13], [2, 4, 13], [0, 5, 13], [2, 5, 13], [0, 6, 13], [2, 6, 13], [1, 8, 13], [3, 8, 13], [4, 8, 13], [5, 8, 13], [6, 8, 13], [7, 9, 13], [7, 10, 13], [9, 10, 13], [0, 11, 13], [2, 11, 13], [8, 11, 13], [0, 12, 13], [2, 12, 13], [8, 12, 13], [1, 3, 14], [1, 4, 14], [3, 4, 14], [1, 5, 14], [3, 5, 14], [4, 5, 14], [1, 6, 14], [3, 6, 14], [4, 6, 14], [5, 6, 14], [0, 7, 14], [2, 7, 14], [7, 8, 14], [0, 9, 14], [2, 9, 14], [8, 9, 14], [0, 10, 14], [2, 10, 14], [8, 10, 14], [1, 11, 14], [3, 11, 14], [4, 11, 14], [5, 11, 14], [6, 11, 14], [1, 12, 14], [3, 12, 14], [4, 12, 14], [5, 12, 14], [6, 12, 14], [11, 12, 14], [0, 13, 14], [2, 13, 14], [8, 13, 14], [0, 1, 15], [1, 2, 15], [0, 3, 15], [2, 3, 15], [0, 4, 15], [2, 4, 15], [0, 5, 15], [2, 5, 15], [0, 6, 15], [2, 6, 15], [1, 8, 15], [3, 8, 15], [4, 8, 15], [5, 8, 15], [6, 8, 15], [7, 9, 15], [7, 10, 15], [9, 10, 15], [0, 11, 15], [2, 11, 15], [8, 11, 15], [0, 12, 15], [2, 12, 15], [8, 12, 15], [7, 13, 15], [9, 13, 15], [10, 13, 15], [0, 14, 15], [2, 14, 15], [8, 14, 15], [0, 1, 16], [1, 2, 16], [0, 3, 16], [2, 3, 16], [0, 4, 16], [2, 4, 16], [0, 5, 16], [2, 5, 16], [0, 6, 16], [2, 6, 16], [1, 8, 16], [3, 8, 16], [4, 8, 16], [5, 8, 16], [6, 8, 16], [7, 9, 16], [7, 10, 16], [9, 10, 16], [0, 11, 16], [2, 11, 16], [8, 11, 16], [0, 12, 16], [2, 12, 16], [8, 12, 16], [7, 13, 16], [9, 13, 16], [10, 13, 16], [0, 14, 16], [2, 14, 16], [8, 14, 16], [7, 15, 16], [9, 15, 16], [10, 15, 16], [13, 15, 16]], [1, 0, -17, 42, 321, 36, 429, 35, 10, 923, 35, 18, 0, 17, 24, 32, 8], 221) == True\nassert sat([[2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5], [0, 1, 6], [2, 3, 7], [2, 4, 7], [3, 4, 7], [2, 5, 7], [3, 5, 7], [4, 5, 7], [2, 3, 8], [2, 4, 8], [3, 4, 8], [2, 5, 8], [3, 5, 8], [4, 5, 8], [2, 7, 8], [3, 7, 8], [4, 7, 8], [5, 7, 8], [2, 3, 9], [2, 4, 9], [3, 4, 9], [2, 5, 9], [3, 5, 9], [4, 5, 9], [2, 7, 9], [3, 7, 9], [4, 7, 9], [5, 7, 9], [2, 8, 9], [3, 8, 9], [4, 8, 9], [5, 8, 9], [7, 8, 9], [0, 1, 10], [0, 6, 10], [1, 6, 10], [2, 3, 11], [2, 4, 11], [3, 4, 11], [2, 5, 11], [3, 5, 11], [4, 5, 11], [2, 7, 11], [3, 7, 11], [4, 7, 11], [5, 7, 11], [2, 8, 11], [3, 8, 11], [4, 8, 11], [5, 8, 11], [7, 8, 11], [2, 9, 11], [3, 9, 11], [4, 9, 11], [5, 9, 11], [7, 9, 11], [8, 9, 11], [2, 3, 12], [2, 4, 12], [3, 4, 12], [2, 5, 12], [3, 5, 12], [4, 5, 12], [2, 7, 12], [3, 7, 12], [4, 7, 12], [5, 7, 12], [2, 8, 12], [3, 8, 12], [4, 8, 12], [5, 8, 12], [7, 8, 12], [2, 9, 12], [3, 9, 12], [4, 9, 12], [5, 9, 12], [7, 9, 12], [8, 9, 12], [2, 11, 12], [3, 11, 12], [4, 11, 12], [5, 11, 12], [7, 11, 12], [8, 11, 12], [9, 11, 12], [0, 1, 13], [0, 6, 13], [1, 6, 13], [0, 10, 13], [1, 10, 13], [6, 10, 13], [0, 1, 14], [0, 6, 14], [1, 6, 14], [0, 10, 14], [1, 10, 14], [6, 10, 14], [0, 13, 14], [1, 13, 14], [6, 13, 14], [10, 13, 14], [0, 1, 15], [0, 6, 15], [1, 6, 15], [0, 10, 15], [1, 10, 15], [6, 10, 15], [0, 13, 15], [1, 13, 15], [6, 13, 15], [10, 13, 15], [0, 14, 15], [1, 14, 15], [6, 14, 15], [10, 14, 15], [13, 14, 15], [2, 3, 16], [2, 4, 16], [3, 4, 16], [2, 5, 16], [3, 5, 16], [4, 5, 16], [2, 7, 16], [3, 7, 16], [4, 7, 16], [5, 7, 16], [2, 8, 16], [3, 8, 16], [4, 8, 16], [5, 8, 16], [7, 8, 16], [2, 9, 16], [3, 9, 16], [4, 9, 16], [5, 9, 16], [7, 9, 16], [8, 9, 16], [2, 11, 16], [3, 11, 16], [4, 11, 16], [5, 11, 16], [7, 11, 16], [8, 11, 16], [9, 11, 16], [2, 12, 16], [3, 12, 16], [4, 12, 16], [5, 12, 16], [7, 12, 16], [8, 12, 16], [9, 12, 16], [11, 12, 16], [0, 1, 17], [0, 6, 17], [1, 6, 17], [0, 10, 17], [1, 10, 17], [6, 10, 17], [0, 13, 17], [1, 13, 17], [6, 13, 17], [10, 13, 17], [0, 14, 17], [1, 14, 17], [6, 14, 17], [10, 14, 17], [13, 14, 17], [0, 15, 17], [1, 15, 17], [6, 15, 17], [10, 15, 17], [13, 15, 17], [14, 15, 17], [2, 3, 18], [2, 4, 18], [3, 4, 18], [2, 5, 18], [3, 5, 18], [4, 5, 18], [2, 7, 18], [3, 7, 18], [4, 7, 18], [5, 7, 18], [2, 8, 18], [3, 8, 18], [4, 8, 18], [5, 8, 18], [7, 8, 18], [2, 9, 18], [3, 9, 18], [4, 9, 18], [5, 9, 18], [7, 9, 18], [8, 9, 18], [2, 11, 18], [3, 11, 18], [4, 11, 18], [5, 11, 18], [7, 11, 18], [8, 11, 18], [9, 11, 18], [2, 12, 18], [3, 12, 18], [4, 12, 18], [5, 12, 18], [7, 12, 18], [8, 12, 18], [9, 12, 18], [11, 12, 18], [2, 16, 18], [3, 16, 18], [4, 16, 18], [5, 16, 18], [7, 16, 18], [8, 16, 18], [9, 16, 18], [11, 16, 18], [12, 16, 18]], [8, 5, 9, 3, 3, 9, 2, 6, 6, 0, 8, 0, 3, 2, 5, 2, 3, -1, 6], 221) == True\nassert sat([[0, 2, 3], [0, 1, 4], [1, 2, 4], [1, 3, 4], [0, 2, 5], [0, 3, 5], [2, 3, 5], [1, 4, 5], [0, 1, 6], [1, 2, 6], [1, 3, 6], [1, 5, 6], [0, 2, 7], [0, 3, 7], [2, 3, 7], [1, 4, 7], [0, 5, 7], [2, 5, 7], [3, 5, 7], [1, 6, 7], [0, 2, 8], [0, 3, 8], [2, 3, 8], [1, 4, 8], [0, 5, 8], [2, 5, 8], [3, 5, 8], [1, 6, 8], [0, 7, 8], [2, 7, 8], [3, 7, 8], [5, 7, 8], [0, 1, 9], [1, 2, 9], [1, 3, 9], [1, 5, 9], [4, 6, 9], [1, 7, 9], [1, 8, 9], [0, 2, 10], [0, 3, 10], [2, 3, 10], [1, 4, 10], [0, 5, 10], [2, 5, 10], [3, 5, 10], [1, 6, 10], [0, 7, 10], [2, 7, 10], [3, 7, 10], [5, 7, 10], [0, 8, 10], [2, 8, 10], [3, 8, 10], [5, 8, 10], [7, 8, 10], [1, 9, 10], [0, 4, 11], [2, 4, 11], [3, 4, 11], [4, 5, 11], [0, 6, 11], [2, 6, 11], [3, 6, 11], [5, 6, 11], [4, 7, 11], [6, 7, 11], [4, 8, 11], [6, 8, 11], [0, 9, 11], [2, 9, 11], [3, 9, 11], [5, 9, 11], [7, 9, 11], [8, 9, 11], [4, 10, 11], [6, 10, 11], [9, 10, 11], [0, 1, 12], [1, 2, 12], [1, 3, 12], [1, 5, 12], [4, 6, 12], [1, 7, 12], [1, 8, 12], [4, 9, 12], [6, 9, 12], [1, 10, 12], [0, 11, 12], [2, 11, 12], [3, 11, 12], [5, 11, 12], [7, 11, 12], [8, 11, 12], [10, 11, 12], [0, 4, 13], [2, 4, 13], [3, 4, 13], [4, 5, 13], [0, 6, 13], [2, 6, 13], [3, 6, 13], [5, 6, 13], [4, 7, 13], [6, 7, 13], [4, 8, 13], [6, 8, 13], [0, 9, 13], [2, 9, 13], [3, 9, 13], [5, 9, 13], [7, 9, 13], [8, 9, 13], [4, 10, 13], [6, 10, 13], [9, 10, 13], [1, 11, 13], [0, 12, 13], [2, 12, 13], [3, 12, 13], [5, 12, 13], [7, 12, 13], [8, 12, 13], [10, 12, 13], [0, 2, 14], [0, 3, 14], [2, 3, 14], [1, 4, 14], [0, 5, 14], [2, 5, 14], [3, 5, 14], [1, 6, 14], [0, 7, 14], [2, 7, 14], [3, 7, 14], [5, 7, 14], [0, 8, 14], [2, 8, 14], [3, 8, 14], [5, 8, 14], [7, 8, 14], [1, 9, 14], [0, 10, 14], [2, 10, 14], [3, 10, 14], [5, 10, 14], [7, 10, 14], [8, 10, 14], [4, 11, 14], [6, 11, 14], [9, 11, 14], [1, 12, 14], [11, 12, 14], [4, 13, 14], [6, 13, 14], [9, 13, 14], [12, 13, 14], [0, 2, 15], [0, 3, 15], [2, 3, 15], [1, 4, 15], [0, 5, 15], [2, 5, 15], [3, 5, 15], [1, 6, 15], [0, 7, 15], [2, 7, 15], [3, 7, 15], [5, 7, 15], [0, 8, 15], [2, 8, 15], [3, 8, 15], [5, 8, 15], [7, 8, 15], [1, 9, 15], [0, 10, 15], [2, 10, 15], [3, 10, 15], [5, 10, 15], [7, 10, 15], [8, 10, 15], [4, 11, 15], [6, 11, 15], [9, 11, 15], [1, 12, 15], [11, 12, 15], [4, 13, 15], [6, 13, 15], [9, 13, 15], [12, 13, 15], [0, 14, 15], [2, 14, 15], [3, 14, 15], [5, 14, 15], [7, 14, 15], [8, 14, 15], [10, 14, 15], [0, 2, 16], [0, 3, 16], [2, 3, 16], [1, 4, 16], [0, 5, 16], [2, 5, 16], [3, 5, 16], [1, 6, 16], [0, 7, 16], [2, 7, 16], [3, 7, 16], [5, 7, 16], [0, 8, 16], [2, 8, 16], [3, 8, 16], [5, 8, 16], [7, 8, 16], [1, 9, 16], [0, 10, 16], [2, 10, 16], [3, 10, 16], [5, 10, 16], [7, 10, 16], [8, 10, 16], [4, 11, 16], [6, 11, 16], [9, 11, 16], [1, 12, 16], [11, 12, 16], [4, 13, 16], [6, 13, 16], [9, 13, 16], [12, 13, 16], [0, 14, 16], [2, 14, 16], [3, 14, 16], [5, 14, 16], [7, 14, 16], [8, 14, 16], [10, 14, 16], [0, 15, 16], [2, 15, 16], [3, 15, 16], [5, 15, 16], [7, 15, 16], [8, 15, 16], [10, 15, 16], [14, 15, 16], [0, 1, 17], [1, 2, 17], [1, 3, 17], [1, 5, 17], [4, 6, 17], [1, 7, 17], [1, 8, 17], [4, 9, 17], [6, 9, 17], [1, 10, 17], [0, 11, 17], [2, 11, 17], [3, 11, 17], [5, 11, 17], [7, 11, 17], [8, 11, 17], [10, 11, 17], [4, 12, 17], [6, 12, 17], [9, 12, 17], [0, 13, 17], [2, 13, 17], [3, 13, 17], [5, 13, 17], [7, 13, 17], [8, 13, 17], [10, 13, 17], [1, 14, 17], [11, 14, 17], [13, 14, 17], [1, 15, 17], [11, 15, 17], [13, 15, 17], [1, 16, 17], [11, 16, 17], [13, 16, 17], [0, 4, 18], [2, 4, 18], [3, 4, 18], [4, 5, 18], [0, 6, 18], [2, 6, 18], [3, 6, 18], [5, 6, 18], [4, 7, 18], [6, 7, 18], [4, 8, 18], [6, 8, 18], [0, 9, 18], [2, 9, 18], [3, 9, 18], [5, 9, 18], [7, 9, 18], [8, 9, 18], [4, 10, 18], [6, 10, 18], [9, 10, 18], [1, 11, 18], [0, 12, 18], [2, 12, 18], [3, 12, 18], [5, 12, 18], [7, 12, 18], [8, 12, 18], [10, 12, 18], [1, 13, 18], [11, 13, 18], [4, 14, 18], [6, 14, 18], [9, 14, 18], [12, 14, 18], [4, 15, 18], [6, 15, 18], [9, 15, 18], [12, 15, 18], [4, 16, 18], [6, 16, 18], [9, 16, 18], [12, 16, 18], [0, 17, 18], [2, 17, 18], [3, 17, 18], [5, 17, 18], [7, 17, 18], [8, 17, 18], [10, 17, 18], [14, 17, 18], [15, 17, 18], [16, 17, 18], [0, 2, 19], [0, 3, 19], [2, 3, 19], [1, 4, 19], [0, 5, 19], [2, 5, 19], [3, 5, 19], [1, 6, 19], [0, 7, 19], [2, 7, 19], [3, 7, 19], [5, 7, 19], [0, 8, 19], [2, 8, 19], [3, 8, 19], [5, 8, 19], [7, 8, 19], [1, 9, 19], [0, 10, 19], [2, 10, 19], [3, 10, 19], [5, 10, 19], [7, 10, 19], [8, 10, 19], [4, 11, 19], [6, 11, 19], [9, 11, 19], [1, 12, 19], [11, 12, 19], [4, 13, 19], [6, 13, 19], [9, 13, 19], [12, 13, 19], [0, 14, 19], [2, 14, 19], [3, 14, 19], [5, 14, 19], [7, 14, 19], [8, 14, 19], [10, 14, 19], [0, 15, 19], [2, 15, 19], [3, 15, 19], [5, 15, 19], [7, 15, 19], [8, 15, 19], [10, 15, 19], [14, 15, 19], [0, 16, 19], [2, 16, 19], [3, 16, 19], [5, 16, 19], [7, 16, 19], [8, 16, 19], [10, 16, 19], [14, 16, 19], [15, 16, 19], [1, 17, 19], [11, 17, 19], [13, 17, 19], [4, 18, 19], [6, 18, 19], [9, 18, 19], [12, 18, 19], [17, 18, 19]], [6, 5, 3, 0, 1, 9, 7, 6, 6, 7, 6, 8, 4, -1, 0, 3, 6, 7, 5, 3], 399) == True\nassert sat([[2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]], [6, 3, 5, -1, 8, 8], 4) == True\nassert sat([], [7], 0) == True\nassert sat([], [1, 0, -17, 42, 321, 36, 429, 35, 10, 923, 35, 18, 0, 17, 24, 32, 8], 221) == False", "entry_fn_name": "sat"}
{"id": "197", "text": "Find all planets between the two given planets\na=\"Jupiter\", b=\"Pluto\" => [\"Saturn\" \"Uranus\" \"Neptune\"]", "solution": "def sat(planets_between: List[str], a, b):\n    if not ' ' not in ''.join(planets_between):\n        return False\n    return ' '.join([a] + planets_between + [b]) in 'Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto'", "title": "TP3/PlanetRange", "testing_code": "assert sat(['Jupiter', 'Saturn', 'Uranus'], 'Mars', 'Neptune') == True\nassert sat(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'], 'Venus', 'Neptune') == True\nassert sat([], 'Venus', 'Earth') == True\nassert sat(['Mars'], 'Earth', 'Jupiter') == True\nassert sat(['Mars', 'Jupiter', 'Saturn'], 'Earth', 'Uranus') == True\nassert sat([], 'Mars', 'Neptune') == False", "entry_fn_name": "sat"}
{"id": "198", "text": "Find the even-length words and sort them by length.\n[\"soup\", \"not\", \"splendid\"] => [\"soup\", \"splendid\"]", "solution": "def sat(evens: List[str], words):\n    lens = [len(w) for w in evens]\n    if not all((lens[i] % 2 == 0 and lens[i] == max(lens[:i + 1]) and (w in words) for (i, w) in enumerate(evens))):\n        return False\n    return all((len(w) % 2 == 1 or w in evens for w in words))", "title": "TP3/EvenWords", "testing_code": "assert sat(['!!', 'bird', 'that', 'worm', 'Absurd'], ['The', 'worm', 'ate', 'a', 'bird', 'imagine', 'that', '!', 'Absurd', '!!']) == True\nassert sat([], ['valafytextulu', 'quyjylixyvy', 'mavusegojysaquo']) == True\nassert sat(['pemathubolyrav'], ['pemathubolyrav', 'mucyxavofolajig', 'm', 'zyzagynorusybef']) == True\nassert sat(['bozachogawykon', 'tylegykivysequ'], ['bozachogawykon', 'kywicij', 'tylegykivysequ']) == True\nassert sat([], ['vanafegyfog', 'vipugohuvychu']) == True\nassert sat(['!!', 'bird', 'that', 'worm', 'Absurd'], []) == False\nassert sat([], ['The', 'worm', 'ate', 'a', 'bird', 'imagine', 'that', '!', 'Absurd', '!!']) == False", "entry_fn_name": "sat"}
{"id": "199", "text": "Find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates\n[2, 17, 16, 0, 6, 4, 5] => [2, 4, 16, 17]", "solution": "def sat(neighbors: List[int], nums):\n\n    def prime(m):\n        return all((m % i for i in range(2, m - 1)))\n    goods = set()\n    for (i, n) in enumerate(nums):\n        if i > 0 and prime(nums[i - 1]) or (i < len(nums) - 1 and prime(nums[i + 1])):\n            goods.add(n)\n    return set(neighbors) == goods and all((n == min(neighbors[i:]) for (i, n) in enumerate(neighbors)))", "title": "TP3/PrimeSel", "testing_code": "assert sat([-7, 0, 2, 4, 7, 9, 11, 13, 14, 19, 31, 55, 88], [14, 7, 11, 13, 7, 4, 19, 2, 55, 13, 31, 14, 2, 9, -7, 0, 88, 13, 13]) == True\nassert sat([1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15, 16], [15, 1, 1, 11, 12, 12, 3, 3, 2, 5, 12, 0, 16, 0, 4, 14, 11, 7, 8]) == True\nassert sat([15], [1, 15, 19]) == True\nassert sat([-1, 0, 2, 4, 5, 6, 7, 8, 9, 14, 19], [9, 9, 0, 2, 7, 14, 14, 2, 6, 4, -1, 7, 2, 2, 14, 8, 7, 19, 5, 9, 4, 18, 14, 8, 9, 2, -1]) == True\nassert sat([-1, 0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18], [4, 2, 4, 7, -1, 10, 0, 10, 1, 3, 8, 3, 5, 3, 0, -1, 11, 18, 15, 2, 4, 10, 8, 14, 6, 1, 12, 14, 5]) == True\nassert sat([-7, 0, 2, 4, 7, 9, 11, 13, 14, 19, 31, 55, 88], []) == False\nassert sat([], [14, 7, 11, 13, 7, 4, 19, 2, 55, 13, 31, 14, 2, 9, -7, 0, 88, 13, 13]) == False", "entry_fn_name": "sat"}
{"id": "200", "text": "Find the sum of the squares of the positive even integers\n[2.0, 3.0, 2.5, 4.0] => 20", "solution": "def sat(tot: int, xs):\n    for x in xs:\n        if x.is_integer() and x > 0 and (x % 2 == 0):\n            tot -= int(x) ** 2\n    return tot == 0", "title": "TP3/EvenSqure", "testing_code": "assert sat(554130443861480, [123.0, 872322.0, 542.2, -127.5, 18214.0, 3732.4, 12832.4, 23523800.0]) == True\nassert sat(0, []) == True\nassert sat(56633528484, [274797.0, 8635.410691353316, 53805.0, -51907.0, -24430.861351406824, 190577.0, 237978.0, 133989.0]) == True\nassert sat(38815906516, [205685.0, 6849.8060301064015, 68569.0, 33659.85121811424, 71796.0, 183470.0, 236644.22522117657, -11658.772326982376, 155284.34795372086]) == True\nassert sat(130479314824, [58607.93384068141, 26960.422714894165, 220926.0, 32993.16403323761, 36258.0, 164898.58842568452, -22047.528018042995, 283472.0, -14768.0]) == True\nassert sat(554130443861480, []) == False", "entry_fn_name": "sat"}
{"id": "201", "text": "Find an array that when added to vector a gives array vector c\n[1, 2, 3], [4, 17, 5] => [3, 15, 2]", "solution": "def sat(b: List[int], a, c):\n    return len(b) == len(a) and all((i + j == k for (i, j, k) in zip(a, b, c)))", "title": "TP3/ArrayDiff", "testing_code": "assert sat([0, 0, 0, 4, -4, -1, 0, -1, 0, 0, 0, 0], [1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4], [1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]) == True\nassert sat([1, 20, 3, 8, 1, 2, -11, 7, -9, 11, 5, 4], [14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1], [15, 19, 15, 19, 4, 1, 7, 12, -1, 16, 11, 5]) == True\nassert sat([-9, -3, 14, 7, 8, 2, 4, -2, 1, 1, 10, 17, -5, -8, -16, 5], [14, 14, 2, 1, 11, 10, 15, 11, 9, 10, 4, 1, 7, 10, 16, 12], [5, 11, 16, 8, 19, 12, 19, 9, 10, 11, 14, 18, 2, 2, 0, 17]) == True\nassert sat([9, 6, -3, 1, 1, 9, -3, -5, 1, 5, 4, 9, 9, 2, 8], [4, 8, 14, 17, 15, -1, 17, 8, -1, 4, 3, 10, 2, 13, 1], [13, 14, 11, 18, 16, 8, 14, 3, 0, 9, 7, 19, 11, 15, 9]) == True\nassert sat([0, 3, 10, -3, 17, 7, 12, -1, -5, -11, 2, 0], [13, 10, 7, 7, 1, 10, 0, 17, 5, 14, 10, 14], [13, 13, 17, 4, 18, 17, 12, 16, 0, 3, 12, 14]) == True\nassert sat('[0, 0, 0, 4, -4, -1, 0, -1, 0, 0, 0, 0]', '[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4]', '[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]') == False\nassert sat('[1, 20, 3, 8, 1, 2, -11, 7, -9, 11, 5, 4]', '[14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1]', '[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]') == False\nassert sat('[1, 20, 3, 8, 1, 2, -11, 7, -9, 11, 5, 4]', '[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4]', '[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]') == False\nassert sat('[0, 0, 0, 4, -4, -1, 0, -1, 0, 0, 0, 0]', '[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4]', '[13, 13, 17, 4, 18, 17, 12, 16, 0, 3, 12, 14]') == False\nassert sat('[0, 0, 0, 4, -4, -1, 0, -1, 0, 0, 0, 0]', '[14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1]', '[13, 13, 17, 4, 18, 17, 12, 16, 0, 3, 12, 14]') == False\nassert sat('[0, 0, 0, 4, -4, -1, 0, -1, 0, 0, 0, 0]', '[14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1]', '[15, 19, 15, 19, 4, 1, 7, 12, -1, 16, 11, 5]') == False\nassert sat('[1, 20, 3, 8, 1, 2, -11, 7, -9, 11, 5, 4]', '[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4]', '[13, 13, 17, 4, 18, 17, 12, 16, 0, 3, 12, 14]') == False\nassert sat('[0, 3, 10, -3, 17, 7, 12, -1, -5, -11, 2, 0]', '[14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1]', '[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]') == False\nassert sat('[0, 3, 10, -3, 17, 7, 12, -1, -5, -11, 2, 0]', '[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4]', '[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]') == False\nassert sat('[0, 0, 0, 4, -4, -1, 0, -1, 0, 0, 0, 0]', '[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4]', '[15, 19, 15, 19, 4, 1, 7, 12, -1, 16, 11, 5]') == False", "entry_fn_name": "sat"}
{"id": "202", "text": "Find the class_name.extension for the extension that has the largest #capitals - #lowercase letters", "solution": "def sat(s: str, class_name, extensions):\n    if not s.startswith(class_name + '.'):\n        return False\n    ext = s[len(class_name) + 1:]\n\n    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n    return ext in extensions and case_delta(ext) == max([case_delta(x) for x in extensions])", "title": "TP3/StrongestExtension", "testing_code": "assert sat('TestClass.v9ACLQWTEW', 'TestClass', ['extEnd', 'LOL', 'SuPeRbLy', 'v9ACLQWTEW', 'PickMe', 'AI']) == True\nassert sat('Lyhithywuwotu.JUFeSA', 'Lyhithywuwotu', ['moRUTExterefI', 'vItHu', 'xIWygaly', 'zONITh', 'ChinELAbiFOfywUcU', 'sywyfIFuTagAX', 'CIcECHiriQUuXuxuh', 'JUFeSA']) == True\nassert sat('Textafarole.HYCygiNY', 'Textafarole', ['bEzETExTutheQuYCetH', 'FUFetEpaPafawIxegIbI', 'fUxuXYfOmutYM', 'HYCygiNY', 'FUnaVYcHity', 'th', 'dULUDyQui', 'rAvUJUlAchUHAsOBese', 'tefO', 'vy']) == True\nassert sat('Gudes.RySyJIFADEXETYBopUL', 'Gudes', ['CHOXeHeTAsUxyTe', 'QuEtHeTe', 'NOtEX', 'sehYJyFecIte', 'RySyJIFADEXETYBopUL', 'taMEcYW']) == True\nassert sat('Ruxomyw.TEXteSYSyWEQuy', 'Ruxomyw', ['PUfam', 'H', 'PEVYtHAxe', 'cInyTex', 'PoJApESOch', 'teXTidaQuigUPOtho', 'TEXteSYSyWEQuy', 'C', 'ZEFutexTImyjUHi', 'CIcybAMeT', 'XIWAvaDoBe']) == True\nassert sat('TestClass.v9ACLQWTEW', 'TestClass', []) == False\nassert sat('TestClass.v9ACLQWTEW', '', ['extEnd', 'LOL', 'SuPeRbLy', 'v9ACLQWTEW', 'PickMe', 'AI']) == False\nassert sat('', 'TestClass', ['extEnd', 'LOL', 'SuPeRbLy', 'v9ACLQWTEW', 'PickMe', 'AI']) == False", "entry_fn_name": "sat"}
{"id": "203", "text": "Find a rotation of string s that is a substring of t\nInput Example:\ns=\"test\", t=\"I love lattes\"\nOutput Example:\n\"ttes\"", "solution": "def sat(r: str, s, t):\n    return r in t and len(r) == len(s) and (r in s + s)", "title": "TP3/RotateString", "testing_code": "assert sat(' starlight', 'light star', 'I love to look at the starlight!') == True\nassert sat('thihonofuz tox banu dukukyjosu', 'fuz tox banu dukukyjosuthihono', 'sikysefylacywitijuz thosowehiv kiviwas girezol betext lepumarasithihonofuz tox banu dukukyjosutog kuquinecakyt') == True\nassert sat('tus tyryrezywovimu sopikalo vyquaquabuwuk', 'vyquaquabuwuktus tyryrezywovimu sopikalo ', 'zugu benuzyca cafoca gawy sycapoxitus tyryrezywovimu sopikalo vyquaquabuwuko citextytextythakidu basikyched') == True\nassert sat('xebalu w guhudynybu cequelyn', 'udynybu cequelynxebalu w guh', 'zigoxesychujocefete nyquuquu wubupi quidoxebalu w guhudynybu cequelynuquumythaku xet syquaxatext lizevachuciconolove') == True\nassert sat('mowefecajajeh b tythanenifewed quomekucybimudegicyj zos depogip k', 'fecajajeh b tythanenifewed quomekucybimudegicyj zos depogip kmowe', 'fuch mowefecajajeh b tythanenifewed quomekucybimudegicyj zos depogip kotextu hothakatozate thyzet') == True\nassert sat(' starlight', 'light star', '') == False\nassert sat(' starlight', '', 'I love to look at the starlight!') == False\nassert sat('', 'light star', 'I love to look at the starlight!') == False", "entry_fn_name": "sat"}
{"id": "204", "text": "Find an integer n >= 0 with the given number of even and odd digits.\nevens=3, odds=4 => 2381695", "solution": "def sat(n: int, evens, odds):\n    for c in str(n):\n        if int(c) % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    return evens == 0 and odds == 0", "title": "TP3/EvenOddDigits", "testing_code": "assert sat(22222222222222222111, 17, 3) == True\nassert sat(22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222211111111111111111111111111111111111111111111111111111111, 117, 56) == True\nassert sat(22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, 114, 119) == True\nassert sat(2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222111111111111111111111111111111111, 133, 33) == True\nassert sat(22222222111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111, 8, 114) == True\nassert sat(5, 17, 3) == False\nassert sat(5, 8, 56) == False\nassert sat(5, 8, 33) == False\nassert sat(5, 8, 3) == False\nassert sat(5, 17, 3) == False\nassert sat(5, 8, 33) == False\nassert sat(5, 8, 33) == False\nassert sat(5, 8, 3) == False\nassert sat(5, 8, 56) == False\nassert sat(5, 8, 3) == False", "entry_fn_name": "sat"}
{"id": "205", "text": "Convert integer 0 < n < 4000 to roman numerals, and make it lowercase\n11 => \"xi\"", "solution": "def sat(roman: str, n):\n    key = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    m = 0\n    for base in [1000, 100, 10, 1]:\n        for mul in [9, 4, 5, 1, 1, 1]:\n            val = base * mul\n            if val in key and roman.startswith(key[val]):\n                m += val\n                roman = roman[len(key[val]):]\n                if mul == 9 or mul == 4:\n                    break\n    return m == n", "title": "TP3/RomanNumerals", "testing_code": "assert sat('mmcdxiv', 2414) == True\nassert sat('mmlviii', 2058) == True\nassert sat('mcdlxvii', 1467) == True\nassert sat('mdxxxiii', 1533) == True\nassert sat('cxiv', 114) == True\nassert sat('', 2414) == False", "entry_fn_name": "sat"}
{"id": "206", "text": "Find m Pythagorean triples a^2 + b^2 == c^2 for integers 0 < a < b < c <= n, in sorted order\n(n=6, m=1) => [[3, 4, 5]]", "solution": "def sat(triples: List[List[int]], n, m):\n    for (a, b, c) in triples:\n        if not (a * a + b * b == c * c and 0 < a < b < c <= n):\n            return False\n    return triples == sorted(triples) and len(triples) >= m", "title": "TP3/PythagoreanTriples", "testing_code": "assert sat([[3, 4, 5], [5, 12, 13], [6, 8, 10], [7, 24, 25], [8, 15, 17], [9, 12, 15], [9, 40, 41], [10, 24, 26], [11, 60, 61], [12, 16, 20], [12, 35, 37], [13, 84, 85], [14, 48, 50], [15, 20, 25], [15, 36, 39], [15, 112, 113], [16, 30, 34], [16, 63, 65], [17, 144, 145], [18, 24, 30], [18, 80, 82], [19, 180, 181], [20, 21, 29], [20, 48, 52], [20, 99, 101], [21, 28, 35], [21, 72, 75], [21, 220, 221], [22, 120, 122], [23, 264, 265], [24, 32, 40], [24, 45, 51], [24, 70, 74], [24, 143, 145], [25, 60, 65], [25, 312, 313], [26, 168, 170], [27, 36, 45], [27, 120, 123], [27, 364, 365], [28, 45, 53], [28, 96, 100], [28, 195, 197], [29, 420, 421], [30, 40, 50], [30, 72, 78], [30, 224, 226], [31, 480, 481], [32, 60, 68], [32, 126, 130], [32, 255, 257], [33, 44, 55], [33, 56, 65], [33, 180, 183], [33, 544, 545], [34, 288, 290], [35, 84, 91], [35, 120, 125], [35, 612, 613], [36, 48, 60], [36, 77, 85], [36, 105, 111], [36, 160, 164], [36, 323, 325], [38, 360, 362], [39, 52, 65], [39, 80, 89], [39, 252, 255], [40, 42, 58], [40, 75, 85], [40, 96, 104], [40, 198, 202], [40, 399, 401], [42, 56, 70], [42, 144, 150], [42, 440, 442], [44, 117, 125], [44, 240, 244], [44, 483, 485], [45, 60, 75], [45, 108, 117], [45, 200, 205], [45, 336, 339], [46, 528, 530], [48, 55, 73], [48, 64, 80], [48, 90, 102], [48, 140, 148], [48, 189, 195], [48, 286, 290], [48, 575, 577], [49, 168, 175], [50, 120, 130], [50, 624, 626], [51, 68, 85], [51, 140, 149], [51, 432, 435], [52, 165, 173], [52, 336, 340], [54, 72, 90], [54, 240, 246], [55, 132, 143], [55, 300, 305], [56, 90, 106], [56, 105, 119], [56, 192, 200], [56, 390, 394], [57, 76, 95], [57, 176, 185], [57, 540, 543], [60, 63, 87], [60, 80, 100], [60, 91, 109], [60, 144, 156], [60, 175, 185], [60, 221, 229], [60, 297, 303], [60, 448, 452], [63, 84, 105], [63, 216, 225], [63, 280, 287], [64, 120, 136], [64, 252, 260], [64, 510, 514], [65, 72, 97], [65, 156, 169], [65, 420, 425], [66, 88, 110], [66, 112, 130], [66, 360, 366], [68, 285, 293], [68, 576, 580], [69, 92, 115], [69, 260, 269], [70, 168, 182], [70, 240, 250], [72, 96, 120], [72, 135, 153], [72, 154, 170], [72, 210, 222], [72, 320, 328], [72, 429, 435], [75, 100, 125], [75, 180, 195], [75, 308, 317], [75, 560, 565], [76, 357, 365], [77, 264, 275], [77, 420, 427], [78, 104, 130], [78, 160, 178], [78, 504, 510], [80, 84, 116], [80, 150, 170], [80, 192, 208], [80, 315, 325], [80, 396, 404], [81, 108, 135], [81, 360, 369], [84, 112, 140], [84, 135, 159], [84, 187, 205], [84, 245, 259], [84, 288, 300], [84, 437, 445], [84, 585, 591], [85, 132, 157], [85, 204, 221], [87, 116, 145], [87, 416, 425], [88, 105, 137], [88, 165, 187], [88, 234, 250], [88, 480, 488], [90, 120, 150], [90, 216, 234], [90, 400, 410], [91, 312, 325], [91, 588, 595], [92, 525, 533], [93, 124, 155], [93, 476, 485], [95, 168, 193], [95, 228, 247], [96, 110, 146], [96, 128, 160], [96, 180, 204], [96, 247, 265], [96, 280, 296], [96, 378, 390], [96, 572, 580], [98, 336, 350], [99, 132, 165], [99, 168, 195], [99, 440, 451], [99, 540, 549], [100, 105, 145], [100, 240, 260], [100, 495, 505], [100, 621, 629], [102, 136, 170], [102, 280, 298], [104, 153, 185], [104, 195, 221], [104, 330, 346], [105, 140, 175], [105, 208, 233], [105, 252, 273], [105, 360, 375], [105, 608, 617], [108, 144, 180], [108, 231, 255], [108, 315, 333], [108, 480, 492], [110, 264, 286], [110, 600, 610], [111, 148, 185], [112, 180, 212], [112, 210, 238], [112, 384, 400], [112, 441, 455], [114, 152, 190], [114, 352, 370], [115, 252, 277], [115, 276, 299], [117, 156, 195], [117, 240, 267], [117, 520, 533], [119, 120, 169], [119, 408, 425], [120, 126, 174], [120, 160, 200], [120, 182, 218], [120, 209, 241], [120, 225, 255], [120, 288, 312], [120, 350, 370], [120, 391, 409], [120, 442, 458], [120, 594, 606], [123, 164, 205], [125, 300, 325], [126, 168, 210], [126, 432, 450], [126, 560, 574], [128, 240, 272], [128, 504, 520], [129, 172, 215], [130, 144, 194], [130, 312, 338], [132, 176, 220], [132, 224, 260], [132, 351, 375], [132, 385, 407], [132, 475, 493], [133, 156, 205], [133, 456, 475], [135, 180, 225], [135, 324, 351], [135, 352, 377], [135, 600, 615], [136, 255, 289], [136, 273, 305], [136, 570, 586], [138, 184, 230], [138, 520, 538], [140, 147, 203], [140, 171, 221], [140, 225, 265], [140, 336, 364], [140, 480, 500], [141, 188, 235], [144, 165, 219], [144, 192, 240], [144, 270, 306], [144, 308, 340], [144, 420, 444], [144, 567, 585], [145, 348, 377], [145, 408, 433], [147, 196, 245], [147, 504, 525], [150, 200, 250], [150, 360, 390], [150, 616, 634], [152, 285, 323], [152, 345, 377], [153, 204, 255], [153, 420, 447], [154, 528, 550], [155, 372, 403], [155, 468, 493], [156, 208, 260], [156, 320, 356], [156, 455, 481], [156, 495, 519], [159, 212, 265], [160, 168, 232], [160, 231, 281], [160, 300, 340], [160, 384, 416], [161, 240, 289], [161, 552, 575], [162, 216, 270], [165, 220, 275], [165, 280, 325], [165, 396, 429], [165, 532, 557], [168, 224, 280], [168, 270, 318], [168, 315, 357], [168, 374, 410], [168, 425, 457], [168, 490, 518], [168, 576, 600], [170, 264, 314], [170, 408, 442], [171, 228, 285], [171, 528, 555], [174, 232, 290], [175, 288, 337], [175, 420, 455], [175, 600, 625], [176, 210, 274], [176, 330, 374], [176, 468, 500], [177, 236, 295], [180, 189, 261], [180, 240, 300], [180, 273, 327], [180, 299, 349], [180, 385, 425], [180, 432, 468], [180, 525, 555], [183, 244, 305], [184, 345, 391], [184, 513, 545], [185, 444, 481], [186, 248, 310], [189, 252, 315], [189, 340, 389], [190, 336, 386], [190, 456, 494], [192, 220, 292], [192, 256, 320], [192, 360, 408], [192, 494, 530], [192, 560, 592], [195, 216, 291], [195, 260, 325], [195, 400, 445], [195, 468, 507], [196, 315, 371], [198, 264, 330], [198, 336, 390], [200, 210, 290], [200, 375, 425], [200, 480, 520], [200, 609, 641], [201, 268, 335], [203, 396, 445], [204, 253, 325], [204, 272, 340], [204, 560, 596], [204, 595, 629], [205, 492, 533], [207, 224, 305], [207, 276, 345], [208, 306, 370], [208, 390, 442], [210, 280, 350], [210, 416, 466], [210, 504, 546], [213, 284, 355], [215, 516, 559], [216, 288, 360], [216, 405, 459], [216, 462, 510], [217, 456, 505], [219, 292, 365], [220, 231, 319], [220, 459, 509], [220, 528, 572], [220, 585, 625], [222, 296, 370], [224, 360, 424], [224, 420, 476], [225, 272, 353], [225, 300, 375], [225, 540, 585], [228, 304, 380], [228, 325, 397], [230, 504, 554], [230, 552, 598], [231, 308, 385], [231, 392, 455], [231, 520, 569], [232, 435, 493], [234, 312, 390], [234, 480, 534], [235, 564, 611], [237, 316, 395], [238, 240, 338], [240, 252, 348], [240, 275, 365], [240, 320, 400], [240, 364, 436], [240, 418, 482], [240, 450, 510], [240, 551, 601], [240, 576, 624], [243, 324, 405], [245, 588, 637], [246, 328, 410], [248, 465, 527], [249, 332, 415], [252, 275, 373], [252, 336, 420], [252, 405, 477], [252, 539, 595], [252, 561, 615], [255, 340, 425], [255, 396, 471], [256, 480, 544], [258, 344, 430], [260, 273, 377], [260, 288, 388], [261, 348, 435], [261, 380, 461], [264, 315, 411], [264, 352, 440], [264, 448, 520], [264, 495, 561], [266, 312, 410], [267, 356, 445], [270, 360, 450], [272, 510, 578], [272, 546, 610], [273, 364, 455], [273, 560, 623], [276, 368, 460], [276, 493, 565], [279, 372, 465], [279, 440, 521], [280, 294, 406], [280, 342, 442], [280, 351, 449], [280, 450, 530], [280, 525, 595], [282, 376, 470], [285, 380, 475], [285, 504, 579], [288, 330, 438], [288, 384, 480], [288, 540, 612], [291, 388, 485], [294, 392, 490], [296, 555, 629], [297, 304, 425], [297, 396, 495], [297, 504, 585], [300, 315, 435], [300, 400, 500], [300, 455, 545], [303, 404, 505], [304, 570, 646], [306, 408, 510], [308, 435, 533], [308, 495, 583], [309, 412, 515], [312, 416, 520], [312, 459, 555], [315, 420, 525], [318, 424, 530], [319, 360, 481], [320, 336, 464], [320, 462, 562], [321, 428, 535], [322, 480, 578], [324, 432, 540], [325, 360, 485], [327, 436, 545], [330, 440, 550], [333, 444, 555], [336, 377, 505], [336, 385, 511], [336, 448, 560], [336, 527, 625], [336, 540, 636], [339, 452, 565], [340, 357, 493], [340, 528, 628], [341, 420, 541], [342, 456, 570], [345, 460, 575], [348, 464, 580], [351, 468, 585], [352, 420, 548], [354, 472, 590], [357, 360, 507], [357, 476, 595], [360, 378, 522], [360, 480, 600], [363, 484, 605], [366, 488, 610], [368, 465, 593], [369, 492, 615], [372, 496, 620], [375, 500, 625], [378, 504, 630], [380, 399, 551], [381, 508, 635], [384, 440, 584], [384, 512, 640], [387, 516, 645], [390, 432, 582], [396, 403, 565], [399, 468, 615], [400, 420, 580], [414, 448, 610], [420, 441, 609], [429, 460, 629], [440, 462, 638]], 646, 523) == True\nassert sat([], 646, 523) == False", "entry_fn_name": "sat"}
{"id": "207", "text": "Select a string from the pool with the most unique characters\n[\"woooow\", \"cow\"] => \"cow\"", "solution": "def sat(s: str, pool):\n    if not s in pool:\n        return False\n    n = len(set(s))\n    for p in pool:\n        if not len(set(p)) <= n:\n            return False\n    return True", "title": "TP3/MostUnique", "testing_code": "assert sat('abcdefhijklmnop', ['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']) == True\nassert sat('sibiloguhujuquenam', ['sibiloguhujuquenam', 'nyzidikedutexti', 'zatextuquyvakijahixa', 'textujig', 'cewynyrimatex', 'textusaxinypuhyheza']) == True\nassert sat('gylapasugatextysar', ['gylapasugatextysar', 'zapy', 'hycokelet']) == True\nassert sat('fuhibatextixyburekan', ['te', '', 'badypikyxucudil', 'fuhibatextixyburekan', 'chole']) == True\nassert sat('bulonu', ['th', 's', 'bulonu', 'r']) == True\nassert sat('abcdefhijklmnop', []) == False\nassert sat('', ['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']) == False", "entry_fn_name": "sat"}
{"id": "208", "text": "For each triple of eaten, need, stock return a pair of total appetite and remaining\n[[2, 5, 6], [3, 9, 22]] => [[7, 1], [12, 13]]", "solution": "def sat(results: List[List[int]], stats):\n    if not len(results) == len(stats):\n        return False\n    for ((tot, remaining), (eaten, need, stock)) in zip(results, stats):\n        if not tot - eaten == min(need, stock):\n            return False\n        if not (stock < need and remaining == 0 or (stock >= need and remaining + need == stock)):\n            return False\n    return True", "title": "TP3/HungryRabbits", "testing_code": "assert sat([[5, 15], [6, 0], [7, 2], [11, 4], [13, 97]], [[2, 3, 18], [4, 9, 2], [2, 5, 7], [3, 8, 12], [4, 9, 106]]) == True\nassert sat([[7, 0], [1, 7], [10, 0], [8, 5], [11, 2], [13, 0]], [[4, 5, 3], [1, 0, 7], [3, 7, 7], [5, 3, 8], [9, 2, 4], [7, 6, 6]]) == True\nassert sat([], []) == True\nassert sat([[11, 0], [3, 0], [10, 6], [11, 1], [14, 3], [14, 0], [10, 0], [13, 0]], [[9, 2, 2], [2, 3, 1], [9, 1, 7], [9, 2, 3], [8, 6, 9], [9, 6, 5], [8, 9, 2], [9, 8, 4]]) == True\nassert sat([[2, 8]], [[1, 1, 9]]) == True\nassert sat('[[2, 8]]', '[]') == False\nassert sat('[[5, 15], [6, 0], [7, 2], [11, 4], [13, 97]]', '[]') == False\nassert sat('[[2, 8]]', '[[9, 2, 2], [2, 3, 1], [9, 1, 7], [9, 2, 3], [8, 6, 9], [9, 6, 5], [8, 9, 2], [9, 8, 4]]') == False\nassert sat('[]', '[[4, 5, 3], [1, 0, 7], [3, 7, 7], [5, 3, 8], [9, 2, 4], [7, 6, 6]]') == False\nassert sat('[[7, 0], [1, 7], [10, 0], [8, 5], [11, 2], [13, 0]]', '[[2, 3, 18], [4, 9, 2], [2, 5, 7], [3, 8, 12], [4, 9, 106]]') == False\nassert sat('[[2, 8]]', '[[1, 1, 9]]') == False\nassert sat('[]', '[[2, 3, 18], [4, 9, 2], [2, 5, 7], [3, 8, 12], [4, 9, 106]]') == False\nassert sat('[[7, 0], [1, 7], [10, 0], [8, 5], [11, 2], [13, 0]]', '[[1, 1, 9]]') == False\nassert sat('[[11, 0], [3, 0], [10, 6], [11, 1], [14, 3], [14, 0], [10, 0], [13, 0]]', '[[1, 1, 9]]') == False\nassert sat('[[11, 0], [3, 0], [10, 6], [11, 1], [14, 3], [14, 0], [10, 0], [13, 0]]', '[]') == False", "entry_fn_name": "sat"}
{"id": "209", "text": "Find a permutation of the operators +-*/^% which when inserted between nums evaluates to target\ntarget=3, nums=[7, 2, 3, 4, 5, 1, 6] => [\"+\", \"*\", \"**\", \"%\", \"//\", \"-\"]\n# because 7 + 2 * 3 ** 4 % 5 // 1 - 6 == 3", "solution": "def sat(ops: List[str], target, nums):\n    if not (len(ops) == len(set(ops)) and set(ops) == {'**', '*', '+', '-', '//', '%'}):\n        return False\n    expr = str(nums[0])\n    for (n, op) in zip(nums[1:], ops):\n        expr += op + str(n)\n    return eval(expr) == target", "title": "TP3/EvaluateOperators", "testing_code": "assert sat(['**', '//', '+', '%', '-', '*'], 2021, [4, 6, 2, 1, 1, 3, 9]) == True\nassert sat(['**', '*', '//', '%', '+', '-'], 4, [5, 4, 8, 9, 3, 6, 2]) == True\nassert sat(['//', '%', '-', '*', '**', '+'], -24995, [1, 8, 5, 8, 5, 5, 5]) == True\nassert sat(['**', '%', '*', '+', '-', '//'], 6, [7, 4, 4, 2, 4, 1, 6]) == True\nassert sat(['**', '+', '%', '//', '*', '-'], 38, [6, 2, 1, 7, 1, 3, 1]) == True\nassert sat([], 2021, [4, 6, 2, 1, 1, 3, 9]) == False", "entry_fn_name": "sat"}
{"id": "210", "text": "Reverse the case of all strings. For those strings which contain no letters, reverse the strings.\n[\"Test\", \"!@#\"] => [\"tEST\", \"#@!\"]", "solution": "def sat(rev: List[str], strs):\n    if not len(rev) == len(strs):\n        return False\n    return all((r.swapcase() == s != r or r[::-1] == s == s.swapcase() for (r, s) in zip(rev, strs)))", "title": "TP3/ReverseCase", "testing_code": "assert sat(['CAT', 'U8U', '23521', '', '191', '4TuN8', 'EWRwqtew', 'I', 'iOu'], ['cat', 'u8u', '12532', '', '191', '4tUn8', 'ewrWQTEW', 'i', 'IoU']) == True\nassert sat(['VywAKIfOweLeNyJoFa', 'ro', '575', '349', '304', '292-', 'TEXTy'], ['vYWakiFoWElEnYjOfA', 'RO', '575', '943', '403', '-292', 'textY']) == True\nassert sat(['322', '099', '306-', 'mA', '369-', 'Ko', 'retHOfoHUvaNucYmYHic', '117', '478-'], ['223', '990', '-603', 'Ma', '-963', 'kO', 'REThoFOhuVAnUCyMyhIC', '711', '-874']) == True\nassert sat(['253-', 'WI', '787-', '607', 'FyCHuC', '245', 'jEjUZICHuNAhUGaC', '369'], ['-352', 'wi', '-787', '706', 'fYchUc', '542', 'JeJuzichUnaHugAc', '963']) == True\nassert sat(['432', '828-', '033', 'nATExT', '425-', '691-', 'SICInucEWocEpuDIn'], ['234', '-828', '330', 'NateXt', '-524', '-196', 'siciNUCewOCePUdiN']) == True\nassert sat(['CAT', 'U8U', '23521', '', '191', '4TuN8', 'EWRwqtew', 'I', 'iOu'], []) == False\nassert sat([], ['cat', 'u8u', '12532', '', '191', '4tUn8', 'ewrWQTEW', 'i', 'IoU']) == False", "entry_fn_name": "sat"}
{"id": "211", "text": "Find a collision for the given Zobrist chess board hash: https://en.wikipedia.org/wiki/Zobrist_hashing\nEach of the two positions should be encoded as a list of 64 integers 0-12", "solution": "def sat(positions: List[List[int]]):\n    table = [[(i * 429436219 + j * 100239120) % 63491564 for j in range(13)] for i in range(64)]\n\n    def zobrist(pos):\n        h = 0\n        for i in range(64):\n            if pos[i]:\n                h ^= table[i][pos[i]]\n        return h\n    (a, b) = positions\n    return zobrist(a) == zobrist(b) and a != b", "title": "TP3/ZobristCollision", "testing_code": "assert sat([[5, 2, 5, 8, 11, 8, 11, 1, 4, 1, 4, 7, 10, 7, 10, 0, 3, 0, 3, 6, 9, 6, 9, 12, 2, 12, 2, 5, 8, 5, 8, 11, 1, 11, 1, 4, 7, 4, 7, 10, 0, 10, 0, 3, 6, 3, 6, 9, 12, 9, 12, 2, 5, 2, 5, 8, 11, 8, 11, 1, 4, 1, 4, 7], [2, 7, 5, 3, 8, 6, 4, 9, 7, 5, 3, 8, 6, 4, 9, 7, 5, 3, 8, 6, 4, 9, 7, 5, 3, 8, 6, 4, 9, 7, 5, 3, 8, 6, 4, 9, 7, 5, 10, 8, 6, 4, 9, 7, 5, 10, 8, 6, 4, 9, 7, 5, 10, 8, 6, 4, 9, 7, 5, 10, 8, 6, 4, 9]]) == True", "entry_fn_name": "sat"}
{"id": "212", "text": "Find integers [a, b] that are at least 5 apart and such that concatenating the even numbers\nbetween them gives the string s\n\"32343638\" => [31, 38]", "solution": "def sat(ab: List[int], s):\n    return abs(ab[0] - ab[1]) > 4 and s == ''.join((str(i) for i in range(min(ab), max(ab) + 1) if i % 2 == 0))", "title": "TP3/EvenBetween", "testing_code": "assert sat([32987, 33003], '3298832990329923299432996329983300033002') == True\nassert sat([38599, 38607], '38600386023860438606') == True\nassert sat([25403, 25409], '254042540625408') == True\nassert sat([32879, 32887], '32880328823288432886') == True\nassert sat([60627, 60637], '6062860630606326063460636') == True\nassert sat([32987, 33003], '') == False", "entry_fn_name": "sat"}
{"id": "213", "text": "Determine if n can be evenly divided into two equal numbers. (Easy)", "solution": "def sat(b: bool, n):\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False", "title": "TP3/IsEven", "testing_code": "assert sat(True, 10) == True\nassert sat(True, 0) == True\nassert sat(False, 1) == True\nassert sat(True, 2) == True\nassert sat(False, 3) == True\nassert sat(True, 5) == False\nassert sat(True, 5) == False\nassert sat(True, 5) == False\nassert sat(True, 5) == False\nassert sat(True, 5) == False", "entry_fn_name": "sat"}
{"id": "214", "text": "Abbreviate strings longer than a given length by replacing everything but the first and last characters by\nan integer indicating how many characters there were in between them.", "solution": "def sat(s: str, word, max_len):\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and (word[-1] == s[-1])", "title": "TP3/Abbreviate", "testing_code": "assert sat('a26m', 'antidisestablishmentarianism', 10) == True\nassert sat('p20g', 'pawuzorythalirinasubyg', 12) == True\nassert sat('j16h', 'jomodosigezyfulach', 5) == True\nassert sat('bybakichop', 'bybakichop', 12) == True\nassert sat('w23e', 'wywaxizodetextonigijalate', 5) == True\nassert sat('a26m', '', 10) == False", "entry_fn_name": "sat"}
{"id": "215", "text": "Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\nsquares.\nSample Input:\nm = 10\nn = 9\na = 5\ntarget = 4\nSample Output:\n[[0, 0], [0, 5], [5, 0], [5, 5]]", "solution": "def sat(corners: List[List[int]], m, n, a, target):\n    covered = {(i + x, j + y) for (i, j) in corners for x in range(a) for y in range(a)}\n    if not len(covered) == len(corners) * a * a:\n        return False\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})", "title": "TP3/SquareTiles", "testing_code": "assert sat([[0, 0], [0, 5], [5, 0], [5, 5]], 10, 9, 5, 4) == True\nassert sat([[0, 0], [0, 9], [0, 18], [0, 27], [0, 36], [0, 45], [0, 54], [0, 63], [0, 72], [0, 81], [0, 90], [0, 99], [0, 108], [0, 117], [0, 126], [9, 0], [9, 9], [9, 18], [9, 27], [9, 36], [9, 45], [9, 54], [9, 63], [9, 72], [9, 81], [9, 90], [9, 99], [9, 108], [9, 117], [9, 126], [18, 0], [18, 9], [18, 18], [18, 27], [18, 36], [18, 45], [18, 54], [18, 63], [18, 72], [18, 81], [18, 90], [18, 99], [18, 108], [18, 117], [18, 126]], 22, 129, 9, 45) == True\nassert sat([[0, 0], [0, 10], [0, 20], [0, 30], [0, 40], [0, 50], [0, 60], [0, 70], [0, 80], [0, 90], [0, 100], [0, 110], [0, 120], [0, 130], [0, 140], [0, 150], [0, 160], [0, 170], [0, 180], [0, 190], [0, 200], [0, 210], [0, 220], [0, 230], [0, 240], [0, 250], [0, 260], [0, 270], [0, 280], [0, 290], [0, 300], [0, 310], [0, 320], [0, 330], [0, 340], [0, 350], [0, 360], [0, 370], [0, 380], [0, 390], [0, 400], [0, 410], [0, 420], [0, 430], [0, 440], [0, 450], [0, 460], [0, 470], [0, 480], [0, 490], [0, 500], [0, 510], [0, 520], [0, 530], [0, 540], [0, 550], [0, 560], [0, 570], [0, 580], [0, 590], [0, 600], [0, 610], [0, 620], [0, 630], [0, 640], [0, 650], [0, 660], [0, 670], [0, 680], [0, 690], [0, 700], [0, 710], [0, 720], [0, 730], [0, 740], [0, 750], [0, 760], [0, 770], [0, 780], [0, 790], [0, 800], [0, 810], [0, 820], [0, 830], [0, 840]], 6, 849, 10, 89) == True\nassert sat([[0, 0], [2, 0], [4, 0], [6, 0], [8, 0], [10, 0], [12, 0], [14, 0], [16, 0], [18, 0], [20, 0], [22, 0], [24, 0], [26, 0], [28, 0], [30, 0], [32, 0], [34, 0], [36, 0], [38, 0], [40, 0], [42, 0], [44, 0], [46, 0], [48, 0], [50, 0], [52, 0], [54, 0], [56, 0], [58, 0], [60, 0], [62, 0], [64, 0], [66, 0], [68, 0], [70, 0], [72, 0]], 74, 1, 2, 38) == True\nassert sat([], 10, 9, 5, 4) == False", "entry_fn_name": "sat"}
{"id": "216", "text": "Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\nFalse for each other list.", "solution": "def sat(lb: List[bool], trips):\n    return len(lb) == len(trips) and all((b is True if sum(s) >= 2 else b is False for (b, s) in zip(lb, trips)))", "title": "TP3/EasyTwos", "testing_code": "assert sat([True, False, False, True, True, True, True], [[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]) == True\nassert sat([True, False, True, False], [[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]) == True\nassert sat([False, False, True, True], [[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]) == True\nassert sat([False, False, True, True, True, True, False, False, True, True, False, True], [[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]) == True\nassert sat([False, True, False, True], [[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]) == True\nassert sat('[False, True, False, True]', '[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]') == False\nassert sat([True, False, False, True, True, True, True], []) == False\nassert sat('[False, True, False, True]', '[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]') == False\nassert sat('[True, False, True, False]', '[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]') == False\nassert sat('[False, True, False, True]', '[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]') == False\nassert sat('[False, False, True, True, True, True, False, False, True, True, False, True]', '[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]') == False\nassert sat('[False, False, True, True]', '[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]') == False\nassert sat('[True, False, True, False]', '[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]') == False\nassert sat('[False, False, True, True]', '[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]') == False\nassert sat('[False, True, False, True]', '[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]') == False", "entry_fn_name": "sat"}
{"id": "217", "text": "Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\nare at least as large as the kth.", "solution": "def sat(n: int, scores, k):\n    if not all((scores[i] >= scores[i + 1] for i in range(len(scores) - 1))):\n        return False\n    return all((s >= scores[k] and s > 0 for s in scores[:n])) and all((s < scores[k] or s <= 0 for s in scores[n:]))", "title": "TP3/DecreasingCountComparison", "testing_code": "assert sat(8, [100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], 6) == True\nassert sat(6, [32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], 4) == True\nassert sat(2, [44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], 1) == True\nassert sat(6, [36, 27, 24, 19, 15, 15, 8, 8, 5], 4) == True\nassert sat(3, [20, 19, 17, 13, 12, 11, 10, 6], 2) == True\nassert sat('2', '[20, 19, 17, 13, 12, 11, 10, 6]', '2') == False\nassert sat('3', '[36, 27, 24, 19, 15, 15, 8, 8, 5]', '2') == False\nassert sat('3', '[20, 19, 17, 13, 12, 11, 10, 6]', '6') == False\nassert sat('3', '[36, 27, 24, 19, 15, 15, 8, 8, 5]', '6') == False\nassert sat('2', '[20, 19, 17, 13, 12, 11, 10, 6]', '6') == False\nassert sat('3', '[20, 19, 17, 13, 12, 11, 10, 6]', '2') == False\nassert sat('8', '[20, 19, 17, 13, 12, 11, 10, 6]', '6') == False\nassert sat('3', '[20, 19, 17, 13, 12, 11, 10, 6]', '1') == False\nassert sat('2', '[20, 19, 17, 13, 12, 11, 10, 6]', '1') == False\nassert sat('3', '[36, 27, 24, 19, 15, 15, 8, 8, 5]', '1') == False", "entry_fn_name": "sat"}
{"id": "218", "text": "Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n(consonant), and make everything lowercase.\nSample Input:\ns = \"Problems\"\nSample Output:\n.p.r.b.l.m.s", "solution": "def sat(t: str, s):\n    i = 0\n    for c in s.lower():\n        if c in 'aeiouy':\n            continue\n        if not t[i] == '.':\n            return False\n        i += 1\n        if not t[i] == c:\n            return False\n        i += 1\n    return i == len(t)", "title": "TP3/VowelDrop", "testing_code": "assert sat('.p.r.b.l.m.s', 'Problems') == True\nassert sat('.v.h.j.q.l.m.c.b.d.p.w.p.w.t.n', 'VahOjaquAlYMEcubidePYwApawAtonE') == True\nassert sat('.k.g.h.d.h.k.n.j.b.z.k.m.d.t.d.z.z.v.l', 'kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL') == True\nassert sat('.n.x.d.n.m.r.z.t.x.t.d.t.h.l.t.h.t.x.t.j.l.q.n.t.x.t', 'NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE') == True\nassert sat('.m.k.w.n.m.n.q.p.c.v', 'MEkUWonymYNAQUypEcIv') == True\nassert sat('.p.r.b.l.m.s', '') == False", "entry_fn_name": "sat"}
{"id": "219", "text": "Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\ni2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.", "solution": "def sat(squares: List[List[int]], m, n, target):\n    covered = []\n    for (i1, j1, i2, j2) in squares:\n        if not (0 <= i1 <= i2 < m and 0 <= j1 <= j2 < n and (j2 - j1 + i2 - i1 == 1)):\n            return False\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target", "title": "TP3/DominoTile", "testing_code": "assert sat([[0, 0, 1, 0], [0, 1, 1, 1], [0, 2, 1, 2], [0, 3, 1, 3], [0, 4, 1, 4], [2, 0, 3, 0], [2, 1, 3, 1], [2, 2, 3, 2], [2, 3, 3, 3], [2, 4, 3, 4], [4, 0, 5, 0], [4, 1, 5, 1], [4, 2, 5, 2], [4, 3, 5, 3], [4, 4, 5, 4], [6, 0, 7, 0], [6, 1, 7, 1], [6, 2, 7, 2], [6, 3, 7, 3], [6, 4, 7, 4], [8, 0, 9, 0], [8, 1, 9, 1], [8, 2, 9, 2], [8, 3, 9, 3], [8, 4, 9, 4]], 10, 5, 50) == True\nassert sat([[0, 0, 1, 0], [0, 1, 1, 1], [0, 2, 1, 2], [0, 3, 1, 3], [0, 4, 1, 4], [0, 5, 1, 5], [0, 6, 1, 6], [0, 7, 1, 7], [0, 8, 1, 8], [0, 9, 1, 9], [0, 10, 1, 10], [0, 11, 1, 11], [2, 0, 3, 0], [2, 1, 3, 1], [2, 2, 3, 2], [2, 3, 3, 3], [2, 4, 3, 4], [2, 5, 3, 5], [2, 6, 3, 6], [2, 7, 3, 7], [2, 8, 3, 8], [2, 9, 3, 9], [2, 10, 3, 10], [2, 11, 3, 11], [4, 0, 5, 0], [4, 1, 5, 1], [4, 2, 5, 2], [4, 3, 5, 3], [4, 4, 5, 4], [4, 5, 5, 5], [4, 6, 5, 6], [4, 7, 5, 7], [4, 8, 5, 8], [4, 9, 5, 9], [4, 10, 5, 10], [4, 11, 5, 11], [6, 0, 7, 0], [6, 1, 7, 1], [6, 2, 7, 2], [6, 3, 7, 3], [6, 4, 7, 4], [6, 5, 7, 5], [6, 6, 7, 6], [6, 7, 7, 7], [6, 8, 7, 8], [6, 9, 7, 9], [6, 10, 7, 10], [6, 11, 7, 11], [8, 0, 9, 0], [8, 1, 9, 1], [8, 2, 9, 2], [8, 3, 9, 3], [8, 4, 9, 4], [8, 5, 9, 5], [8, 6, 9, 6], [8, 7, 9, 7], [8, 8, 9, 8], [8, 9, 9, 9], [8, 10, 9, 10], [8, 11, 9, 11], [10, 0, 11, 0], [10, 1, 11, 1], [10, 2, 11, 2], [10, 3, 11, 3], [10, 4, 11, 4], [10, 5, 11, 5], [10, 6, 11, 6], [10, 7, 11, 7], [10, 8, 11, 8], [10, 9, 11, 9], [10, 10, 11, 10], [10, 11, 11, 11], [12, 0, 13, 0], [12, 1, 13, 1], [12, 2, 13, 2], [12, 3, 13, 3], [12, 4, 13, 4], [12, 5, 13, 5], [12, 6, 13, 6], [12, 7, 13, 7], [12, 8, 13, 8], [12, 9, 13, 9], [12, 10, 13, 10], [12, 11, 13, 11], [14, 0, 15, 0], [14, 1, 15, 1], [14, 2, 15, 2], [14, 3, 15, 3], [14, 4, 15, 4], [14, 5, 15, 5], [14, 6, 15, 6], [14, 7, 15, 7], [14, 8, 15, 8], [14, 9, 15, 9], [14, 10, 15, 10], [14, 11, 15, 11], [16, 0, 17, 0], [16, 1, 17, 1], [16, 2, 17, 2], [16, 3, 17, 3], [16, 4, 17, 4], [16, 5, 17, 5], [16, 6, 17, 6], [16, 7, 17, 7], [16, 8, 17, 8], [16, 9, 17, 9], [16, 10, 17, 10], [16, 11, 17, 11], [18, 0, 19, 0], [18, 1, 19, 1], [18, 2, 19, 2], [18, 3, 19, 3], [18, 4, 19, 4], [18, 5, 19, 5], [18, 6, 19, 6], [18, 7, 19, 7], [18, 8, 19, 8], [18, 9, 19, 9], [18, 10, 19, 10], [18, 11, 19, 11], [20, 0, 21, 0], [20, 1, 21, 1], [20, 2, 21, 2], [20, 3, 21, 3], [20, 4, 21, 4], [20, 5, 21, 5], [20, 6, 21, 6], [20, 7, 21, 7], [20, 8, 21, 8], [20, 9, 21, 9], [20, 10, 21, 10], [20, 11, 21, 11], [22, 0, 23, 0], [22, 1, 23, 1], [22, 2, 23, 2], [22, 3, 23, 3], [22, 4, 23, 4], [22, 5, 23, 5], [22, 6, 23, 6], [22, 7, 23, 7], [22, 8, 23, 8], [22, 9, 23, 9], [22, 10, 23, 10], [22, 11, 23, 11], [24, 0, 25, 0], [24, 1, 25, 1], [24, 2, 25, 2], [24, 3, 25, 3], [24, 4, 25, 4], [24, 5, 25, 5], [24, 6, 25, 6], [24, 7, 25, 7], [24, 8, 25, 8], [24, 9, 25, 9], [24, 10, 25, 10], [24, 11, 25, 11], [26, 0, 27, 0], [26, 1, 27, 1], [26, 2, 27, 2], [26, 3, 27, 3], [26, 4, 27, 4], [26, 5, 27, 5], [26, 6, 27, 6], [26, 7, 27, 7], [26, 8, 27, 8], [26, 9, 27, 9], [26, 10, 27, 10], [26, 11, 27, 11], [28, 0, 29, 0], [28, 1, 29, 1], [28, 2, 29, 2], [28, 3, 29, 3], [28, 4, 29, 4], [28, 5, 29, 5], [28, 6, 29, 6], [28, 7, 29, 7], [28, 8, 29, 8], [28, 9, 29, 9], [28, 10, 29, 10], [28, 11, 29, 11]], 30, 12, 360) == True\nassert sat([[0, 0, 1, 0], [0, 1, 1, 1], [0, 2, 1, 2], [0, 3, 1, 3], [0, 4, 1, 4], [0, 5, 1, 5], [0, 6, 1, 6], [0, 7, 1, 7], [0, 8, 1, 8], [0, 9, 1, 9], [0, 10, 1, 10], [0, 11, 1, 11], [0, 12, 1, 12], [0, 13, 1, 13], [0, 14, 1, 14], [0, 15, 1, 15], [0, 16, 1, 16], [0, 17, 1, 17], [0, 18, 1, 18], [0, 19, 1, 19], [0, 20, 1, 20], [0, 21, 1, 21], [0, 22, 1, 22], [0, 23, 1, 23], [0, 24, 1, 24], [2, 0, 3, 0], [2, 1, 3, 1], [2, 2, 3, 2], [2, 3, 3, 3], [2, 4, 3, 4], [2, 5, 3, 5], [2, 6, 3, 6], [2, 7, 3, 7], [2, 8, 3, 8], [2, 9, 3, 9], [2, 10, 3, 10], [2, 11, 3, 11], [2, 12, 3, 12], [2, 13, 3, 13], [2, 14, 3, 14], [2, 15, 3, 15], [2, 16, 3, 16], [2, 17, 3, 17], [2, 18, 3, 18], [2, 19, 3, 19], [2, 20, 3, 20], [2, 21, 3, 21], [2, 22, 3, 22], [2, 23, 3, 23], [2, 24, 3, 24], [4, 0, 5, 0], [4, 1, 5, 1], [4, 2, 5, 2], [4, 3, 5, 3], [4, 4, 5, 4], [4, 5, 5, 5], [4, 6, 5, 6], [4, 7, 5, 7], [4, 8, 5, 8], [4, 9, 5, 9], [4, 10, 5, 10], [4, 11, 5, 11], [4, 12, 5, 12], [4, 13, 5, 13], [4, 14, 5, 14], [4, 15, 5, 15], [4, 16, 5, 16], [4, 17, 5, 17], [4, 18, 5, 18], [4, 19, 5, 19], [4, 20, 5, 20], [4, 21, 5, 21], [4, 22, 5, 22], [4, 23, 5, 23], [4, 24, 5, 24], [6, 0, 7, 0], [6, 1, 7, 1], [6, 2, 7, 2], [6, 3, 7, 3], [6, 4, 7, 4], [6, 5, 7, 5], [6, 6, 7, 6], [6, 7, 7, 7], [6, 8, 7, 8], [6, 9, 7, 9], [6, 10, 7, 10], [6, 11, 7, 11], [6, 12, 7, 12], [6, 13, 7, 13], [6, 14, 7, 14], [6, 15, 7, 15], [6, 16, 7, 16], [6, 17, 7, 17], [6, 18, 7, 18], [6, 19, 7, 19], [6, 20, 7, 20], [6, 21, 7, 21], [6, 22, 7, 22], [6, 23, 7, 23], [6, 24, 7, 24], [8, 0, 9, 0], [8, 1, 9, 1], [8, 2, 9, 2], [8, 3, 9, 3], [8, 4, 9, 4], [8, 5, 9, 5], [8, 6, 9, 6], [8, 7, 9, 7], [8, 8, 9, 8], [8, 9, 9, 9], [8, 10, 9, 10], [8, 11, 9, 11], [8, 12, 9, 12], [8, 13, 9, 13], [8, 14, 9, 14], [8, 15, 9, 15], [8, 16, 9, 16], [8, 17, 9, 17], [8, 18, 9, 18], [8, 19, 9, 19], [8, 20, 9, 20], [8, 21, 9, 21], [8, 22, 9, 22], [8, 23, 9, 23], [8, 24, 9, 24], [10, 0, 11, 0], [10, 1, 11, 1], [10, 2, 11, 2], [10, 3, 11, 3], [10, 4, 11, 4], [10, 5, 11, 5], [10, 6, 11, 6], [10, 7, 11, 7], [10, 8, 11, 8], [10, 9, 11, 9], [10, 10, 11, 10], [10, 11, 11, 11], [10, 12, 11, 12], [10, 13, 11, 13], [10, 14, 11, 14], [10, 15, 11, 15], [10, 16, 11, 16], [10, 17, 11, 17], [10, 18, 11, 18], [10, 19, 11, 19], [10, 20, 11, 20], [10, 21, 11, 21], [10, 22, 11, 22], [10, 23, 11, 23], [10, 24, 11, 24], [12, 0, 13, 0], [12, 1, 13, 1], [12, 2, 13, 2], [12, 3, 13, 3], [12, 4, 13, 4], [12, 5, 13, 5], [12, 6, 13, 6], [12, 7, 13, 7], [12, 8, 13, 8], [12, 9, 13, 9], [12, 10, 13, 10], [12, 11, 13, 11], [12, 12, 13, 12], [12, 13, 13, 13], [12, 14, 13, 14], [12, 15, 13, 15], [12, 16, 13, 16], [12, 17, 13, 17], [12, 18, 13, 18], [12, 19, 13, 19], [12, 20, 13, 20], [12, 21, 13, 21], [12, 22, 13, 22], [12, 23, 13, 23], [12, 24, 13, 24], [14, 0, 15, 0], [14, 1, 15, 1], [14, 2, 15, 2], [14, 3, 15, 3], [14, 4, 15, 4], [14, 5, 15, 5], [14, 6, 15, 6], [14, 7, 15, 7], [14, 8, 15, 8], [14, 9, 15, 9], [14, 10, 15, 10], [14, 11, 15, 11], [14, 12, 15, 12], [14, 13, 15, 13], [14, 14, 15, 14], [14, 15, 15, 15], [14, 16, 15, 16], [14, 17, 15, 17], [14, 18, 15, 18], [14, 19, 15, 19], [14, 20, 15, 20], [14, 21, 15, 21], [14, 22, 15, 22], [14, 23, 15, 23], [14, 24, 15, 24], [16, 0, 17, 0], [16, 1, 17, 1], [16, 2, 17, 2], [16, 3, 17, 3], [16, 4, 17, 4], [16, 5, 17, 5], [16, 6, 17, 6], [16, 7, 17, 7], [16, 8, 17, 8], [16, 9, 17, 9], [16, 10, 17, 10], [16, 11, 17, 11], [16, 12, 17, 12], [16, 13, 17, 13], [16, 14, 17, 14], [16, 15, 17, 15], [16, 16, 17, 16], [16, 17, 17, 17], [16, 18, 17, 18], [16, 19, 17, 19], [16, 20, 17, 20], [16, 21, 17, 21], [16, 22, 17, 22], [16, 23, 17, 23], [16, 24, 17, 24], [18, 0, 19, 0], [18, 1, 19, 1], [18, 2, 19, 2], [18, 3, 19, 3], [18, 4, 19, 4], [18, 5, 19, 5], [18, 6, 19, 6], [18, 7, 19, 7], [18, 8, 19, 8], [18, 9, 19, 9], [18, 10, 19, 10], [18, 11, 19, 11], [18, 12, 19, 12], [18, 13, 19, 13], [18, 14, 19, 14], [18, 15, 19, 15], [18, 16, 19, 16], [18, 17, 19, 17], [18, 18, 19, 18], [18, 19, 19, 19], [18, 20, 19, 20], [18, 21, 19, 21], [18, 22, 19, 22], [18, 23, 19, 23], [18, 24, 19, 24], [20, 0, 21, 0], [20, 1, 21, 1], [20, 2, 21, 2], [20, 3, 21, 3], [20, 4, 21, 4], [20, 5, 21, 5], [20, 6, 21, 6], [20, 7, 21, 7], [20, 8, 21, 8], [20, 9, 21, 9], [20, 10, 21, 10], [20, 11, 21, 11], [20, 12, 21, 12], [20, 13, 21, 13], [20, 14, 21, 14], [20, 15, 21, 15], [20, 16, 21, 16], [20, 17, 21, 17], [20, 18, 21, 18], [20, 19, 21, 19], [20, 20, 21, 20], [20, 21, 21, 21], [20, 22, 21, 22], [20, 23, 21, 23], [20, 24, 21, 24], [22, 0, 23, 0], [22, 1, 23, 1], [22, 2, 23, 2], [22, 3, 23, 3], [22, 4, 23, 4], [22, 5, 23, 5], [22, 6, 23, 6], [22, 7, 23, 7], [22, 8, 23, 8], [22, 9, 23, 9], [22, 10, 23, 10], [22, 11, 23, 11], [22, 12, 23, 12], [22, 13, 23, 13], [22, 14, 23, 14], [22, 15, 23, 15], [22, 16, 23, 16], [22, 17, 23, 17], [22, 18, 23, 18], [22, 19, 23, 19], [22, 20, 23, 20], [22, 21, 23, 21], [22, 22, 23, 22], [22, 23, 23, 23], [22, 24, 23, 24], [24, 0, 25, 0], [24, 1, 25, 1], [24, 2, 25, 2], [24, 3, 25, 3], [24, 4, 25, 4], [24, 5, 25, 5], [24, 6, 25, 6], [24, 7, 25, 7], [24, 8, 25, 8], [24, 9, 25, 9], [24, 10, 25, 10], [24, 11, 25, 11], [24, 12, 25, 12], [24, 13, 25, 13], [24, 14, 25, 14], [24, 15, 25, 15], [24, 16, 25, 16], [24, 17, 25, 17], [24, 18, 25, 18], [24, 19, 25, 19], [24, 20, 25, 20], [24, 21, 25, 21], [24, 22, 25, 22], [24, 23, 25, 23], [24, 24, 25, 24], [26, 0, 27, 0], [26, 1, 27, 1], [26, 2, 27, 2], [26, 3, 27, 3], [26, 4, 27, 4], [26, 5, 27, 5], [26, 6, 27, 6], [26, 7, 27, 7], [26, 8, 27, 8], [26, 9, 27, 9], [26, 10, 27, 10], [26, 11, 27, 11], [26, 12, 27, 12], [26, 13, 27, 13], [26, 14, 27, 14], [26, 15, 27, 15], [26, 16, 27, 16], [26, 17, 27, 17], [26, 18, 27, 18], [26, 19, 27, 19], [26, 20, 27, 20], [26, 21, 27, 21], [26, 22, 27, 22], [26, 23, 27, 23], [26, 24, 27, 24], [28, 0, 29, 0], [28, 1, 29, 1], [28, 2, 29, 2], [28, 3, 29, 3], [28, 4, 29, 4], [28, 5, 29, 5], [28, 6, 29, 6], [28, 7, 29, 7], [28, 8, 29, 8], [28, 9, 29, 9], [28, 10, 29, 10], [28, 11, 29, 11], [28, 12, 29, 12], [28, 13, 29, 13], [28, 14, 29, 14], [28, 15, 29, 15], [28, 16, 29, 16], [28, 17, 29, 17], [28, 18, 29, 18], [28, 19, 29, 19], [28, 20, 29, 20], [28, 21, 29, 21], [28, 22, 29, 22], [28, 23, 29, 23], [28, 24, 29, 24], [30, 0, 31, 0], [30, 1, 31, 1], [30, 2, 31, 2], [30, 3, 31, 3], [30, 4, 31, 4], [30, 5, 31, 5], [30, 6, 31, 6], [30, 7, 31, 7], [30, 8, 31, 8], [30, 9, 31, 9], [30, 10, 31, 10], [30, 11, 31, 11], [30, 12, 31, 12], [30, 13, 31, 13], [30, 14, 31, 14], [30, 15, 31, 15], [30, 16, 31, 16], [30, 17, 31, 17], [30, 18, 31, 18], [30, 19, 31, 19], [30, 20, 31, 20], [30, 21, 31, 21], [30, 22, 31, 22], [30, 23, 31, 23], [30, 24, 31, 24], [32, 0, 33, 0], [32, 1, 33, 1], [32, 2, 33, 2], [32, 3, 33, 3], [32, 4, 33, 4], [32, 5, 33, 5], [32, 6, 33, 6], [32, 7, 33, 7], [32, 8, 33, 8], [32, 9, 33, 9], [32, 10, 33, 10], [32, 11, 33, 11], [32, 12, 33, 12], [32, 13, 33, 13], [32, 14, 33, 14], [32, 15, 33, 15], [32, 16, 33, 16], [32, 17, 33, 17], [32, 18, 33, 18], [32, 19, 33, 19], [32, 20, 33, 20], [32, 21, 33, 21], [32, 22, 33, 22], [32, 23, 33, 23], [32, 24, 33, 24]], 34, 25, 850) == True\nassert sat([[0, 0, 0, 1], [0, 2, 0, 3], [0, 4, 0, 5], [0, 6, 0, 7], [0, 8, 0, 9], [0, 10, 0, 11], [1, 0, 1, 1], [1, 2, 1, 3], [1, 4, 1, 5], [1, 6, 1, 7], [1, 8, 1, 9], [1, 10, 1, 11], [2, 0, 2, 1], [2, 2, 2, 3], [2, 4, 2, 5], [2, 6, 2, 7], [2, 8, 2, 9], [2, 10, 2, 11], [3, 0, 3, 1], [3, 2, 3, 3], [3, 4, 3, 5], [3, 6, 3, 7], [3, 8, 3, 9], [3, 10, 3, 11], [4, 0, 4, 1], [4, 2, 4, 3], [4, 4, 4, 5], [4, 6, 4, 7], [4, 8, 4, 9], [4, 10, 4, 11], [5, 0, 5, 1], [5, 2, 5, 3], [5, 4, 5, 5], [5, 6, 5, 7], [5, 8, 5, 9], [5, 10, 5, 11], [6, 0, 6, 1], [6, 2, 6, 3], [6, 4, 6, 5], [6, 6, 6, 7], [6, 8, 6, 9], [6, 10, 6, 11], [7, 0, 7, 1], [7, 2, 7, 3], [7, 4, 7, 5], [7, 6, 7, 7], [7, 8, 7, 9], [7, 10, 7, 11], [8, 0, 8, 1], [8, 2, 8, 3], [8, 4, 8, 5], [8, 6, 8, 7], [8, 8, 8, 9], [8, 10, 8, 11], [9, 0, 9, 1], [9, 2, 9, 3], [9, 4, 9, 5], [9, 6, 9, 7], [9, 8, 9, 9], [9, 10, 9, 11], [10, 0, 10, 1], [10, 2, 10, 3], [10, 4, 10, 5], [10, 6, 10, 7], [10, 8, 10, 9], [10, 10, 10, 11], [11, 0, 11, 1], [11, 2, 11, 3], [11, 4, 11, 5], [11, 6, 11, 7], [11, 8, 11, 9], [11, 10, 11, 11], [12, 0, 12, 1], [12, 2, 12, 3], [12, 4, 12, 5], [12, 6, 12, 7], [12, 8, 12, 9], [12, 10, 12, 11], [13, 0, 13, 1], [13, 2, 13, 3], [13, 4, 13, 5], [13, 6, 13, 7], [13, 8, 13, 9], [13, 10, 13, 11], [14, 0, 14, 1], [14, 2, 14, 3], [14, 4, 14, 5], [14, 6, 14, 7], [14, 8, 14, 9], [14, 10, 14, 11], [15, 0, 15, 1], [15, 2, 15, 3], [15, 4, 15, 5], [15, 6, 15, 7], [15, 8, 15, 9], [15, 10, 15, 11], [16, 0, 16, 1], [16, 2, 16, 3], [16, 4, 16, 5], [16, 6, 16, 7], [16, 8, 16, 9], [16, 10, 16, 11], [17, 0, 17, 1], [17, 2, 17, 3], [17, 4, 17, 5], [17, 6, 17, 7], [17, 8, 17, 9], [17, 10, 17, 11], [18, 0, 18, 1], [18, 2, 18, 3], [18, 4, 18, 5], [18, 6, 18, 7], [18, 8, 18, 9], [18, 10, 18, 11], [19, 0, 19, 1], [19, 2, 19, 3], [19, 4, 19, 5], [19, 6, 19, 7], [19, 8, 19, 9], [19, 10, 19, 11], [20, 0, 20, 1], [20, 2, 20, 3], [20, 4, 20, 5], [20, 6, 20, 7], [20, 8, 20, 9], [20, 10, 20, 11], [21, 0, 21, 1], [21, 2, 21, 3], [21, 4, 21, 5], [21, 6, 21, 7], [21, 8, 21, 9], [21, 10, 21, 11], [22, 0, 22, 1], [22, 2, 22, 3], [22, 4, 22, 5], [22, 6, 22, 7], [22, 8, 22, 9], [22, 10, 22, 11], [23, 0, 23, 1], [23, 2, 23, 3], [23, 4, 23, 5], [23, 6, 23, 7], [23, 8, 23, 9], [23, 10, 23, 11], [24, 0, 24, 1], [24, 2, 24, 3], [24, 4, 24, 5], [24, 6, 24, 7], [24, 8, 24, 9], [24, 10, 24, 11], [25, 0, 25, 1], [25, 2, 25, 3], [25, 4, 25, 5], [25, 6, 25, 7], [25, 8, 25, 9], [25, 10, 25, 11], [26, 0, 26, 1], [26, 2, 26, 3], [26, 4, 26, 5], [26, 6, 26, 7], [26, 8, 26, 9], [26, 10, 26, 11], [27, 0, 27, 1], [27, 2, 27, 3], [27, 4, 27, 5], [27, 6, 27, 7], [27, 8, 27, 9], [27, 10, 27, 11], [28, 0, 28, 1], [28, 2, 28, 3], [28, 4, 28, 5], [28, 6, 28, 7], [28, 8, 28, 9], [28, 10, 28, 11], [29, 0, 29, 1], [29, 2, 29, 3], [29, 4, 29, 5], [29, 6, 29, 7], [29, 8, 29, 9], [29, 10, 29, 11], [30, 0, 30, 1], [30, 2, 30, 3], [30, 4, 30, 5], [30, 6, 30, 7], [30, 8, 30, 9], [30, 10, 30, 11], [31, 0, 31, 1], [31, 2, 31, 3], [31, 4, 31, 5], [31, 6, 31, 7], [31, 8, 31, 9], [31, 10, 31, 11], [32, 0, 32, 1], [32, 2, 32, 3], [32, 4, 32, 5], [32, 6, 32, 7], [32, 8, 32, 9], [32, 10, 32, 11], [33, 0, 33, 1], [33, 2, 33, 3], [33, 4, 33, 5], [33, 6, 33, 7], [33, 8, 33, 9], [33, 10, 33, 11], [34, 0, 34, 1], [34, 2, 34, 3], [34, 4, 34, 5], [34, 6, 34, 7], [34, 8, 34, 9], [34, 10, 34, 11], [35, 0, 35, 1], [35, 2, 35, 3], [35, 4, 35, 5], [35, 6, 35, 7], [35, 8, 35, 9], [35, 10, 35, 11], [36, 0, 36, 1], [36, 2, 36, 3], [36, 4, 36, 5], [36, 6, 36, 7], [36, 8, 36, 9], [36, 10, 36, 11], [37, 0, 37, 1], [37, 2, 37, 3], [37, 4, 37, 5], [37, 6, 37, 7], [37, 8, 37, 9], [37, 10, 37, 11], [38, 0, 38, 1], [38, 2, 38, 3], [38, 4, 38, 5], [38, 6, 38, 7], [38, 8, 38, 9], [38, 10, 38, 11], [39, 0, 39, 1], [39, 2, 39, 3], [39, 4, 39, 5], [39, 6, 39, 7], [39, 8, 39, 9], [39, 10, 39, 11], [40, 0, 40, 1], [40, 2, 40, 3], [40, 4, 40, 5], [40, 6, 40, 7], [40, 8, 40, 9], [40, 10, 40, 11]], 41, 12, 492) == True\nassert sat([], 10, 5, 50) == False", "entry_fn_name": "sat"}
{"id": "220", "text": "Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\nfinal value is the target value.\nSample Input:\nops = [\"x++\", \"--x\", \"--x\"]\ntarget = 12\nSample Output:\n13", "solution": "def sat(n: int, ops, target):\n    for op in ops:\n        if op in ['++x', 'x++']:\n            n += 1\n        else:\n            if not op in ['--x', 'x--']:\n                return False\n            n -= 1\n    return n == target", "title": "TP3/IncDec", "testing_code": "assert sat(19143213, ['x++', '--x', '--x'], 19143212) == True\nassert sat(88812, ['x++', '++x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x--', 'x--', '--x', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', 'x--', 'x++', 'x--', 'x--', '--x', '++x', 'x--', '--x', 'x++', 'x--', 'x++', '++x', '++x', 'x++', '--x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x++', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '++x', 'x++', 'x++', '++x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', '--x', 'x--', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '++x', '--x', '--x', '++x', '--x', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '--x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x++', '--x', 'x++', 'x++', 'x--', 'x--', 'x--', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', '++x', 'x++', '++x', '++x', '++x', '--x', 'x--', 'x--', '--x', '--x', '++x', '++x', '--x', '++x', '--x', 'x--', 'x--', '--x', '--x', '--x', '--x', '--x', 'x++', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x++', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', '--x', '--x', '++x', '++x', 'x--', '++x', '--x', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x--'], 88808) == True\nassert sat(28149, ['x--', 'x--', '++x', '--x', '--x', 'x--', '--x', '++x', 'x++', 'x++', 'x--', 'x++', '++x', '--x', '++x', '--x', 'x++', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', '--x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', '++x', '--x', '--x', '++x', '--x', '--x', 'x++', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', '++x', 'x++', '++x', 'x++', 'x++', 'x++', 'x--', '++x', '--x', '--x', 'x++', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', 'x++', 'x++', '--x', '--x', 'x--', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '++x', 'x++', 'x++', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', 'x--', '++x', '++x', '--x', 'x++', '++x', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', 'x--', '++x', '++x', 'x++', '--x', '++x', 'x--', '--x', 'x--', '++x', 'x--', 'x--', '++x', '++x', 'x++', 'x--', '++x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', '--x', '++x', 'x--', '--x', '++x', 'x--', '++x', 'x--', 'x--', '++x', '--x', '--x', '++x', '--x', 'x++', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x--', 'x++', '++x', 'x--', 'x++', '--x', '++x', '++x', '++x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', 'x--', 'x++', '--x', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', '--x', '++x', '--x', 'x++', 'x++', 'x++', 'x--', 'x++', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x++', '++x', 'x++', '++x', '++x', '--x', 'x++', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x--', '--x', 'x--', '--x', 'x++', 'x--', '++x', 'x--', '++x', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x++', 'x++', '++x', '++x', '++x', '++x', '++x', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', '--x', 'x++', '++x', '--x', 'x++', '--x', '--x', 'x++', '++x', 'x--', 'x--', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x++', '++x', '--x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '--x', '--x', 'x--', '++x', '++x', '++x', '++x', '++x', 'x++', '--x', '++x', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x--', '++x', '++x', 'x++', 'x--', 'x--', '++x', '--x', '--x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x++', '++x', '++x', 'x--', '--x', '--x', '++x', 'x++', '--x', 'x--', 'x--', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x++', 'x++', 'x--', '--x', 'x++', 'x--', 'x++', 'x++', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', '--x', 'x--', '--x', '++x', '--x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', '++x', '--x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', '++x', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x--', 'x++', 'x++', '++x', 'x++', 'x++', 'x++', 'x++', '++x', 'x--', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', '--x', '--x', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', '--x', 'x++', 'x--', '--x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '--x', '++x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x--', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', 'x--', '++x', 'x--', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++'], 28110) == True\nassert sat(82833, ['--x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '--x', '--x', '--x', 'x--', '--x', '--x', '++x', '++x', '++x', 'x++', '--x', 'x--', '++x', 'x--', 'x--', 'x++', 'x--', 'x++', 'x++', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '++x', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', 'x--', '++x', '++x', '++x', 'x++', '++x', '--x', '--x', 'x++', '++x', '++x', 'x++', '++x', '--x', '++x', '--x', 'x--', '++x', '++x', '++x', '++x', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '++x', 'x--', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x--', '++x', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '--x', '++x', 'x--', 'x--', '--x', 'x--', 'x--', 'x++', '--x', 'x++', '++x', '--x', 'x--', '--x', '--x', 'x--', 'x--', '--x', '++x', 'x--', '++x', '++x', '++x', 'x--', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', 'x++', '++x', '--x', '++x', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', '++x', '--x', 'x++', '--x', '--x', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', 'x++', 'x++', 'x--', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x--', '--x', '++x', '--x', '--x', '++x', 'x++', '--x', 'x++', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x++', 'x++', '++x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x++', 'x--', '++x', '++x', 'x--', 'x--', '--x', 'x--', '--x', 'x--', 'x--', '++x', '++x', 'x--', '--x', 'x++', '--x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', 'x--', '--x', 'x++'], 82823) == True\nassert sat(61814, ['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], 61813) == True\nassert sat(19143213, [], 19143212) == False", "entry_fn_name": "sat"}
{"id": "221", "text": "Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.", "solution": "def sat(n: int, s, t):\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False", "title": "TP3/CompareInAnyCase", "testing_code": "assert sat(0, 'aaAab', 'aAaaB') == True\nassert sat(0, 'JyNuTexTETiGAVIC', 'JynUTEXTetigAViC') == True\nassert sat(-1, 'tExTYtOHahekomArof', 'TExTYTohaHeKomryGUSeteXTUrYgir') == True\nassert sat(-1, 'RObAQuYK', 'robaQUYKkuLY') == True\nassert sat(1, 'DUTeX', 'dutdE') == True\nassert sat(0, '', 'aAaaB') == False\nassert sat(0, 'aaAab', '') == False", "entry_fn_name": "sat"}
{"id": "222", "text": "We are given a 5x5 matrix with a single 1 like:\n0 0 0 0 0\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\nFind a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\nin \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap", "solution": "def sat(s: str, matrix, max_moves):\n    matrix = [m[:] for m in matrix]\n    for c in s:\n        if c in '01234':\n            i = '01234'.index(c)\n            (matrix[i], matrix[i + 1]) = (matrix[i + 1], matrix[i])\n        if c in 'abcde':\n            j = 'abcde'.index(c)\n            for row in matrix:\n                (row[j], row[j + 1]) = (row[j + 1], row[j])\n    return len(s) <= max_moves and matrix[2][2] == 1", "title": "TP3/SlidingOne", "testing_code": "assert sat('1dc', [[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3) == True\nassert sat('01ab', [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 4) == True\nassert sat('01b', [[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3) == True\nassert sat('01', [[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2) == True\nassert sat('', [[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3) == False", "entry_fn_name": "sat"}
{"id": "223", "text": "Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3", "solution": "def sat(s: str, inp):\n    return all((s.count(c) == inp.count(c) for c in inp + s)) and all((s[i - 2] <= s[i] for i in range(2, len(s), 2)))", "title": "TP3/SortPlusPlus", "testing_code": "assert sat('1+1+1+1+1+2+2+2+3+3+3', '1+1+3+1+3+2+2+1+3+1+2') == True\nassert sat('1+1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3', '2+3+1+2+2+2+1+1+1+3+2+3+3+3+2+3+1+3+3+2+1+2+3+1+2+1+3+2+3+1+1+2+2+3+1+2+2+1+3+2+3+2+3+2+2') == True\nassert sat('2+2+3', '3+2+2') == True\nassert sat('1+1+1+1+2+2+2+2+2+3+3+3+3+3+3', '3+2+1+1+3+3+2+2+2+3+2+3+3+1+1') == True\nassert sat('1+1+1+1+1+1+1+1+1+1+1+2+2+2+2+2+2+2+2+2+2+2+2+2+2+2+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3+3', '2+2+2+1+1+1+2+1+3+3+3+3+2+2+2+1+2+3+3+1+3+2+3+2+3+2+2+3+2+3+1+2+1+3+3+2+3+1+1+3+3+1') == True\nassert sat('1+1+1+1+1+2+2+2+3+3+3', '') == False\nassert sat('', '1+1+3+1+3+2+2+1+3+1+2') == False", "entry_fn_name": "sat"}
{"id": "224", "text": "Capitalize the first letter of word", "solution": "def sat(s: str, word):\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        elif s[i] != word[i]:\n            return False\n    return True", "title": "TP3/CapitalizeFirstLetter", "testing_code": "assert sat('Konjac', 'konjac') == True\nassert sat('Nojapoxe', 'nojapoxe') == True\nassert sat('Silon', 'silon') == True\nassert sat('Fekovo', 'fekovo') == True\nassert sat('Mo', 'mo') == True\nassert sat('Silon', '1') == False\nassert sat('Mo', '1') == False\nassert sat('1', 'mo') == False\nassert sat('Silon', '1') == False\nassert sat('Mo', '1') == False\nassert sat('1', 'mo') == False\nassert sat('Mo', '1') == False\nassert sat('1', 'mo') == False\nassert sat('Silon', '1') == False\nassert sat('1', 'silon') == False", "entry_fn_name": "sat"}
{"id": "225", "text": "You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\nconsecutive characters.\nSample Input:\n`\"abbbc\"`\nSample Output:\n`\"abc\"`", "solution": "def sat(t: str, s, target):\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all((t[i] != t[i + 1] for i in range(len(t) - 1)))", "title": "TP3/LongestSubsetString", "testing_code": "assert sat('abcabac', 'abbbcabbac', 7) == True\nassert sat('cbcbacacacacbcacbacbabacabcbcacbacabcabacba', 'cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa', 43) == True\nassert sat('bcb', 'bcb', 3) == True\nassert sat('c', 'c', 1) == True\nassert sat('bcbcaba', 'bcbcabba', 7) == True\nassert sat('', 'abbbcabbac', 7) == False", "entry_fn_name": "sat"}
{"id": "226", "text": "You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\nall 0's or all 1's.\nSample Input:\ns = 0000111111100000, k = 5\nSample Output:\n4\n(or 5 or 6 or 11)", "solution": "def sat(n: int, s, k):\n    return s[n:n + k] == s[n] * k", "title": "TP3/FindHomogeneousSubstring", "testing_code": "assert sat(6, '0000101111111000010', 5) == True\nassert sat(0, '000000', 4) == True\nassert sat(4, '001100000000000000000000101010100111101110000100', 18) == True\nassert sat(13, '10100111100110001010011110100111010110010000101101110100010', 3) == True\nassert sat(54, '010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101', 18) == True\nassert sat(0, '1', 4) == False\nassert sat(0, '1', 4) == False\nassert sat(0, '1', 3) == False\nassert sat(0, '1', 5) == False\nassert sat(0, '1', 18) == False\nassert sat(0, '1', 18) == False\nassert sat(0, '1', 5) == False\nassert sat(0, '1', 5) == False\nassert sat(0, '1', 4) == False\nassert sat(0, '1', 5) == False", "entry_fn_name": "sat"}
{"id": "227", "text": "Find the missing triple of integers to make them all add up to 0 coordinatewise", "solution": "def sat(delta: List[int], nums):\n    return all((sum((vec[i] for vec in nums)) + delta[i] == 0 for i in range(3)))", "title": "TP3/Triple0", "testing_code": "assert sat([-27, -2, -61], [[1, 2, 3], [9, -2, 8], [17, 2, 50]]) == True\nassert sat([145, -72, -301], [[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]) == True\nassert sat([-21, 14, 110], [[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]) == True\nassert sat([56, 310, -215], [[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]) == True\nassert sat([-167, 8, -33], [[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]) == True\nassert sat([-27, -2, -61], []) == False", "entry_fn_name": "sat"}
{"id": "228", "text": "Find n such that n + a == b * (the sum of the first c integers)", "solution": "def sat(n: int, a, b, c):\n    return n + a == sum([b * i for i in range(c)])", "title": "TP3/TotalDifference", "testing_code": "assert sat(18983, 17, 100, 20) == True\nassert sat(25330, 62, 92, 24) == True\nassert sat(54036, 14, 50, 47) == True\nassert sat(4852, 62, 63, 13) == True\nassert sat(20641, 5, 31, 37) == True\nassert sat(5, 5, 92, 20) == False\nassert sat(5, 5, 50, 37) == False\nassert sat(5, 5, 31, 13) == False\nassert sat(5, 5, 31, 47) == False\nassert sat(5, 5, 63, 13) == False\nassert sat(5, 5, 92, 47) == False\nassert sat(5, 5, 31, 24) == False\nassert sat(5, 5, 50, 24) == False\nassert sat(5, 5, 63, 47) == False\nassert sat(5, 5, 63, 20) == False", "entry_fn_name": "sat"}
{"id": "229", "text": "Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.", "solution": "def sat(n: int, v, w):\n    for i in range(n):\n        if not v <= w:\n            return False\n        v *= 3\n        w *= 2\n    return v > w", "title": "TP3/TripleDouble", "testing_code": "assert sat(5, 17, 100) == True\nassert sat(7, 75129500, 979292947) == True\nassert sat(1, 609909721, 872375011) == True\nassert sat(3, 313946483, 806690290) == True\nassert sat(7, 54888266, 670740803) == True\nassert sat(3, 17, 5) == False\nassert sat(5, 17, 5) == False\nassert sat(7, 17, 5) == False\nassert sat(3, 17, 5) == False\nassert sat(1, 17, 5) == False\nassert sat(7, 17, 5) == False\nassert sat(7, 17, 5) == False\nassert sat(5, 17, 5) == False\nassert sat(1, 17, 5) == False\nassert sat(1, 17, 5) == False", "entry_fn_name": "sat"}
{"id": "230", "text": "Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\nthe zero, otherwise subtract 1.", "solution": "def sat(res: int, m, n):\n    for i in range(n):\n        m = m - 1 if m % 10 else m // 10\n    return res == m", "title": "TP3/RepeatDec", "testing_code": "assert sat(123457898765430, 1234578987654321, 4) == True\nassert sat(52891398375817839451, 52891398375817839454, 3) == True\nassert sat(22262059435814874052, 22262059435814874058, 6) == True\nassert sat(23602903522227899060, 23602903522227899062, 2) == True\nassert sat(2736881658223410406, 27368816582234104063, 4) == True\nassert sat(123457898765430, 5, 6) == False\nassert sat(123457898765430, 5, 4) == False\nassert sat(123457898765430, 5, 6) == False\nassert sat(123457898765430, 5, 3) == False\nassert sat(123457898765430, 5, 2) == False\nassert sat(123457898765430, 5, 3) == False\nassert sat(123457898765430, 5, 4) == False\nassert sat(123457898765430, 5, 2) == False\nassert sat(123457898765430, 5, 6) == False\nassert sat(123457898765430, 5, 4) == False", "entry_fn_name": "sat"}
{"id": "231", "text": "Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\np_{t+1} + \\sum_{i=1}^t p_i - m_i", "solution": "def sat(n: int, pairs):\n    if not sum((p - m for (p, m) in pairs)) == 0:\n        return False\n    tot = 0\n    success = False\n    for (p, m) in pairs:\n        tot -= m\n        tot += p\n        if not tot <= n:\n            return False\n        if tot == n:\n            success = True\n    return success", "title": "TP3/MaxDelta", "testing_code": "assert sat(9254359, [[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]) == True\nassert sat(2195918, [[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]) == True\nassert sat(2720508, [[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]) == True\nassert sat(0, [[0, 0]]) == True\nassert sat(2748619, [[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]) == True\nassert sat(9254359, []) == False", "entry_fn_name": "sat"}
{"id": "232", "text": "Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\ncapitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.", "solution": "def sat(s_case: str, s):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())", "title": "TP3/CommonCase", "testing_code": "assert sat('CANYOUTELLIFITHASMORECAPITALS', 'CanYouTellIfItHASmoreCAPITALS') == True\nassert sat('THUCYNICHIHIC', 'ThUcynICHiHIc') == True\nassert sat('rizip', 'riziP') == True\nassert sat('kanexajohibotipomyvokatumy', 'KANExAjoHiBotipomyVOkATuMY') == True\nassert sat('RAC', 'rAC') == True\nassert sat('CANYOUTELLIFITHASMORECAPITALS', '') == False\nassert sat('', 'CanYouTellIfItHASmoreCAPITALS') == False", "entry_fn_name": "sat"}
{"id": "233", "text": "Find increasing indices to make the substring \"substring", "solution": "def sat(inds: List[int], string):\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'substring'", "title": "TP3/Sssuubbstriiingg", "testing_code": "assert sat([1, 3, 5, 7, 8, 9, 10, 15, 16], 'Sssuubbstrissiingg') == True\nassert sat([0, 1, 4, 5, 7, 11, 12, 14, 16], 'su absItIstrilnvgenw') == True\nassert sat([0, 2, 3, 4, 9, 14, 16, 20, 22], 'sKubssB  tzCzPrZiL inCgN') == True\nassert sat([0, 1, 3, 4, 5, 6, 7, 9, 10], 'suUbstriPng') == True\nassert sat([0, 2, 4, 8, 12, 14, 15, 20, 23], 'stuqb VqsMJptxriWYe nmfgNfW') == True\nassert sat([], 'Sssuubbstrissiingg') == False", "entry_fn_name": "sat"}
{"id": "234", "text": "Find increasing indices to make the substring \"intelligent\" (with a surprise twist)", "solution": "def sat(inds: List[int], string):\n    return inds == sorted(inds) and ''.join((string[i] for i in inds)) == 'intelligent'", "title": "TP3/Sstriiinggssuubb", "testing_code": "assert sat([-10, -5, -1, 0, 2, 2, 3, 4, 7, 8, 12], 'enlightenment') == True\nassert sat([-11, -10, -8, -6, -4, -4, -3, -2, -1, 1, 3], 'inntGetlige') == True\nassert sat([-14, -9, -1, 2, 3, 3, 4, 11, 15, 16, 17], 'gteliikeenGgqIHent') == True\nassert sat([-19, -15, -14, -11, 3, 3, 4, 6, 12, 18, 22], 'xaGliigNntJfeeSm  nnEyt') == True\nassert sat([-20, -19, -12, -11, -3, -3, -1, 9, 10, 15, 21], '  einliJSgeteq ne CAlti') == True\nassert sat([], 'enlightenment') == False", "entry_fn_name": "sat"}
{"id": "235", "text": "Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), the target sequence\nis achieved.", "solution": "def sat(seq: List[int], target, n_steps):\n    s = seq[:]\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target", "title": "TP3/Moving0s", "testing_code": "assert sat([0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], 4) == True\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 9) == True\nassert sat([0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], 4) == True\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 12) == True\nassert sat([0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0], 3) == True\nassert sat([0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [], 4) == False\nassert sat([], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], 4) == False", "entry_fn_name": "sat"}
{"id": "236", "text": "Find a integer factor of n whose decimal representation consists only of 7's and 4's.", "solution": "def sat(d: int, n):\n    return n % d == 0 and all((i in '47' for i in str(d)))", "title": "TP3/Factor47", "testing_code": "assert sat(77477, 6002685529) == True\nassert sat(4, 16) == True\nassert sat(744447447447, 433459952851983617609247) == True\nassert sat(744774477747, 738195924589532712188415) == True\nassert sat(444777474447, 323190690645573746957862) == True\nassert sat(4, 5) == False\nassert sat(77477, 5) == False\nassert sat(4, 5) == False\nassert sat(5, 16) == False\nassert sat(5, 6002685529) == False\nassert sat(5, 16) == False\nassert sat(77477, 5) == False\nassert sat(4, 5) == False\nassert sat(77477, 5) == False\nassert sat(4, 5) == False", "entry_fn_name": "sat"}
{"id": "237", "text": "Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\nconsists only of 4's and 7's", "solution": "def sat(d: int, n):\n    return d > n and all((i in '47' for i in str(str(d).count('4') + str(d).count('7'))))", "title": "TP3/Count47", "testing_code": "assert sat(4444000000, 123456789) == True\nassert sat(4444000000000000000, 659104579100082212) == True\nassert sat(4444000000000, 476988101965) == True\nassert sat(44440000000000000000000, 3169877099077541094754) == True\nassert sat(4444, 707) == True\nassert sat('4444', '707') == False\nassert sat('4444000000000000000', '659104579100082212') == False\nassert sat('4444', '476988101965') == False\nassert sat('4444000000000', '476988101965') == False\nassert sat('4444000000000000000', '707') == False\nassert sat('4444000000000', '707') == False\nassert sat('4444', '659104579100082212') == False\nassert sat('4444000000', '659104579100082212') == False\nassert sat('44440000000000000000000', '476988101965') == False\nassert sat('44440000000000000000000', '659104579100082212') == False", "entry_fn_name": "sat"}
{"id": "238", "text": "Either reverse a string or don't based on the reverse flag", "solution": "def sat(s: str, target, reverse):\n    return (s[::-1] == target) == reverse", "title": "TP3/MaybeReversed", "testing_code": "assert sat('em esrever', 'reverse me', True) == True\nassert sat('anynobuht', 'thubonyna', True) == True\nassert sat('nivosypetextyzavalagx', 'nivosypetextyzavalag', False) == True\nassert sat('lx', 'l', False) == True\nassert sat('yvotxeteviwewahcer', 'rechawewivetextovy', True) == True\nassert sat('em esrever', '', True) == False\nassert sat('', 'reverse me', True) == False", "entry_fn_name": "sat"}
{"id": "239", "text": "The list of numbers val_counts represents multiple copies of integers, e.g.,\nval_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\nFor each number, decide how many to take so that the total number taken is <= upper and the sum of those\ntaken exceeds half the total sum.", "solution": "def sat(taken: List[int], val_counts, upper):\n    advantage = 0\n    if not (len(taken) == len(val_counts) and sum(taken) <= upper):\n        return False\n    for (i, (val, count)) in zip(taken, val_counts):\n        if not 0 <= i <= count:\n            return False\n        advantage += val * i - val * count / 2\n    return advantage > 0", "title": "TP3/MinBigger", "testing_code": "assert sat([0, 0, 0, 10, 0, 1], [[4, 3], [5, 2], [9, 3], [13, 13], [8, 11], [56, 1]], 11) == True\nassert sat([0, 12, 0, 54, 0], [[51, 67], [78, 13], [7, 68], [84, 54], [39, 38]], 66) == True\nassert sat([0, 0, 65, 0, 32, 0, 56, 0, 0], [[28, 29], [42, 54], [62, 85], [42, 95], [92, 32], [36, 35], [78, 56], [43, 20], [49, 17]], 153) == True\nassert sat([53, 0, 37, 0], [[44, 92], [28, 7], [56, 37], [37, 66]], 90) == True\nassert sat([0, 0, 0, 65], [[23, 93], [64, 14], [36, 8], [89, 92]], 65) == True\nassert sat('[53, 0, 37, 0]', '[[44, 92], [28, 7], [56, 37], [37, 66]]', '90') == False\nassert sat('[0, 0, 0, 65]', '[[23, 93], [64, 14], [36, 8], [89, 92]]', '65') == False\nassert sat('[0, 0, 0, 65]', '[[44, 92], [28, 7], [56, 37], [37, 66]]', '65') == False\nassert sat('[0, 0, 0, 65]', '[[44, 92], [28, 7], [56, 37], [37, 66]]', '66') == False\nassert sat([0, 0, 0, 10, 0, 1], [], 11) == False\nassert sat('[53, 0, 37, 0]', '[[44, 92], [28, 7], [56, 37], [37, 66]]', '11') == False\nassert sat('[0, 0, 0, 65]', '[[23, 93], [64, 14], [36, 8], [89, 92]]', '66') == False\nassert sat('[0, 0, 0, 65]', '[[44, 92], [28, 7], [56, 37], [37, 66]]', '11') == False\nassert sat('[0, 0, 0, 65]', '[[44, 92], [28, 7], [56, 37], [37, 66]]', '153') == False\nassert sat('[0, 0, 0, 65]', '[[23, 93], [64, 14], [36, 8], [89, 92]]', '153') == False", "entry_fn_name": "sat"}
{"id": "240", "text": "Find a string with a given number of a's and d's", "solution": "def sat(s: str, a, d):\n    return s.count('a') == a and s.count('d') == d and (len(s) == a + d)", "title": "TP3/Dada", "testing_code": "assert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddddddddddddddddd', 5129, 17) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', 5798, 1873) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', 2645, 1270) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd', 2996, 6808) == True\nassert sat('', 5129, 17) == False", "entry_fn_name": "sat"}
{"id": "241", "text": "Find a list of count or more different numbers each between a and b that each have no repeated digits", "solution": "def sat(nums: List[int], a, b, count):\n    if not all((len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)):\n        return False\n    return len(set(nums)) >= count", "title": "TP3/DistinctDigits", "testing_code": "assert sat([102, 103, 104, 105, 106, 107, 108, 109, 120, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 637, 638, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 718, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 798, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 879, 890, 891, 892, 893, 894, 895, 896, 897, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 945, 946, 947, 948, 950, 951, 952, 953, 954, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 968, 970, 971, 972, 973, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987], 100, 1000, 648) == True\nassert sat([79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 120, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169], 79, 169, 67) == True\nassert sat([31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105], 31, 105, 66) == True\nassert sat([52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95], 52, 95, 40) == True\nassert sat([136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176], 136, 176, 34) == True\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '52', '95', '40') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '100', '95', '66') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '79', '95', '67') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '100', '95', '34') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '79', '95', '34') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '31', '176', '34') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '31', '95', '66') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '52', '95', '67') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '79', '95', '66') == False\nassert sat('[52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95]', '100', '95', '40') == False", "entry_fn_name": "sat"}
{"id": "242", "text": "Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold", "solution": "def sat(tot: int, nums, thresh):\n    return tot == sum((1 if i < thresh else 2 for i in nums))", "title": "TP3/EasySum", "testing_code": "assert sat(12, [2, 8, 25, 18, 99, 11, 17, 16], 17) == True\nassert sat(3, [60, 63, 11], 99) == True\nassert sat(9, [32, 24, 19, 88, 6, 33, 13], 33) == True\nassert sat(53, [60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], 30) == True\nassert sat(28, [61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], 91) == True\nassert sat('53', '[60, 63, 11]', '91') == False\nassert sat('28', '[60, 63, 11]', '91') == False\nassert sat('3', '[60, 63, 11]', '17') == False\nassert sat('9', '[60, 63, 11]', '17') == False\nassert sat('53', '[60, 63, 11]', '33') == False\nassert sat('3', '[60, 63, 11]', '91') == False\nassert sat('9', '[60, 63, 11]', '91') == False\nassert sat('28', '[60, 63, 11]', '99') == False\nassert sat('9', '[60, 63, 11]', '30') == False\nassert sat('28', '[60, 63, 11]', '33') == False", "entry_fn_name": "sat"}
{"id": "243", "text": "Find a list of pairs of integers where the number of pairs in which the second number is more than\ntwo greater than the first number is a given constant", "solution": "def sat(ans: List[List[int]], target):\n    for i in range(len(ans)):\n        (a, b) = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0", "title": "TP3/HalfPairs", "testing_code": "assert sat([[0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2], [0, 2]], 17) == True\nassert sat([], 0) == True\nassert sat([[0, 2]], 1) == True\nassert sat([[0, 2], [0, 2]], 2) == True\nassert sat([], 17) == False", "entry_fn_name": "sat"}
{"id": "244", "text": "What are the last two digits of 5^n?", "solution": "def sat(s: str, n):\n    return int(str(5 ** n)[:-2] + s) == 5 ** n", "title": "TP3/FivePowers", "testing_code": "assert sat('25', 7012) == True\nassert sat('1', 0) == True\nassert sat('5', 1) == True\nassert sat('25', 2) == True\nassert sat('25', 3) == True\nassert sat('', 7012) == False", "entry_fn_name": "sat"}
{"id": "245", "text": "Shortest Combination Lock Path\nGiven a starting a final lock position, find the (minimal) intermediate states, where each transition\ninvolves increasing or decreasing a single digit (mod 10).\nExample:\nstart = \"012\"\ncombo = \"329\"\noutput: ['112', '212', '312', '322', '321', '320']", "solution": "def sat(states: List[str], start, combo, target_len):\n    if not (all((len(s) == len(start) for s in states)) and all((c in '0123456789' for s in states for c in s))):\n        return False\n    for (a, b) in zip([start] + states, states + [combo]):\n        if not sum((i != j for (i, j) in zip(a, b))) == 1:\n            return False\n        if not all((abs(int(i) - int(j)) in {0, 1, 9} for (i, j) in zip(a, b))):\n            return False\n    return len(states) <= target_len", "title": "TP3/CombinationLock", "testing_code": "assert sat(['524', '624', '724', '734', '744', '754', '764', '774', '775', '776', '777'], '424', '778', 12) == True\nassert sat(['67872', '57872', '47872', '46872', '45872', '44872', '43872', '43772', '43672', '43572', '43582', '43592', '43502', '43503', '43504', '43505'], '77872', '43506', 16) == True\nassert sat(['168', '178', '188', '189'], '268', '180', 4) == True\nassert sat(['5675159714', '6675159714', '7675159714', '8675159714', '9675159714', '9775159714', '9765159714', '9755159714', '9756159714', '9757159714', '9758159714', '9758059714', '9758049714', '9758039714', '9758029714', '9758019714', '9758010714', '9758011714', '9758012714', '9758013714', '9758013814', '9758013824', '9758013834', '9758013844', '9758013843', '9758013842', '9758013841'], '4675159714', '9758013840', 27) == True\nassert sat(['142716', '042716', '942716', '842716', '852716', '862716', '872716', '882716', '892716', '891716', '891816', '891916', '891016', '891116', '891216', '891226', '891236', '891246'], '242716', '891245', 18) == True\nassert sat(['524', '624', '724', '734', '744', '754', '764', '774', '775', '776', '777'], '', '778', 12) == False\nassert sat([], '424', '778', 12) == False\nassert sat(['524', '624', '724', '734', '744', '754', '764', '774', '775', '776', '777'], '424', '', 12) == False", "entry_fn_name": "sat"}
{"id": "246", "text": "Figure out what this does only from the code", "solution": "def sat(states: List[str], start, combo, target_len):\n    return all((sum(((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start)))) == 1 for (a, b) in zip([start] + states, states[:target_len] + [combo])))", "title": "TP3/CombinationLockObfuscated", "testing_code": "assert sat(['524', '624', '724', '734', '744', '754', '764', '774', '775', '776', '777'], '424', '778', 12) == True\nassert sat([], '50', '59', 0) == True\nassert sat(['13'], '23', '12', 1) == True\nassert sat([], '4', '3', 0) == True\nassert sat(['3184377', '4184377', '5184377', '6184377', '7184377', '7084377', '7094377', '7004377', '7003377', '7002377', '7002277', '7002177', '7002077', '7002977', '7002987', '7002997', '7002996', '7002995'], '2184377', '7002994', 18) == True\nassert sat(['524', '624', '724', '734', '744', '754', '764', '774', '775', '776', '777'], '', '778', 12) == False\nassert sat([], '424', '778', 12) == False", "entry_fn_name": "sat"}
{"id": "247", "text": "Find a string that, when a given permutation of characters is applied, has a given result.", "solution": "def sat(s: str, perm, target):\n    return ''.join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c for c in s)) == target", "title": "TP3/InvertPermutation", "testing_code": "assert sat('gwkki pew tiy rgwew?', 'qwertyuiopasdfghjklzxcvbnm', 'hello are you there?') == True\nassert sat('zpotopjtfprwzrudtrg sucydthpxid xwxyxgymytoi aykwxgyjuhixgpepops gtxg nyfwnu ew vubucir', 'qwertyuiopasdfghjklzxcvbnm', 'xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot') == True\nassert sat('nyhtxgwbtli', 'qwertyuiopasdfghjklzxcvbnm', 'mujychenyzo') == True\nassert sat('mywrgieyxgteyftl qwntqyxibyrguaumyy jpxgifwxgwgyl oyktvteu myyvt rgprwzrpj rtxgyltnyzylpltktj bweylwaurguowxtrimy', 'qwertyuiopasdfghjklzxcvbnm', 'quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu') == True\nassert sat('rgthtrwz xwmyikuxgurwzrirgi vtnizijwot htcyntqwdix', 'qwertyuiopasdfghjklzxcvbnm', 'thyjytex cequolichitextotho bymoxokepy jyvumywefoc') == True\nassert sat('gwkki pew tiy rgwew?', 'qwertyuiopasdfghjklzxcvbnm', '') == False\nassert sat('gwkki pew tiy rgwew?', '', 'hello are you there?') == False\nassert sat('', 'qwertyuiopasdfghjklzxcvbnm', 'hello are you there?') == False", "entry_fn_name": "sat"}
{"id": "248", "text": "Given a list of integers and a target length, create of the given length such that:\n* The first list must be all different numbers.\n* The second must be all the same number.\n* The two lists together comprise a sublist of all the list items", "solution": "def sat(lists: List[List[int]], items, length):\n    (a, b) = lists\n    if not len(a) == len(b) == length:\n        return False\n    if not len(set(a)) == len(a):\n        return False\n    if not len(set(b)) == 1:\n        return False\n    for i in a + b:\n        if not (a + b).count(i) <= items.count(i):\n            return False\n    return True", "title": "TP3/SameDifferent", "testing_code": "assert sat([[4, 9, 1, 5], [5, 5, 5, 5]], [5, 4, 9, 4, 5, 5, 5, 1, 5, 5], 4) == True\nassert sat([[3, 2], [5, 5]], [5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], 2) == True\nassert sat([[0, 9, 7, 6, 1, 5, 4, 3, 8, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [0, 9, 7, 2, 6, 1, 6, 5, 4, 6, 5, 2, 6, 4, 2, 2, 7, 2, 7, 3, 4, 4, 8, 8, 1, 2, 6, 4, 7, 0, 4, 4, 6, 8, 4, 8, 3, 6, 6, 4, 7, 0, 3, 0, 7, 9, 3, 2, 7, 7, 1, 2, 8, 9, 4, 6, 8, 2, 2, 4, 6, 5, 3, 3, 2, 8, 8, 2, 7, 8, 7, 6, 9, 7, 3, 2, 0, 5], 10) == True\nassert sat([[8, 1, 2, 7, 5, 3, 9, 4, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [8, 1, 8, 2, 7, 0, 5, 8, 1, 5, 7, 2, 7, 1, 3, 5, 2, 9, 2, 0, 5, 1, 9, 1, 7, 9, 4, 7, 3, 5, 5, 8, 8, 8, 3, 8, 7, 5, 5, 0, 3, 4, 2, 8, 0, 6, 7, 6, 6, 3, 0, 1, 1, 7, 6, 0, 9, 9, 9, 5, 6, 1, 0, 0, 6, 3, 3, 0, 4, 0, 6, 9, 1, 3, 2, 9, 4, 2, 4, 7, 2, 7, 6, 0, 9, 2, 2, 8, 9, 1, 3, 5, 8, 3, 3], 10) == True\nassert sat([[5, 8, 2, 4, 9, 0, 6, 7, 3, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [5, 8, 2, 2, 5, 1, 4, 9, 2, 0, 5, 4, 6, 5, 1, 7, 3, 2, 4, 6, 7, 2, 7, 3, 3, 1, 7, 9, 3, 2, 2, 9, 1, 2, 1, 1, 8, 6, 6, 2, 7, 6, 5, 2, 7, 6, 5, 0, 0, 8, 4, 5, 5, 3, 7, 5, 2, 0, 3, 1, 0, 8, 1, 3, 0, 1, 9, 4, 9, 1, 9, 7, 7, 1, 9, 7, 9, 4, 0, 8, 3, 7, 4, 3, 1, 6, 5, 8, 0, 9, 5, 7, 5, 6, 0, 1, 3, 1, 8], 10) == True\nassert sat([[4, 9, 1, 5], [5, 5, 5, 5]], [], 4) == False", "entry_fn_name": "sat"}
{"id": "249", "text": "Find a sequence of 1's and 2's of a given length that that adds up to n", "solution": "def sat(seq: List[int], n, length):\n    return all((i in [1, 2] for i in seq)) and sum(seq) == n and (len(seq) == length)", "title": "TP3/OnesAndTwos", "testing_code": "assert sat([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 867, 785) == True\nassert sat([], 0, 0) == True\nassert sat([2, 2], 4, 2) == True\nassert sat('[]', '4', '0') == False\nassert sat('[]', '0', '785') == False\nassert sat('[]', '4', '2') == False\nassert sat('[2, 2]', '867', '2') == False\nassert sat('[2, 2]', '4', '785') == False\nassert sat('[2, 2]', '0', '2') == False\nassert sat('[2, 2]', '0', '785') == False\nassert sat('[]', '867', '0') == False\nassert sat('[]', '4', '785') == False\nassert sat('[2, 2]', '4', '0') == False", "entry_fn_name": "sat"}
{"id": "250", "text": "Find a sequence of k consecutive indices whose sum is minimal", "solution": "def sat(start: int, k, upper, seq):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper", "title": "TP3/MinConsecutiveSum", "testing_code": "assert sat(8, 3, 6, [17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]) == True\nassert sat(6, 2, -172, [79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]) == True\nassert sat(4, 3, -238, [34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]) == True\nassert sat(1, 8, -75, [17, -90, 61, -29, 57, 7, -45, -37, 1, 69]) == True\nassert sat(2, 8, -4, [-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]) == True\nassert sat(8, 3, 6, []) == False", "entry_fn_name": "sat"}
{"id": "251", "text": "Find a sequence of k consecutive indices whose sum is maximal", "solution": "def sat(start: int, k, lower, seq):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower", "title": "TP3/MaxConsecutiveSum", "testing_code": "assert sat(3, 3, 150, [3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]) == True\nassert sat(0, 9, -183, [44, -94, 25, -63, -39, -71, -34, 84, -35]) == True\nassert sat(7, 3, 86, [19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]) == True\nassert sat(0, 1, -36, [-36]) == True\nassert sat(3, 1, 93, [-61, -46, 89, 93, -13, 14, -95, -74, -92, -38, -93, 64, -78, 3, 92, -10, -4, 43, 72, 12, 3, -3, -15, -96, 72, -71, -30, 53, 17, -87, 49, 17, -69, 78, 6, -77, -99, 91, 13, 9, 81, -55, 75, 48, -65, 18, -83, 10, -12, 88, 60, -72, -7, -49, -56, -76, 82, 18, 77, 52, -92, -88, 39, 13, -16, 82, 4, 44, -19, 54, 6, 55, 77, -38, -30, -55, -16]) == True\nassert sat(3, 3, 150, []) == False", "entry_fn_name": "sat"}
{"id": "252", "text": "Find a sequence of k consecutive indices whose product is maximal, possibly looping around", "solution": "def sat(start: int, k, lower, seq):\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower", "title": "TP3/MaxConsecutiveProduct", "testing_code": "assert sat(-2, 3, 100000, [91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]) == True\nassert sat(-8, 8, 774420991987500, [-50, -99, -99, -65, -69, -87, 90, 45]) == True\nassert sat(-5, 6, 188917681120, [73, -32, 30, 92, 73, 8, 31, 40, -59, -97, -16, -83, -86, 78, -91, -18, -31, 31, 37, 79, 63, 38, 14, 68, -73, 91, 71, 87, 54, -7, -74, -63, -57, -46, -78, -22, 71, 52, 32, -82, 71, 76, -28, 83, -65, -65, 70, -35, 83, -40, 69, 78, -81, 0, -69, -1, 0, 61, 92, 55, -89, 60, 74, 99, -53, -22, 50, 28, -60, 6, 27, -53, -77, 99, 1, -69, -67, 81, -89, 45, 59, -28, 24, -21, -65, -56, -89, -30, 58, 78, 73, 9, 81, -39, -99, 43, 32, 58, -56, -83, 82, 97, 70]) == True\nassert sat(-5, 2, 5589, [8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]) == True\nassert sat(-10, 10, -8326797433194240, [49, -99, 80, 26, 54, 13, 37, 13, -52, -47]) == True\nassert sat(-8, 3, 5, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(5, 3, 5589, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(-8, 3, 5, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(-8, 3, 5, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(-2, 3, 5, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(5, 3, 5589, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(5, 2, 5589, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(-2, 3, 5, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(5, 3, 5589, [-50, -99, -99, -65, -69, -87, 90, 45]) == False\nassert sat(5, 2, 5589, [-50, -99, -99, -65, -69, -87, 90, 45]) == False", "entry_fn_name": "sat"}
{"id": "253", "text": "Find n distinct positive odd integers that sum to tot", "solution": "def sat(nums: List[int], tot, n):\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all((i >= i % 2 > 0 for i in nums))", "title": "TP3/DistinctOddSum", "testing_code": "assert sat([1, 3, 5, 7, 12329], 12345, 5) == True\nassert sat([1, 3, 1815], 1819, 3) == True\nassert sat([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 32545], 37729, 73) == True\nassert sat([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 5259], 5359, 11) == True\nassert sat([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 31321], 36505, 73) == True\nassert sat('[1, 3, 1815]', '5359', '11') == False\nassert sat('[1, 3, 1815]', '12345', '11') == False\nassert sat('[1, 3, 1815]', '1819', '11') == False\nassert sat('[1, 3, 1815]', '37729', '73') == False\nassert sat('[1, 3, 1815]', '5359', '73') == False\nassert sat('[1, 3, 1815]', '12345', '73') == False\nassert sat('[1, 3, 1815]', '12345', '5') == False\nassert sat('[1, 3, 1815]', '5359', '5') == False\nassert sat('[1, 3, 1815]', '1819', '5') == False\nassert sat('[1, 3, 1815]', '37729', '5') == False", "entry_fn_name": "sat"}
{"id": "254", "text": "We begin with the string `\"a...z\"`\nAn `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\ncycling around. Given a target string of length n, find the n rotations that put the consecutive characters\nof that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\nFor example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.", "solution": "def sat(rotations: List[int], target, upper):\n    s = 'abcdefghijklmnopqrstuvwxyz'\n    if not len(rotations) == len(target):\n        return False\n    for (r, c) in zip(rotations, target):\n        s = s[r:] + s[:r]\n        if not s[0] == c:\n            return False\n    return sum((abs(r) for r in rotations)) <= upper", "title": "TP3/MinRotations", "testing_code": "assert sat([-4, -8, -1, -10, 1, 13, -12, -11, -9], 'wonderful', 69) == True\nassert sat([-7, 1, 7, 13, -3, -7, 7, -7], 'tubolele', 52) == True\nassert sat([-8, -4, 2, 4, -6, -8, 2, 10, 8, -4, 4, 7], 'soquogisawah', 67) == True\nassert sat([9, -9, 2, 2, 11, 11], 'jacepa', 44) == True\nassert sat([12, -4, -12, 2, 12, 10, 8, 2, 3, -3, -7, -9], 'miwykucehexo', 84) == True\nassert sat([-4, -8, -1, -10, 1, 13, -12, -11, -9], '', 69) == False\nassert sat([], 'wonderful', 69) == False", "entry_fn_name": "sat"}
{"id": "255", "text": "Find the shortest sequence (length <= max_len) that sum to n, where each number is in denominations", "solution": "def sat(bills: List[int], denominations, n, max_len):\n    return sum(bills) == n and all((b in denominations for b in bills)) and (len(bills) <= max_len)", "title": "TP3/BillSums", "testing_code": "assert sat([35, 35, 35, 35, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84], [1, 25, 35, 84], 980, 14) == True\nassert sat([1, 1, 1, 1, 1, 44, 44, 44, 44, 44, 44, 44, 69, 69, 69, 69, 69, 69], [1, 44, 69], 727, 18) == True\nassert sat([1, 1, 25, 25, 25, 25, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [1, 25, 29], 537, 21) == True\nassert sat([1, 1, 23, 49], [1, 10, 23, 49], 74, 4) == True\nassert sat([35, 35, 35, 35, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84], [], 980, 14) == False\nassert sat([], [1, 25, 35, 84], 980, 14) == False", "entry_fn_name": "sat"}
{"id": "256", "text": "Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\nwhere each side length is in options", "solution": "def sat(sides: List[int], options, n, max_dim):\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and (len(sides) <= max_dim)", "title": "TP3/BoxVolume", "testing_code": "assert sat([512, 512, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024], [2, 512, 1024], 340282366920938463463374607431768211456, 13) == True\nassert sat([512, 512, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024], [2, 32, 128, 2048], , 2671) == True\nassert satrue\nassert sat([7, 7, 1341068619663964900807, 1341068619663964900807, 1341068619663964900807, 1341068619663964900807, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607, 3219905755813179726837607], [7, 1341068619663964900807, 3219905755813179726837607], 6571242398704579720578070114049260568175867016132732117282677704710285377366495338413477575773225344143668665616691026039505250116800576464209614274689081547617879363134212486963646613891813824577824293441956456783410239143356741482364072743485236424053098241559823295733445894310196746774269493235867749396614000266398083913285305446265094243982850288066583162232189087239052303868564232298028341023504220837967414535260504654309004337585867867005771207, 21) == True\nassert sat([2, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256], [2, 8, 64, 256], 3885337784451458141838923813647037813284813678104279042503624819477808570410416996352, 36) == True\nassert sat([], [2, 512, 1024], 340282366920938463463374607431768211456, 13) == False\nassert sat([512, 512, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024], [], 340282366920938463463374607431768211456, 13) == False", "entry_fn_name": "sat"}
{"id": "257", "text": "Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\nFor example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.", "solution": "def sat(x: float, coeffs):\n    (a, b, c) = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-06", "title": "TP3/QuadraticRoot", "testing_code": "assert sat(0.2573006862551025, [2.5, 1.3, -0.5]) == True\nassert sat(2.2467990270530227, [0.0685642998539026, -0.10446230957339113, -0.11141402891228723]) == True\nassert sat(11.7261249651681, [0.2622487694588566, 0.48521166316030495, -41.749384651642444]) == True\nassert sat(0.1878869429484059, [145.72190605632582, 0.027358325157428014, -5.149342624051854]) == True\nassert sat(524.9318042993127, [1.1222556871110754, -0.007015312913509468, -309237.6867547677]) == True\nassert sat(0.5, [1.1222556871110754, -0.007015312913509468, -309237.6867547677]) == False\nassert sat(0.5, [2.5, 1.3, -0.5]) == False\nassert sat(0.5, [145.72190605632582, 0.027358325157428014, -5.149342624051854]) == False\nassert sat(0.5, [145.72190605632582, 0.027358325157428014, -5.149342624051854]) == False\nassert sat(0.5, [2.5, 1.3, -0.5]) == False\nassert sat(0.5, [0.2622487694588566, 0.48521166316030495, -41.749384651642444]) == False\nassert sat(0.5, [0.2622487694588566, 0.48521166316030495, -41.749384651642444]) == False\nassert sat(0.5, [1.1222556871110754, -0.007015312913509468, -309237.6867547677]) == False\nassert sat(0.5, [1.1222556871110754, -0.007015312913509468, -309237.6867547677]) == False\nassert sat(0.5, [1.1222556871110754, -0.007015312913509468, -309237.6867547677]) == False", "entry_fn_name": "sat"}
{"id": "258", "text": "Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]", "solution": "def sat(roots: List[float], coeffs):\n    (b, c) = coeffs\n    (r1, r2) = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-06", "title": "TP3/AllQuadraticRoots", "testing_code": "assert sat([0.3104686356149273, -1.6104686356149274], [1.3, -0.5]) == True\nassert sat([1.9526922712051686, -0.4841432818979936], [-1.468548989307175, -0.9453828447181172]) == True\nassert sat([2.1346659105187733, -0.111641354609892], [-2.0230245559088815, -0.23831699388987454]) == True\nassert sat([33.938628259671454, -0.14825633213285272], [-33.7903719275386, -5.03161654339928]) == True\nassert sat([0.10226923150034484, -9.257375070533051], [9.155105839032705, -0.9467446341738642]) == True\nassert sat([2.1346659105187733, -0.111641354609892], [4.99, 5.0]) == False\nassert sat([4.99, 5.0], [-33.7903719275386, -5.03161654339928]) == False\nassert sat([2.1346659105187733, -0.111641354609892], [4.99, 5.0]) == False\nassert sat([4.99, 5.0], [-33.7903719275386, -5.03161654339928]) == False\nassert sat([4.99, 5.0], [9.155105839032705, -0.9467446341738642]) == False\nassert sat([4.99, 5.0], [1.3, -0.5]) == False\nassert sat([4.99, 5.0], [-33.7903719275386, -5.03161654339928]) == False\nassert sat([4.99, 5.0], [9.155105839032705, -0.9467446341738642]) == False\nassert sat([4.99, 5.0], [-33.7903719275386, -5.03161654339928]) == False\nassert sat([2.1346659105187733, -0.111641354609892], [4.99, 5.0]) == False", "entry_fn_name": "sat"}
{"id": "259", "text": "Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\nFor example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.", "solution": "def sat(x: float, coeffs):\n    return abs(sum((c * x ** (3 - i) for (i, c) in enumerate(coeffs)))) < 1e-06", "title": "TP3/CubicRoot", "testing_code": "assert sat(-1.772776344958769, [2.0, 1.0, 0.0, 8.0]) == True\nassert sat(1072.8678418091922, [0.009597657937719273, -10.297175825569942, 0.15891220226280925, 10.530249049250433]) == True\nassert sat(0.43601500265481397, [-0.17749172356645268, -1.3894267878542186, 0.03752944532850555, 0.2624916128068381]) == True\nassert sat(0.012812924533861292, [0.41725114111706524, 155.2589446092116, -0.10619077904258341, -0.024129284994425074]) == True\nassert sat(0.8356682286587807, [-2.3153234528266906, 11.247619504308075, -72.3705721705674, 53.97429005428236]) == True\nassert sat(0.8356682286587807, [4.99, 5.0]) == False\nassert sat(0.8356682286587807, [4.99, 5.0]) == False\nassert sat(-1.772776344958769, [4.99, 5.0]) == False\nassert sat(0.5, [2.0, 1.0, 0.0, 8.0]) == False\nassert sat(1072.8678418091922, [4.99, 5.0]) == False\nassert sat(1072.8678418091922, [4.99, 5.0]) == False\nassert sat(-1.772776344958769, [4.99, 5.0]) == False\nassert sat(0.8356682286587807, [4.99, 5.0]) == False\nassert sat(-1.772776344958769, [4.99, 5.0]) == False\nassert sat(0.5, [2.0, 1.0, 0.0, 8.0]) == False", "entry_fn_name": "sat"}
{"id": "260", "text": "Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\ncoeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\nsat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.", "solution": "def sat(roots: List[float], coeffs):\n    (r1, r2, r3) = roots\n    (a, b, c) = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-06", "title": "TP3/AllCubicRoots", "testing_code": "assert sat([1.2469796037174672, -0.44504186791262906, -1.8019377358048383], [1.0, -2.0, -1.0]) == True\nassert sat([0.45107312046279446, 0.35498554340792055, -292.44544467335487], [291.6393860094841, -235.56805995170293, 46.827662118172]) == True\nassert sat([0.33710995325737675, 0.3086912357129851, -0.39351216235665026], [-0.25228902661371166, -0.1500677342820565, 0.04095001209455085]) == True\nassert sat([0.9627868626597909, 0.6054724871768047, -0.8118448171856856], [-0.7564145326509102, -0.6902422688120567, 0.4732575941427041]) == True\nassert sat([2.2860337730132825, -1.6213509948589593, -5.784682018960652], [5.119999240806329, -7.551441647258393, -21.440710634524915]) == True", "entry_fn_name": "sat"}
{"id": "261", "text": "Find a number that its digits sum to a specific value.", "solution": "def sat(x: str, s):\n    return s == sum([int(d) for d in x])", "title": "TP3/SumOfDigits", "testing_code": "assert sat('9999999999999999999999999999999999999999999999999999999999999999999999999994', 679) == True\nassert sat('9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998', 40427) == True\nassert sat('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999997', 8071) == True\nassert satrue\nassert satrue\nassert sat('', 679) == False", "entry_fn_name": "sat"}
{"id": "262", "text": "Create a float with a specific decimal.", "solution": "def sat(z: float, v, d):\n    return int(z * 1 / d % 10) == v", "title": "TP3/FloatWithDecimalValue", "testing_code": "assert sat(0.0009000000000000001, 9, 0.0001) == True\nassert sat(1e-17, 1, 1e-17) == True\nassert sat(9e+83, 9, 1e+83) == True\nassert sat(5e-18, 5, 1e-18) == True\nassert sat(4.9999999999999995e+90, 5, 1e+90) == True\nassert sat(9e+83, 5, 0.5) == False\nassert sat(0.5, 9, 1e+90) == False\nassert sat(0.5, 5, 1e+83) == False\nassert sat(0.5, 1, 1e-18) == False\nassert sat(0.5, 9, 1e-18) == False\nassert sat(9e+83, 1, 0.5) == False\nassert sat(5e-18, 9, 0.5) == False\nassert sat(0.5, 5, 1e-17) == False\nassert sat(1e-17, 9, 0.5) == False\nassert sat(0.5, 5, 1e+90) == False", "entry_fn_name": "sat"}
{"id": "263", "text": "Create a list that is a subrange of an arithmetic sequence.", "solution": "def sat(x: List[int], a, s, e):\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])", "title": "TP3/ArithmeticSequence", "testing_code": "assert sat([7, 12, 17, 22, 27, 32, 37, 42, 47, 52, 57, 62, 67, 72, 77, 82, 87, 92, 97, 102, 107, 112, 117, 122, 127, 132, 137, 142, 147, 152, 157, 162, 167, 172, 177, 182, 187, 192, 197], 7, 5, 200) == True\nassert sat([43536, 47331, 51126, 54921, 58716, 62511, 66306, 70101, 73896, 77691, 81486, 85281, 89076, 92871, 96666, 100461, 104256, 108051, 111846, 115641, 119436, 123231, 127026, 130821, 134616, 138411, 142206, 146001, 149796, 153591, 157386, 161181, 164976, 168771, 172566, 176361, 180156, 183951, 187746, 191541, 195336, 199131, 202926, 206721, 210516, 214311, 218106, 221901, 225696, 229491, 233286, 237081, 240876, 244671, 248466, 252261, 256056, 259851, 263646, 267441, 271236, 275031, 278826, 282621, 286416, 290211, 294006, 297801, 301596, 305391, 309186, 312981, 316776, 320571, 324366, 328161, 331956, 335751, 339546, 343341, 347136, 350931, 354726, 358521, 362316, 366111, 369906, 373701, 377496, 381291, 385086, 388881, 392676, 396471, 400266, 404061, 407856, 411651, 415446], 43536, 3795, 417606) == True\nassert sat([-70138, -65270, -60402, -55534, -50666, -45798, -40930, -36062, -31194, -26326, -21458, -16590, -11722, -6854, -1986, 2882, 7750, 12618, 17486, 22354, 27222, 32090, 36958, 41826, 46694, 51562, 56430, 61298, 66166, 71034, 75902, 80770, 85638, 90506, 95374, 100242, 105110, 109978, 114846, 119714, 124582, 129450, 134318, 139186, 144054, 148922, 153790, 158658, 163526, 168394, 173262, 178130, 182998, 187866, 192734, 197602, 202470, 207338, 212206, 217074, 221942, 226810, 231678, 236546, 241414, 246282, 251150, 256018, 260886, 265754, 270622, 275490, 280358, 285226, 290094, 294962, 299830, 304698, 309566, 314434, 319302, 324170, 329038, 333906, 338774, 343642, 348510, 353378, 358246, 363114, 367982, 372850, 377718, 382586, 387454, 392322, 397190, 402058, 406926, 411794, 416662, 421530, 426398, 431266, 436134, 441002, 445870, 450738, 455606, 460474, 465342, 470210, 475078, 479946, 484814, 489682, 494550], -70138, 4868, 498910) == True\nassert sat([55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206], 55980, 7402, 155818) == True\nassert sat([-44635, -39589, -34543, -29497, -24451, -19405, -14359, -9313, -4267, 779, 5825, 10871, 15917, 20963, 26009, 31055, 36101, 41147, 46193, 51239, 56285, 61331, 66377, 71423, 76469, 81515, 86561, 91607, 96653, 101699, 106745, 111791, 116837, 121883, 126929, 131975, 137021, 142067, 147113, 152159, 157205, 162251, 167297, 172343, 177389, 182435, 187481, 192527, 197573, 202619, 207665, 212711, 217757, 222803, 227849, 232895, 237941, 242987, 248033, 253079, 258125, 263171, 268217, 273263, 278309, 283355, 288401, 293447, 298493, 303539, 308585, 313631, 318677, 323723, 328769, 333815, 338861, 343907, 348953, 353999, 359045, 364091, 369137, 374183, 379229, 384275, 389321, 394367, 399413, 404459, 409505, 414551, 419597, 424643, 429689, 434735, 439781, 444827, 449873, 454919, 459965, 465011, 470057, 475103, 480149, 485195, 490241, 495287, 500333], -44635, 5046, 503563) == True\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '5', '498910') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '5', '200') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '-70138', '5', '200') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '-44635', '5', '200') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '43536', '5', '200') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '7402', '200') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '3795', '503563') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '5', '155818') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '4868', '155818') == False\nassert sat('[55980, 63382, 70784, 78186, 85588, 92990, 100392, 107794, 115196, 122598, 130000, 137402, 144804, 152206]', '7', '4868', '503563') == False", "entry_fn_name": "sat"}
{"id": "264", "text": "Create a list that is a subrange of an gemoetric sequence.", "solution": "def sat(x: List[int], a, r, l):\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])", "title": "TP3/GeometricSequence", "testing_code": "assert sat([8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496], 8, 2, 50) == True\nassert sat([-777, -3108, -12432, -49728, -198912, -795648, -3182592, -12730368, -50921472, -203685888, -814743552, -3258974208, -13035896832, -52143587328, -208574349312, -834297397248, -3337189588992, -13348758355968, -53395033423872, -213580133695488, -854320534781952, -3417282139127808, -13669128556511232, -54676514226044928, -218706056904179712, -874824227616718848, -3499296910466875392, -13997187641867501568, -55988750567470006272, -223955002269880025088, -895820009079520100352, -3583280036318080401408, -14333120145272321605632, -57332480581089286422528, -229329922324357145690112, -917319689297428582760448, -3669278757189714331041792, -14677115028758857324167168, -58708460115035429296668672, -234833840460141717186674688, -939335361840566868746698752, -3757341447362267474986795008, -15029365789449069899947180032, -60117463157796279599788720128, -240469852631185118399154880512, -961879410524740473596619522048, -3847517642098961894386478088192, -15390070568395847577545912352768, -61560282273583390310183649411072, -246241129094333561240734597644288, -984964516377334244962938390577152, -3939858065509336979851753562308608, -15759432262037347919407014249234432, -63037729048149391677628056996937728, -252150916192597566710512227987750912, -1008603664770390266842048911951003648, -4034414659081561067368195647804014592, -16137658636326244269472782591216058368, -64550634545304977077891130364864233472, -258202538181219908311564521459456933888, -1032810152724879633246258085837827735552, -4131240610899518532985032343351310942208, -16524962443598074131940129373405243768832, -66099849774392296527760517493620975075328, -264399399097569186111042069974483900301312, -1057597596390276744444168279897935601205248, -4230390385561106977776673119591742404820992, -16921561542244427911106692478366969619283968, -67686246168977711644426769913467878477135872, -270744984675910846577707079653871513908543488, -1082979938703643386310828318615486055634173952, -4331919754814573545243313274461944222536695808, -17327679019258294180973253097847776890146783232, -69310716077033176723893012391391107560587132928, -277242864308132706895572049565564430242348531712, -1108971457232530827582288198262257720969394126848, -4435885828930123310329152793049030883877576507392, -17743543315720493241316611172196123535510306029568, -70974173262881972965266444688784494142041224118272, -283896693051527891861065778755137976568164896473088, -1135586772206111567444263115020551906272659585892352, -4542347088824446269777052460082207625090638343569408, -18169388355297785079108209840328830500362553374277632, -72677553421191140316432839361315322001450213497110528, -290710213684764561265731357445261288005800853988442112, -1162840854739058245062925429781045152023203415953768448, -4651363418956232980251701719124180608092813663815073792, -18605453675824931921006806876496722432371254655260295168, -74421814703299727684027227505986889729485018621041180672, -297687258813198910736108910023947558917940074484164722688, -1190749035252795642944435640095790235671760297936658890752, -4762996141011182571777742560383160942687041191746635563008, -19051984564044730287110970241532643770748164766986542252032, -76207938256178921148443880966130575082992659067946169008128, -304831753024715684593775523864522300331970636271784676032512, -1219327012098862738375102095458089201327882545087138704130048, -4877308048395450953500408381832356805311530180348554816520192, -19509232193581803814001633527329427221246120721394219266080768, -78036928774327215256006534109317708884984482885576877064323072, -312147715097308861024026136437270835539937931542307508257292288, -1248590860389235444096104545749083342159751726169230033029169152, -4994363441556941776384418182996333368639006904676920132116676608, -19977453766227767105537672731985333474556027618707680528466706432], -777, 4, 103) == True\nassert sat([-736, -2944, -11776, -47104, -188416, -753664, -3014656, -12058624, -48234496, -192937984, -771751936, -3087007744, -12348030976, -49392123904, -197568495616, -790273982464, -3161095929856, -12644383719424, -50577534877696, -202310139510784, -809240558043136, -3236962232172544, -12947848928690176, -51791395714760704, -207165582859042816, -828662331436171264, -3314649325744685056, -13258597302978740224, -53034389211914960896, -212137556847659843584, -848550227390639374336, -3394200909562557497344, -13576803638250229989376, -54307214553000919957504, -217228858212003679830016, -868915432848014719320064, -3475661731392058877280256, -13902646925568235509121024, -55610587702272942036484096, -222442350809091768145936384, -889769403236367072583745536, -3559077612945468290334982144, -14236310451781873161339928576, -56945241807127492645359714304, -227780967228509970581438857216, -911123868914039882325755428864, -3644495475656159529303021715456, -14577981902624638117212086861824, -58311927610498552468848347447296, -233247710441994209875393389789184, -932990841767976839501573559156736, -3731963367071907358006294236626944, -14927853468287629432025176946507776, -59711413873150517728100707786031104, -238845655492602070912402831144124416, -955382621970408283649611324576497664, -3821530487881633134598445298305990656, -15286121951526532538393781193223962624, -61144487806106130153575124772895850496, -244577951224424520614300499091583401984, -978311804897698082457201996366333607936, -3913247219590792329828807985465334431744, -15652988878363169319315231941861337726976, -62611955513452677277260927767445350907904, -250447822053810709109043711069781403631616, -1001791288215242836436174844279125614526464, -4007165152860971345744699377116502458105856, -16028660611443885382978797508466009832423424, -64114642445775541531915190033864039329693696, -256458569783102166127660760135456157318774784, -1025834279132408664510643040541824629275099136, -4103337116529634658042572162167298517100396544, -16413348466118538632170288648669194068401586176, -65653393864474154528681154594676776273606344704, -262613575457896618114724618378707105094425378816, -1050454301831586472458898473514828420377701515264, -4201817207326345889835593894059313681510806061056, -16807268829305383559342375576237254726043224244224, -67229075317221534237369502304949018904172896976896, -268916301268886136949478009219796075616691587907584, -1075665205075544547797912036879184302466766351630336, -4302660820302178191191648147516737209867065406521344, -17210643281208712764766592590066948839468261626085376, -68842573124834851059066370360267795357873046504341504, -275370292499339404236265481441071181431492186017366016, -1101481169997357616945061925764284725725968744069464064, -4405924679989430467780247703057138902903874976277856256, -17623698719957721871120990812228555611615499905111425024, -70494794879830887484483963248914222446461999620445700096, -281979179519323549937935852995656889785847998481782800384, -1127916718077294199751743411982627559143391993927131201536, -4511666872309176799006973647930510236573567975708524806144], -736, 4, 92) == True\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '8', '2', '103') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '8', '4', '92') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '-736', '2', '103') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '-736', '4', '92') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '-736', '2', '92') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '-777', '2', '50') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '-777', '2', '103') == False\nassert sat('[8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]', '-736', '4', '50') == False\nassert sat('[-736, -2944, -11776, -47104, -188416, -753664, -3014656, -12058624, -48234496, -192937984, -771751936, -3087007744, -12348030976, -49392123904, -197568495616, -790273982464, -3161095929856, -12644383719424, -50577534877696, -202310139510784, -809240558043136, -3236962232172544, -12947848928690176, -51791395714760704, -207165582859042816, -828662331436171264, -3314649325744685056, -13258597302978740224, -53034389211914960896, -212137556847659843584, -848550227390639374336, -3394200909562557497344, -13576803638250229989376, -54307214553000919957504, -217228858212003679830016, -868915432848014719320064, -3475661731392058877280256, -13902646925568235509121024, -55610587702272942036484096, -222442350809091768145936384, -889769403236367072583745536, -3559077612945468290334982144, -14236310451781873161339928576, -56945241807127492645359714304, -227780967228509970581438857216, -911123868914039882325755428864, -3644495475656159529303021715456, -14577981902624638117212086861824, -58311927610498552468848347447296, -233247710441994209875393389789184, -932990841767976839501573559156736, -3731963367071907358006294236626944, -14927853468287629432025176946507776, -59711413873150517728100707786031104, -238845655492602070912402831144124416, -955382621970408283649611324576497664, -3821530487881633134598445298305990656, -15286121951526532538393781193223962624, -61144487806106130153575124772895850496, -244577951224424520614300499091583401984, -978311804897698082457201996366333607936, -3913247219590792329828807985465334431744, -15652988878363169319315231941861337726976, -62611955513452677277260927767445350907904, -250447822053810709109043711069781403631616, -1001791288215242836436174844279125614526464, -4007165152860971345744699377116502458105856, -16028660611443885382978797508466009832423424, -64114642445775541531915190033864039329693696, -256458569783102166127660760135456157318774784, -1025834279132408664510643040541824629275099136, -4103337116529634658042572162167298517100396544, -16413348466118538632170288648669194068401586176, -65653393864474154528681154594676776273606344704, -262613575457896618114724618378707105094425378816, -1050454301831586472458898473514828420377701515264, -4201817207326345889835593894059313681510806061056, -16807268829305383559342375576237254726043224244224, -67229075317221534237369502304949018904172896976896, -268916301268886136949478009219796075616691587907584, -1075665205075544547797912036879184302466766351630336, -4302660820302178191191648147516737209867065406521344, -17210643281208712764766592590066948839468261626085376, -68842573124834851059066370360267795357873046504341504, -275370292499339404236265481441071181431492186017366016, -1101481169997357616945061925764284725725968744069464064, -4405924679989430467780247703057138902903874976277856256, -17623698719957721871120990812228555611615499905111425024, -70494794879830887484483963248914222446461999620445700096, -281979179519323549937935852995656889785847998481782800384, -1127916718077294199751743411982627559143391993927131201536, -4511666872309176799006973647930510236573567975708524806144]', '8', '4', '92') == False\nassert sat('[-736, -2944, -11776, -47104, -188416, -753664, -3014656, -12058624, -48234496, -192937984, -771751936, -3087007744, -12348030976, -49392123904, -197568495616, -790273982464, -3161095929856, -12644383719424, -50577534877696, -202310139510784, -809240558043136, -3236962232172544, -12947848928690176, -51791395714760704, -207165582859042816, -828662331436171264, -3314649325744685056, -13258597302978740224, -53034389211914960896, -212137556847659843584, -848550227390639374336, -3394200909562557497344, -13576803638250229989376, -54307214553000919957504, -217228858212003679830016, -868915432848014719320064, -3475661731392058877280256, -13902646925568235509121024, -55610587702272942036484096, -222442350809091768145936384, -889769403236367072583745536, -3559077612945468290334982144, -14236310451781873161339928576, -56945241807127492645359714304, -227780967228509970581438857216, -911123868914039882325755428864, -3644495475656159529303021715456, -14577981902624638117212086861824, -58311927610498552468848347447296, -233247710441994209875393389789184, -932990841767976839501573559156736, -3731963367071907358006294236626944, -14927853468287629432025176946507776, -59711413873150517728100707786031104, -238845655492602070912402831144124416, -955382621970408283649611324576497664, -3821530487881633134598445298305990656, -15286121951526532538393781193223962624, -61144487806106130153575124772895850496, -244577951224424520614300499091583401984, -978311804897698082457201996366333607936, -3913247219590792329828807985465334431744, -15652988878363169319315231941861337726976, -62611955513452677277260927767445350907904, -250447822053810709109043711069781403631616, -1001791288215242836436174844279125614526464, -4007165152860971345744699377116502458105856, -16028660611443885382978797508466009832423424, -64114642445775541531915190033864039329693696, -256458569783102166127660760135456157318774784, -1025834279132408664510643040541824629275099136, -4103337116529634658042572162167298517100396544, -16413348466118538632170288648669194068401586176, -65653393864474154528681154594676776273606344704, -262613575457896618114724618378707105094425378816, -1050454301831586472458898473514828420377701515264, -4201817207326345889835593894059313681510806061056, -16807268829305383559342375576237254726043224244224, -67229075317221534237369502304949018904172896976896, -268916301268886136949478009219796075616691587907584, -1075665205075544547797912036879184302466766351630336, -4302660820302178191191648147516737209867065406521344, -17210643281208712764766592590066948839468261626085376, -68842573124834851059066370360267795357873046504341504, -275370292499339404236265481441071181431492186017366016, -1101481169997357616945061925764284725725968744069464064, -4405924679989430467780247703057138902903874976277856256, -17623698719957721871120990812228555611615499905111425024, -70494794879830887484483963248914222446461999620445700096, -281979179519323549937935852995656889785847998481782800384, -1127916718077294199751743411982627559143391993927131201536, -4511666872309176799006973647930510236573567975708524806144]', '8', '4', '50') == False", "entry_fn_name": "sat"}
{"id": "265", "text": "Find the intersection of two lines.\nSolution should be a list of the (x,y) coordinates.\nAccuracy of fifth decimal digit is required.", "solution": "def sat(e: List[int], a, b, c, d):\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** (-5)", "title": "TP3/LineIntersection", "testing_code": "assert sat([2022, 1], 2, -1, 1, 2021) == True\nassert sat([121071740, -66898748], -77698407, -31793716, -10799659, 89278024) == True\nassert sat([-4469067, -5500683], 89600582, -47657198, 95101265, -52126265) == True\nassert sat([19721977, 47740036], -11422303, -57150416, -59162339, -37428439) == True\nassert sat([22933768, -7360388], -18517001, -13662763, -11156613, 9271005) == True\nassert sat([2022, 1], 5, -1, 1, 2021) == False\nassert sat([2022, 1], 2, -1, 5, 2021) == False\nassert sat([2022, 1], 2, 5, 1, 2021) == False\nassert sat([2022, 1], 2, -1, 1, 5) == False\nassert sat([2022, 1], 2, -1, 5, 2021) == False\nassert sat([2022, 1], 2, 5, 1, 2021) == False\nassert sat([2022, 1], 2, 5, 1, 2021) == False\nassert sat([2022, 1], 2, -1, 1, 5) == False\nassert sat([2022, 1], 5, -1, 1, 2021) == False\nassert sat([2022, 1], 2, -1, 1, 5) == False", "entry_fn_name": "sat"}
{"id": "266", "text": "Satisfy a simple if statement", "solution": "def sat(x: int, a, b):\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b", "title": "TP3/IfProblem", "testing_code": "assert sat(1994453, 324554, 1345345) == True\nassert sat(40553895, 51, 40553793) == True\nassert sat(72369483, 50, 72369383) == True\nassert sat(42412714, 90, 42412534) == True\nassert sat(-26537933, 62, -26538057) == True\nassert sat(5, 90, 1345345) == False\nassert sat(1994453, 50, 5) == False\nassert sat(5, 62, 1345345) == False\nassert sat(1994453, 90, 5) == False\nassert sat(5, 50, 1345345) == False\nassert sat(5, 51, 1345345) == False\nassert sat(5, 62, 1345345) == False\nassert sat(5, 90, 1345345) == False\nassert sat(1994453, 90, 5) == False\nassert sat(5, 62, 1345345) == False", "entry_fn_name": "sat"}
{"id": "267", "text": "Satisfy a simple if statement with an and clause", "solution": "def sat(x: int, a, b):\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b", "title": "TP3/IfProblemWithAnd", "testing_code": "assert sat(-8040931, 9384594, 1343663) == True\nassert sat(40523023, 57, 40522966) == True\nassert sat(71682972, 29, 71683001) == True\nassert sat(8820494, 92, 8820402) == True\nassert sat(46712787, 64, 46712723) == True\nassert sat(5, 92, 8820402) == False\nassert sat(5, 57, 1343663) == False\nassert sat(5, 64, 1343663) == False\nassert sat(5, 29, 8820402) == False\nassert sat(8820494, 92, 5) == False\nassert sat(5, 92, 1343663) == False\nassert sat(5, 29, 1343663) == False\nassert sat(5, 29, 1343663) == False\nassert sat(5, 64, 8820402) == False\nassert sat(5, 92, 8820402) == False", "entry_fn_name": "sat"}
{"id": "268", "text": "Satisfy a simple if statement with an or clause", "solution": "def sat(x: int, a, b):\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b", "title": "TP3/IfProblemWithOr", "testing_code": "assert sat(1483732, 253532, 1230200) == True\nassert sat(-84904688, 22, -84904666) == True\nassert sat(74723532, 10, 74723522) == True\nassert sat(-39109341, 66, -39109407) == True\nassert sat(18773123, 24, 18773099) == True\nassert sat(1483732, 66, 5) == False\nassert sat(1483732, 22, 5) == False\nassert sat(1483732, 24, 5) == False\nassert sat(5, 66, 1230200) == False\nassert sat(5, 24, 1230200) == False\nassert sat(5, 10, 1230200) == False\nassert sat(5, 10, 1230200) == False\nassert sat(1483732, 10, 5) == False\nassert sat(1483732, 22, 5) == False\nassert sat(5, 24, 1230200) == False", "entry_fn_name": "sat"}
{"id": "269", "text": "Satisfy a simple if statement with multiple cases", "solution": "def sat(x: int, a, b):\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b", "title": "TP3/IfCases", "testing_code": "assert sat(54368635, 4, 54368639) == True\nassert sat(-83354926, -4, -83354930) == True\nassert sat(71965667, -3, 71965664) == True\nassert sat(36068128, 2, 36068130) == True\nassert sat(14385906, -3, 14385903) == True\nassert sat('14385906', '2', '14385903') == False\nassert sat('71965667', '2', '14385903') == False\nassert sat('36068128', '2', '14385903') == False\nassert sat('14385906', '2', '36068130') == False\nassert sat('14385906', '4', '36068130') == False\nassert sat('36068128', '4', '54368639') == False\nassert sat('14385906', '4', '71965664') == False\nassert sat('14385906', '4', '54368639') == False\nassert sat('36068128', '2', '36068130') == False\nassert sat('36068128', '4', '36068130') == False", "entry_fn_name": "sat"}
{"id": "270", "text": "Find a list of n non-negative integers that sum up to s", "solution": "def sat(x: List[int], n, s):\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])", "title": "TP3/ListPosSum", "testing_code": "assert sat([15, 1, 1, 1, 1], 5, 19) == True\nassert sat([], 5, 19) == False", "entry_fn_name": "sat"}
{"id": "271", "text": "Construct a list of n distinct integers that sum up to s", "solution": "def sat(x: List[int], n, s):\n    return len(x) == n and sum(x) == s and (len(set(x)) == n)", "title": "TP3/ListDistinctSum", "testing_code": "assert sat([1, -1, 2, 2019], 4, 2021) == True\nassert sat([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11, -11, 12, -12, 13, -13, 14, -14, 15, -15, 16, -16, 17, -17, 18, -18, 19, -19, 20, -20, 21, -21, 22, -22, 23, -23, 24, -24, 25, -25, 26, -26, 27, -27, 28, -28, 29, -29, 30, -30, 31, -31, 32, -32, 33, -33, 34, -34, 35, -35, 36, -36, 37, -37, 38, -38, 39, -39, 40, -40, 41, -41, 42, -42, 43, -43, 44, -44, 45, -45, 46, -46, 47, -47, 48, -48, 49, -49, 50, -50, 51, -51, 52, -52, 53, -53, 54, -54, 55, -55, 56, -56, 57, -57, 58, -58, 59, -59, 60, -60, 61, -61, 62, 2603027], 124, 2603089) == True\nassert sat([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11, -11, 12, -12, 13, -13, 14, -14, 15, -15, 16, -16, 17, -17, 18, -18, 19, -19, 20, -20, 21, -21, 22, -22, 23, -23, 24, -24, 25, -25, 26, -26, 27, -27, 28, -28, 29, -29, 30, -30, 31, -31, 32, -32, 33, -33, 34, -34, 35, -35, 36, -36, 37, -37, 38, -38, 39, -39, 40, -40, 41, -41, 42, -42, 43, -43, 44, -44, 45, -45, 46, -46, 47, -47, 48, -48, 49, -49, 50, -50, 51, -51, 52, -52, 53, -53, 54, -54, 55, -55, 56, -56, 57, -57, 58, -58, 59, -59, 60, -60, 61, -61, 62, -62, 63, -63, 64, -64, 65, -65, 66, -66, 67, -67, 68, -68, 69, -69, 70, -70, 71, -71, 72, -72, 73, -73, 74, -74, 75, -75, 76, -76, 77, -77, 78, -78, 79, -79, 80, -80, 81, -81, 82, -82, 83, -83, 84, -84, 85, -85, 86, -86, 87, -87, 88, -88, 89, -89, 90, -90, 91, -91, 92, -92, 93, -93, 94, -94, 95, -95, 96, -96, 97, -97, 98, -98, 99, -99, 100, -100, 101, -101, 102, -102, 103, -103, 104, -104, 105, -105, 106, -106, 107, -107, 108, -108, 109, -109, 110, -110, 111, -111, 112, -112, 113, -113, 114, -114, 115, -115, 116, -116, 117, -117, 118, -118, 119, -119, 120, -120, 121, -121, 122, -122, 123, -123, 124, -124, 125, -125, 126, -126, 127, -127, 128, -128, 129, -129, 130, -130, 131, -131, 132, -132, 133, -133, 134, -134, 135, -135, 136, -136, 137, -137, 138, -138, 139, -139, 140, -140, 141, -141, 142, -142, 143, -143, 144, -144, 145, -145, 146, -146, 147, -147, 148, -148, 149, -149, 150, -150, 151, -151, 152, -152, 153, -153, 154, -154, 155, -155, 156, -156, 157, -157, 158, -158, 159, -159, 160, -160, 161, -161, 162, -162, 163, -163, 164, -164, 165, -165, 166, -166, 167, -167, 168, -168, 169, -169, 170, -170, 171, -171, 172, -172, 173, -173, 174, -174, 175, -175, 176, -176, 177, -177, 178, -178, 179, -179, 180, -180, 181, -181, 182, -182, 183, -183, 184, -184, 185, -185, 186, -186, 187, -187, 188, -188, 189, -189, 190, -190, 191, -191, 192, -192, 193, -193, 194, -194, 195, -195, 196, -196, 197, -197, 198, -198, 199, -199, 200, -200, 201, -201, 202, -202, 203, -203, 204, -204, 205, -205, 206, -206, 207, -207, 208, -208, 209, -209, 210, -210, 211, -211, 212, -212, 213, -213, 214, -214, 215, -215, 216, -216, 217, -217, 218, -218, 219, -219, 220, -220, 221, -221, 222, -222, 223, -223, 224, -224, 225, -225, 226, -226, 227, -227, 228, -228, 229, -229, 230, -230, 231, -231, 232, -232, 233, -233, 234, -234, 235, -235, 236, -236, 237, -237, 238, -238, 239, -239, 240, -240, 241, -241, 242, -242, 243, -243, 244, -244, 245, -245, 246, -246, 247, -247, 248, -248, 249, -249, 250, -250, 251, -251, 252, -252, 253, -253, 254, -254, 255, -255, 256, -256, 257, -257, 258, -258, 259, -259, 260, -260, 261, -261, 262, -262, 263, -263, 264, -264, 265, -265, 266, -266, 267, -267, 268, -268, 269, -269, 270, -270, 271, -271, 272, -272, 273, -273, 274, -274, 275, -275, 276, -276, 277, -277, 278, -278, 279, -279, 280, -280, 281, -281, 282, -282, 283, -283, 284, -284, 285, -285, 286, -286, 287, -287, 288, -288, 289, -289, 290, -290, 291, -291, 292, -292, 293, -293, 294, -294, 295, -295, 296, -296, 297, -297, 298, -298, 299, -299, 300, -300, 301, -301, 302, -302, 303, -303, 304, -304, 305, -305, 306, -306, 307, -307, 308, -308, 309, -309, 310, -310, 311, -311, 312, -312, 313, -313, 314, -314, 315, -315, 316, -316, 317, -317, 318, -318, 319, -319, 320, -320, 321, -321, 322, -322, 323, -323, 324, -324, 325, -325, 326, -326, 327, -327, 328, -328, 329, -329, 330, -330, 331, -331, 332, -332, 333, -333, 334, -334, 335, -335, 336, -336, 337, -337, 338, -338, 339, -339, 340, -340, 341, -341, 342, -342, 343, -343, 344, -344, 345, -345, 346, -346, 347, -347, 348, -348, 349, -349, 350, -350, 351, -351, 352, -352, 353, -353, 354, -354, 355, -355, 356, -356, 357, -357, 358, -358, 359, -359, 360, -360, 361, -361, 362, -362, 363, -363, 364, -364, 365, -365, 366, -366, 367, -367, 368, -368, 369, -369, 370, -370, 371, -371, 372, -372, 373, -373, 374, -374, 375, -375, 376, -376, 377, -377, 378, -378, 379, -379, 380, -380, 381, -381, 382, -382, 383, -383, 384, -384, 385, -385, 386, -386, 387, -387, 388, -388, 389, -389, 390, -390, 391, -391, 392, -392, 393, -393, 394, -394, 395, -395, 396, -396, 397, -397, 398, -398, 399, -399, 400, -400, 401, -401, 402, -402, 403, -403, 404, -404, 405, -405, 406, -406, 407, -407, 408, -408, 409, -409, 410, -410, 411, -411, 8609609], 823, 8609609) == True\nassert sat([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11, -11, 12, -12, 13, -13, 14, -14, 15, -15, 16, -16, 17, -17, 18, -18, 19, -19, 20, -20, 21, -21, 22, -22, 23, -23, 24, -24, 25, -25, 26, -26, 27, -27, 28, -28, 29, -29, 30, -30, 31, -31, 32, -32, 33, -33, 34, -34, 35, -35, 36, -36, 37, -37, 38, -38, 39, -39, 40, -40, 41, -41, 42, -42, 43, -43, 44, -44, 45, -45, 46, -46, 47, -47, 48, -48, 49, -49, 50, -50, 51, -51, 52, -52, 53, -53, 54, -54, 55, -55, 56, -56, 57, -57, 58, -58, 59, -59, 60, -60, 61, -61, 62, -62, 63, -63, 64, -64, 65, -65, 66, -66, 67, -67, 68, -68, 69, -69, 70, -70, 71, -71, 72, -72, 73, -73, 74, -74, 75, -75, 76, -76, 77, -77, 78, -78, 79, -79, 80, -80, 81, -81, 82, -82, 83, -83, 84, -84, 85, -85, 86, -86, 87, -87, 88, -88, 89, -89, 90, -90, 91, -91, 92, -92, 93, -93, 94, -94, 95, -95, 96, -96, 97, -97, 98, -98, 99, -99, 100, -100, 101, -101, 102, -102, 103, -103, 104, -104, 105, -105, 106, -106, 107, -107, 108, -108, 109, -109, 110, -110, 111, -111, 112, -112, 113, -113, 114, -114, 115, -115, 116, -116, 117, -117, 118, -118, 119, -119, 120, -120, 121, -121, 122, -122, 123, -123, 124, -124, 125, -125, 126, -126, 127, -127, 128, -128, 129, -129, 130, -130, 131, -131, 132, -132, 133, -133, 134, -134, 135, -135, 136, -136, 137, -137, 138, -138, 139, -139, 140, -140, 141, -141, 142, -142, 143, -143, 144, -144, 145, -145, 146, -146, 147, -147, 148, -148, 149, -149, 150, -150, 151, -151, 152, -152, 153, -153, 154, -154, 155, -155, 156, -156, 157, -157, 158, -158, 159, -159, 160, -160, 161, -161, 162, -162, 163, -163, 164, -164, 165, -165, 166, -166, 167, -167, 168, -168, 169, -169, 170, -170, 171, -171, 172, -172, 173, -173, 174, -174, 175, -175, 176, -176, 177, -177, 178, -178, 179, -179, 180, -180, 181, -181, 182, -182, 183, -183, 184, -184, 185, -185, 186, -186, 187, -187, 188, -188, 189, -189, 190, -190, 191, -191, 192, -192, 193, -193, 194, -194, 195, -195, 196, -196, 197, -197, 198, -198, 199, -199, 200, -200, 201, -201, 202, -202, 203, -203, 204, -204, 205, -205, 206, -206, 207, -207, 208, -208, 209, -209, 210, -210, 211, -211, 212, -212, 213, -213, 214, -214, 215, -215, 216, -216, 217, -217, 218, -218, 219, -219, 220, -220, 221, -221, 222, -222, 223, -223, 224, -224, 225, -225, 226, -226, 227, -227, 228, -228, 229, -229, 230, -230, 231, -231, 232, -232, 233, -233, 234, -234, 235, -235, 236, -236, 237, -237, 238, -238, 239, -239, 240, -240, 241, -241, 242, -242, 243, -243, 244, -244, 245, -245, 246, -246, 247, -247, 248, -248, 249, -249, 250, -250, 251, -251, 252, -252, 253, -253, 254, -254, 255, -255, 256, -256, 257, -257, 258, -258, 259, -259, 260, -260, 261, -261, 262, -262, 263, -263, 264, -264, 265, -265, 266, -266, 267, -267, 268, -268, 269, -269, 270, -270, 271, -271, 272, -272, 273, -273, 274, -274, 275, -275, 276, -276, 277, -277, 278, -278, 279, -279, 280, -280, 281, -281, 282, -282, 283, -283, 284, -284, 285, -285, 286, -286, 287, -287, 288, -288, 289, -289, 290, -290, 291, -291, 292, -292, 293, -293, 294, -294, 295, -295, 296, -296, 297, -297, 298, -298, 299, -299, 300, -300, 301, -301, 302, -302, 303, -303, 304, -304, 305, -305, 306, -306, 307, -307, 308, -308, 309, -309, 310, -310, 311, -311, 312, -312, 313, -313, 314, -314, 315, -315, 316, -316, 317, -317, 318, -318, 319, -319, 320, -320, 321, -321, 322, -322, 323, -323, 324, -324, 325, -325, 326, -326, 327, -327, 328, -328, 329, -329, 330, -330, 331, -331, 332, -332, 333, -333, 334, -334, 335, -335, 336, -336, 337, -337, 338, -338, 339, -339, 340, -340, 341, -341, 342, -342, 343, -343, 344, -344, 345, -345, 346, -346, 347, -347, 348, -348, 349, -349, 350, -350, 351, -351, 352, -352, 353, -353, 354, -354, 355, -355, 356, -356, 357, -357, 358, -358, 359, -359, 360, -360, 361, -361, 362, -362, 363, -363, 364, -364, 365, -365, 366, -366, 367, -367, 368, -368, 369, -369, 370, -370, 371, -371, 372, -372, 373, -373, 374, -374, 375, -375, 376, -376, 377, -377, 378, -378, 379, -379, 380, -380, 381, -381, 382, -382, 383, -383, 384, -384, 385, -385, 386, -386, 387, -387, 388, -388, 389, -389, 390, -390, 391, -391, 392, -392, 393, -393, 394, -394, 395, -395, 396, -396, 397, -397, 398, 86694353], 796, 86694751) == True\nassert sat([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10, 11, -11, 12, -12, 13, -13, 14, -14, 15, -15, 16, -16, 17, -17, 18, -18, 19, -19, 20, -20, 21, -21, 22, -22, 23, -23, 24, -24, 25, -25, 26, -26, 27, -27, 28, -28, 29, -29, 30, -30, 31, -31, 32, -32, 33, -33, 34, -34, 35, -35, 36, -36, 37, -37, 38, -38, 39, -39, 40, -40, 41, -41, 42, -42, 43, -43, 44, -44, 45, -45, 46, -46, 47, -47, 48, -48, 49, -49, 50, -50, 51, -51, 52, -52, 53, -53, 54, -54, 55, -55, 56, -56, 57, -57, 58, -58, 59, -59, 60, -60, 61, -61, 62, -62, 63, -63, 64, -64, 65, -65, 66, -66, 67, -67, 68, -68, 69, -69, 70, -70, 71, -71, 72, -72, 73, -73, 74, -74, 75, -75, 76, -76, 77, -77, 78, -78, 79, -79, 80, -80, 81, -81, 82, -82, 83, -83, 84, -84, 85, -85, 86, -86, 87, -87, 88, -88, 89, -89, 90, -90, 91, -91, 92, -92, 93, -93, 94, -94, 95, -95, 96, -96, 97, -97, 98, -98, 99, -99, 100, -100, 101, -101, 102, -102, 103, -103, 104, -104, 105, -105, 106, -106, 107, -107, 108, -108, 109, -109, 110, -110, 111, -111, 112, -112, 38417364], 225, 38417364) == True\nassert sat('[1, -1, 2, 2019]', '796', '2603089') == False\nassert sat('[1, -1, 2, 2019]', '823', '8609609') == False\nassert sat('[1, -1, 2, 2019]', '796', '86694751') == False\nassert sat('[1, -1, 2, 2019]', '4', '2603089') == False\nassert sat('[1, -1, 2, 2019]', '124', '8609609') == False\nassert sat('[1, -1, 2, 2019]', '823', '2021') == False\nassert sat('[1, -1, 2, 2019]', '4', '86694751') == False\nassert sat([], 4, 2021) == False\nassert sat('[1, -1, 2, 2019]', '4', '8609609') == False\nassert sat('[1, -1, 2, 2019]', '225', '2021') == False", "entry_fn_name": "sat"}
{"id": "272", "text": "Concatenate the list of characters in s", "solution": "def sat(x: str, s, n):\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])", "title": "TP3/ConcatStrings", "testing_code": "assert sat('abcd', ['a', 'b', 'c', 'd', 'e', 'f'], 4) == True\nassert sat('I&W&pc-U( A(SWR#', ['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K'], 16) == True\nassert sat('LCbrtVR%R8V#<', ['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x'], 13) == True\nassert sat('-&)&cl/H', ['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5'], 8) == True\nassert sat('0@Rk$$t03#!awkqH', ['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], 16) == True\nassert sat('', ['a', 'b', 'c', 'd', 'e', 'f'], 4) == False", "entry_fn_name": "sat"}
{"id": "273", "text": "Sum values of sublist by range specifications", "solution": "def sat(x: List[int], t, a, e, s):\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all([x[i] != 0 for i in range(a, e, s)])", "title": "TP3/SublistSum", "testing_code": "assert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 43, 125, 10) == True\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 43, 5, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 5, 125, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 5, 43, 125, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 5, 125, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 43, 5, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 5, 43, 125, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 5, 125, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 5, 43, 125, 10) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 43, 125, 5) == False\nassert sat([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0], 677, 43, 5, 10) == False", "entry_fn_name": "sat"}
{"id": "274", "text": "Find how many values have cumulative sum less than target", "solution": "def sat(x: List[int], t, n):\n    if not all([v > 0 for v in x]):\n        return False\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n", "title": "TP3/CumulativeSum", "testing_code": "assert sat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50], 50, 10) == True\nassert sat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 364928431], 364928431, 1088) == True\nassert satrue\nassert sat([], 50, 10) == False", "entry_fn_name": "sat"}
{"id": "275", "text": "Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\nthe same 10 characters", "solution": "def sat(s: str, s1, s2, count1, count2):\n    return s.count(s1) == count1 and s.count(s2) == count2 and (s[:10] == s[-10:])", "title": "TP3/BasicStrCounts", "testing_code": "assert sat('??????????b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a???????????', 'a', 'b', 50, 30) == True\nassert sat('??????????qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t?t???????????', 't', 'qu', 86, 83) == True\nassert sat('??????????qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?qu?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc?kuc???????????', 'kuc', 'qu', 63, 58) == True\nassert sat('??????????tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?tex?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te?te???????????', 'te', 'tex', 97, 53) == True\nassert sat('??????????n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?n?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot?hot???????????', 'hot', 'n', 48, 92) == True\nassert sat('??????????b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a???????????', 'a', '', 50, 30) == False\nassert sat('??????????b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?b?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a???????????', '', 'b', 50, 30) == False\nassert sat('', 'a', 'b', 50, 30) == False", "entry_fn_name": "sat"}
{"id": "276", "text": "Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'", "solution": "def sat(s: str, substrings):\n    return all((sub in s[i::len(substrings)] for (i, sub) in enumerate(substrings)))", "title": "TP3/ZipStr", "testing_code": "assert sat('fbbooaadorzd   b   a   l   l', ['foo', 'bar', 'baz', 'oddball']) == True\nassert sat('qcguheiy fh ei lm oy tv ae  m  e  n  e ', ['quifelota', 'chyhimyvemene', 'ge']) == True\nassert sat('kcrriueotmbcyauotttrehe xo  tx  ia  rz  i   t   e   x   ', ['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']) == True\nassert sat('tweu s y c', ['te', 'wusyc']) == True\nassert sat('cruytseu c a j a x u n o', ['cute', 'rysucajaxuno']) == True\nassert sat('', ['foo', 'bar', 'baz', 'oddball']) == False", "entry_fn_name": "sat"}
{"id": "277", "text": "Find a string that contains all the substrings reversed and forward", "solution": "def sat(s: str, substrings):\n    return all((sub in s and sub[::-1] in s for sub in substrings))", "title": "TP3/ReverseCat", "testing_code": "assert sat('foobarbazoofrabzab', ['foo', 'bar', 'baz']) == True\nassert sat('kepijilufuwisejyzatlechogyvonaxegitextazyjesiwufulijipekxetigexanovygohcel', ['kepijilufuwisejyzat', 'lechogyvonaxegitex']) == True\nassert sat('ripihuquyrenytuquosafyjichyguzocuzuqufuthixequybutyneryuquhipirijyfasouququzucozugyhcbyuqexihtuf', ['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']) == True\nassert sat('thacovatukolivamaquyfezisothizypkabenegiquememifavilokutavocahtpyzihtosizefyuqamakfimemeuqigeneb', ['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']) == True\nassert sat('tvochemachylitvutextynydakelopifazapydomozamochugttilyhcamehcovipolekadynytxetuvguhcomazomodypazaf', ['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']) == True\nassert sat('', ['foo', 'bar', 'baz']) == False", "entry_fn_name": "sat"}
{"id": "278", "text": "Find a list of n strings, in alphabetical order, starting with a and ending with b.", "solution": "def sat(ls: List[str], n, a, b):\n    return len(ls) == len(set(ls)) == n and ls[0] == a and (ls[-1] == b) and (ls == sorted(ls))", "title": "TP3/EngineerNumbers", "testing_code": "assert sat(['bar', 'bar\\x000', 'bar\\x001', 'bar\\x0010', 'bar\\x0011', 'bar\\x0012', 'bar\\x0013', 'bar\\x0014', 'bar\\x0015', 'bar\\x0016', 'bar\\x0017', 'bar\\x0018', 'bar\\x0019', 'bar\\x002', 'bar\\x0020', 'bar\\x0021', 'bar\\x0022', 'bar\\x0023', 'bar\\x0024', 'bar\\x0025', 'bar\\x0026', 'bar\\x0027', 'bar\\x0028', 'bar\\x0029', 'bar\\x003', 'bar\\x0030', 'bar\\x0031', 'bar\\x0032', 'bar\\x0033', 'bar\\x0034', 'bar\\x0035', 'bar\\x0036', 'bar\\x0037', 'bar\\x0038', 'bar\\x0039', 'bar\\x004', 'bar\\x0040', 'bar\\x0041', 'bar\\x0042', 'bar\\x0043', 'bar\\x0044', 'bar\\x0045', 'bar\\x0046', 'bar\\x0047', 'bar\\x0048', 'bar\\x0049', 'bar\\x005', 'bar\\x0050', 'bar\\x0051', 'bar\\x0052', 'bar\\x0053', 'bar\\x0054', 'bar\\x0055', 'bar\\x0056', 'bar\\x0057', 'bar\\x0058', 'bar\\x0059', 'bar\\x006', 'bar\\x0060', 'bar\\x0061', 'bar\\x0062', 'bar\\x0063', 'bar\\x0064', 'bar\\x0065', 'bar\\x0066', 'bar\\x0067', 'bar\\x0068', 'bar\\x0069', 'bar\\x007', 'bar\\x0070', 'bar\\x0071', 'bar\\x0072', 'bar\\x0073', 'bar\\x0074', 'bar\\x0075', 'bar\\x0076', 'bar\\x0077', 'bar\\x0078', 'bar\\x0079', 'bar\\x008', 'bar\\x0080', 'bar\\x0081', 'bar\\x0082', 'bar\\x0083', 'bar\\x0084', 'bar\\x0085', 'bar\\x0086', 'bar\\x0087', 'bar\\x0088', 'bar\\x0089', 'bar\\x009', 'bar\\x0090', 'bar\\x0091', 'bar\\x0092', 'bar\\x0093', 'bar\\x0094', 'bar\\x0095', 'bar\\x0096', 'bar\\x0097', 'foo'], 100, 'bar', 'foo') == True\nassert sat(['lychezothotextocev', 'lychezothotextocev\\x000', 'lychezothotextocev\\x001', 'lychezothotextocev\\x0010', 'lychezothotextocev\\x0011', 'lychezothotextocev\\x0012', 'lychezothotextocev\\x0013', 'lychezothotextocev\\x0014', 'lychezothotextocev\\x0015', 'lychezothotextocev\\x0016', 'lychezothotextocev\\x0017', 'lychezothotextocev\\x0018', 'lychezothotextocev\\x0019', 'lychezothotextocev\\x002', 'lychezothotextocev\\x0020', 'lychezothotextocev\\x0021', 'lychezothotextocev\\x0022', 'lychezothotextocev\\x0023', 'lychezothotextocev\\x0024', 'lychezothotextocev\\x0025', 'lychezothotextocev\\x0026', 'lychezothotextocev\\x0027', 'lychezothotextocev\\x0028', 'lychezothotextocev\\x0029', 'lychezothotextocev\\x003', 'lychezothotextocev\\x0030', 'lychezothotextocev\\x0031', 'lychezothotextocev\\x0032', 'lychezothotextocev\\x0033', 'lychezothotextocev\\x0034', 'lychezothotextocev\\x0035', 'lychezothotextocev\\x0036', 'lychezothotextocev\\x0037', 'lychezothotextocev\\x0038', 'lychezothotextocev\\x0039', 'lychezothotextocev\\x004', 'lychezothotextocev\\x0040', 'lychezothotextocev\\x0041', 'lychezothotextocev\\x005', 'lychezothotextocev\\x006', 'lychezothotextocev\\x007', 'lychezothotextocev\\x008', 'lychezothotextocev\\x009', 'th'], 44, 'lychezothotextocev', 'th') == True\nassert sat(['kacukebyhapuniryh', 'kacukebyhapuniryh\\x000', 'kacukebyhapuniryh\\x001', 'kacukebyhapuniryh\\x0010', 'kacukebyhapuniryh\\x002', 'kacukebyhapuniryh\\x003', 'kacukebyhapuniryh\\x004', 'kacukebyhapuniryh\\x005', 'kacukebyhapuniryh\\x006', 'kacukebyhapuniryh\\x007', 'kacukebyhapuniryh\\x008', 'kacukebyhapuniryh\\x009', 'te'], 13, 'kacukebyhapuniryh', 'te') == True\nassert sat(['cisoceratext', 'cisoceratext\\x000', 'cisoceratext\\x001', 'cisoceratext\\x0010', 'cisoceratext\\x0011', 'cisoceratext\\x0012', 'cisoceratext\\x0013', 'cisoceratext\\x0014', 'cisoceratext\\x0015', 'cisoceratext\\x0016', 'cisoceratext\\x0017', 'cisoceratext\\x0018', 'cisoceratext\\x0019', 'cisoceratext\\x002', 'cisoceratext\\x0020', 'cisoceratext\\x0021', 'cisoceratext\\x0022', 'cisoceratext\\x0023', 'cisoceratext\\x0024', 'cisoceratext\\x0025', 'cisoceratext\\x0026', 'cisoceratext\\x0027', 'cisoceratext\\x0028', 'cisoceratext\\x0029', 'cisoceratext\\x003', 'cisoceratext\\x0030', 'cisoceratext\\x0031', 'cisoceratext\\x0032', 'cisoceratext\\x0033', 'cisoceratext\\x0034', 'cisoceratext\\x0035', 'cisoceratext\\x0036', 'cisoceratext\\x0037', 'cisoceratext\\x0038', 'cisoceratext\\x0039', 'cisoceratext\\x004', 'cisoceratext\\x0040', 'cisoceratext\\x0041', 'cisoceratext\\x0042', 'cisoceratext\\x0043', 'cisoceratext\\x0044', 'cisoceratext\\x0045', 'cisoceratext\\x0046', 'cisoceratext\\x0047', 'cisoceratext\\x0048', 'cisoceratext\\x0049', 'cisoceratext\\x005', 'cisoceratext\\x0050', 'cisoceratext\\x0051', 'cisoceratext\\x0052', 'cisoceratext\\x0053', 'cisoceratext\\x0054', 'cisoceratext\\x0055', 'cisoceratext\\x0056', 'cisoceratext\\x0057', 'cisoceratext\\x0058', 'cisoceratext\\x006', 'cisoceratext\\x007', 'cisoceratext\\x008', 'cisoceratext\\x009', 'milusicochylitextyco'], 61, 'cisoceratext', 'milusicochylitextyco') == True\nassert sat(['hokitextawelaxah', 'hokitextawelaxah\\x000', 'hokitextawelaxah\\x001', 'hokitextawelaxah\\x0010', 'hokitextawelaxah\\x0011', 'hokitextawelaxah\\x0012', 'hokitextawelaxah\\x0013', 'hokitextawelaxah\\x0014', 'hokitextawelaxah\\x0015', 'hokitextawelaxah\\x0016', 'hokitextawelaxah\\x0017', 'hokitextawelaxah\\x0018', 'hokitextawelaxah\\x0019', 'hokitextawelaxah\\x002', 'hokitextawelaxah\\x0020', 'hokitextawelaxah\\x0021', 'hokitextawelaxah\\x0022', 'hokitextawelaxah\\x0023', 'hokitextawelaxah\\x0024', 'hokitextawelaxah\\x0025', 'hokitextawelaxah\\x0026', 'hokitextawelaxah\\x0027', 'hokitextawelaxah\\x0028', 'hokitextawelaxah\\x0029', 'hokitextawelaxah\\x003', 'hokitextawelaxah\\x0030', 'hokitextawelaxah\\x0031', 'hokitextawelaxah\\x0032', 'hokitextawelaxah\\x0033', 'hokitextawelaxah\\x0034', 'hokitextawelaxah\\x0035', 'hokitextawelaxah\\x0036', 'hokitextawelaxah\\x0037', 'hokitextawelaxah\\x0038', 'hokitextawelaxah\\x0039', 'hokitextawelaxah\\x004', 'hokitextawelaxah\\x0040', 'hokitextawelaxah\\x0041', 'hokitextawelaxah\\x0042', 'hokitextawelaxah\\x0043', 'hokitextawelaxah\\x0044', 'hokitextawelaxah\\x0045', 'hokitextawelaxah\\x0046', 'hokitextawelaxah\\x0047', 'hokitextawelaxah\\x0048', 'hokitextawelaxah\\x0049', 'hokitextawelaxah\\x005', 'hokitextawelaxah\\x0050', 'hokitextawelaxah\\x0051', 'hokitextawelaxah\\x0052', 'hokitextawelaxah\\x0053', 'hokitextawelaxah\\x0054', 'hokitextawelaxah\\x0055', 'hokitextawelaxah\\x0056', 'hokitextawelaxah\\x006', 'hokitextawelaxah\\x007', 'hokitextawelaxah\\x008', 'hokitextawelaxah\\x009', 'maryhedu'], 59, 'hokitextawelaxah', 'maryhedu') == True\nassert sat([], 100, 'bar', 'foo') == False", "entry_fn_name": "sat"}
{"id": "279", "text": "Find the alphabetically second to last last string in a list.", "solution": "def sat(s: str, strings):\n    return s in strings and sum((t > s for t in strings)) == 1", "title": "TP3/PenultimateString", "testing_code": "assert sat('fly', ['cat', 'dog', 'bird', 'fly', 'moose']) == True\nassert sat('sovywos', ['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']) == True\nassert sat('pythujutisoxofe', ['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']) == True\nassert sat('xyzeryberi', ['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']) == True\nassert sat('xasuwytextochypuli', ['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']) == True\nassert sat('fly', []) == False\nassert sat('', ['cat', 'dog', 'bird', 'fly', 'moose']) == False", "entry_fn_name": "sat"}
{"id": "280", "text": "Find the reversed version of the alphabetically second string in a list.", "solution": "def sat(s: str, strings):\n    return s[::-1] in strings and sum((t < s[::-1] for t in strings)) == 1", "title": "TP3/PenultimateRevString", "testing_code": "assert sat('tac', ['cat', 'dog', 'bird', 'fly', 'moose']) == True\nassert sat('xobezej', ['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']) == True\nassert sat('yhahahimynojytyhtag', ['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']) == True\nassert sat('cavofidakinanycibah', ['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']) == True\nassert sat('tesotaxegawohcatug', ['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']) == True\nassert sat('tac', []) == False\nassert sat('', ['cat', 'dog', 'bird', 'fly', 'moose']) == False", "entry_fn_name": "sat"}
{"id": "281", "text": "Find a substring of the given length centered within the target string.", "solution": "def sat(s: str, target, length):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s", "title": "TP3/CenteredString", "testing_code": "assert sat('barbaz', 'foobarbazwow', 6) == True\nassert sat('j', 'rujus', 1) == True\nassert sat('bulu', 'bulu', 4) == True\nassert sat('uhujuwi', 'defojuhujuwilumec', 7) == True\nassert sat('enuhij', 'tenuhije', 6) == True\nassert sat('', 'foobarbazwow', 6) == False\nassert sat('barbaz', '', 6) == False", "entry_fn_name": "sat"}
{"id": "282", "text": "Find a substring with a certain count in a given string", "solution": "def sat(substring: str, string, count):\n    return string.count(substring) == count", "title": "TP3/SubstrCount", "testing_code": "assert sat('ooo', 'moooboooofasd', 2) == True\nassert sat('q', 'nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme', 4) == True\nassert sat('o', 'cokomoquiwythyluwamymothynihythenyfeteth', 4) == True\nassert sat('c', 'cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf', 3) == True\nassert sat('y', 'modacequytextytextilaleguthovamipehywaciripetext', 3) == True\nassert sat('ooo', '', 2) == False\nassert sat('', 'moooboooofasd', 2) == False", "entry_fn_name": "sat"}
{"id": "283", "text": "Add parentheses to the beginning and end of s to make all parentheses balanced", "solution": "def sat(t: str, s):\n    for i in range(len(t) + 1):\n        depth = t[:i].count('(') - t[:i].count(')')\n        if not depth >= 0:\n            return False\n    return depth == 0 and s in t", "title": "TP3/CompleteParens", "testing_code": "assert sat('(((((((((())(Add)some))parens()to()(balance(()(()(me!)(((()))))))))))))', '))(Add)some))parens()to()(balance(()(()(me!)((((') == True\nassert sat('((((((((((po)(())kf((((cy()))((tex()())()))))))))))))', '(po)(())kf((((cy()))((tex()())(') == True\nassert sat('((((((yf)()(()))hik()t((()))))))', 'yf)()(()))hik()t(((') == True\nassert sat('((((((((((((((((((()((le(()()chu)())nol))((sic(((da)()ty((()te))xy(())))))k)))))))))))))))))', ')((le(()()chu)())nol))((sic(((da)()ty((()te))xy(())))))k') == True\nassert sat('(((())())l)', '))())l') == True\nassert sat('', '))(Add)some))parens()to()(balance(()(()(me!)((((') == False", "entry_fn_name": "sat"}
{"id": "284", "text": "Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.", "solution": "def sat(squares: List[List[int]], m, n):\n    k = min(m, n)\n    if not (all((i in range(m) and j in range(n) for (i, j) in squares)) and len(squares) == k):\n        return False\n    return 4 * k == len({t for (i, j) in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})", "title": "TP3/EightQueensOrFewer", "testing_code": "assert sat([[0, 0], [1, 4], [2, 7], [3, 5], [4, 2], [5, 6], [6, 1], [7, 3]], 8, 8) == True\nassert sat([[0, 1], [1, 3], [2, 5], [3, 0], [4, 2], [5, 4]], 9, 6) == True\nassert sat([[0, 1], [1, 3], [2, 0], [3, 2]], 59, 4) == True\nassert sat([[0, 0], [1, 4], [2, 7], [3, 5], [4, 2], [5, 6], [6, 1], [7, 3]], 38, 8) == True\nassert sat([[0, 1], [1, 3], [2, 0], [3, 2]], 9, 4) == True\nassert sat([], 8, 8) == False", "entry_fn_name": "sat"}
{"id": "285", "text": "Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.", "solution": "def sat(squares: List[List[int]], m, n):\n    k = min(m, n)\n    if not all((i in range(m) and j in range(n) for (i, j) in squares)):\n        return False\n    if not len(squares) == k:\n        return False\n    if not len({i for (i, j) in squares}) == k:\n        return False\n    if not len({j for (i, j) in squares}) == k:\n        return False\n    if not len({i + j for (i, j) in squares}) == k:\n        return False\n    if not len({i - j for (i, j) in squares}) == k:\n        return False\n    return True", "title": "TP3/MoreQueens", "testing_code": "assert sat([[8, 8], [0, 3], [1, 5], [2, 7], [3, 1], [4, 6], [5, 0], [6, 2], [7, 4]], 9, 9) == True\nassert sat([[78, 78], [0, 1], [1, 3], [2, 5], [3, 7], [4, 9], [5, 11], [6, 13], [7, 15], [8, 17], [9, 19], [10, 21], [11, 23], [12, 25], [13, 27], [14, 29], [15, 31], [16, 33], [17, 35], [18, 37], [19, 39], [20, 41], [21, 43], [22, 45], [23, 47], [24, 49], [25, 51], [26, 53], [27, 55], [28, 57], [29, 59], [30, 61], [31, 63], [32, 65], [33, 67], [34, 69], [35, 71], [36, 73], [37, 75], [38, 77], [39, 0], [40, 2], [41, 4], [42, 6], [43, 8], [44, 10], [45, 12], [46, 14], [47, 16], [48, 18], [49, 20], [50, 22], [51, 24], [52, 26], [53, 28], [54, 30], [55, 32], [56, 34], [57, 36], [58, 38], [59, 40], [60, 42], [61, 44], [62, 46], [63, 48], [64, 50], [65, 52], [66, 54], [67, 56], [68, 58], [69, 60], [70, 62], [71, 64], [72, 66], [73, 68], [74, 70], [75, 72], [76, 74], [77, 76]], 79, 95) == True\nassert sat([[0, 39], [1, 41], [2, 43], [3, 45], [4, 47], [5, 49], [6, 51], [7, 53], [8, 55], [9, 57], [10, 59], [11, 61], [12, 63], [13, 65], [14, 67], [15, 69], [16, 71], [17, 73], [18, 75], [19, 77], [20, 79], [21, 1], [22, 3], [23, 5], [24, 7], [25, 9], [26, 11], [27, 13], [28, 15], [29, 17], [30, 19], [31, 21], [32, 23], [33, 25], [34, 27], [35, 29], [36, 31], [37, 33], [38, 35], [39, 37], [40, 42], [41, 44], [42, 46], [43, 48], [44, 50], [45, 52], [46, 54], [47, 56], [48, 58], [49, 60], [50, 62], [51, 64], [52, 66], [53, 68], [54, 70], [55, 72], [56, 74], [57, 76], [58, 78], [59, 0], [60, 2], [61, 4], [62, 6], [63, 8], [64, 10], [65, 12], [66, 14], [67, 16], [68, 18], [69, 20], [70, 22], [71, 24], [72, 26], [73, 28], [74, 30], [75, 32], [76, 34], [77, 36], [78, 38], [79, 40]], 80, 88) == True\nassert sat([[0, 1], [1, 3], [2, 5], [3, 7], [4, 9], [5, 11], [6, 13], [7, 15], [8, 0], [9, 2], [10, 4], [11, 6], [12, 8], [13, 10], [14, 12], [15, 14]], 56, 16) == True\nassert sat([[22, 22], [0, 1], [1, 3], [2, 5], [3, 7], [4, 9], [5, 11], [6, 13], [7, 15], [8, 17], [9, 19], [10, 21], [11, 0], [12, 2], [13, 4], [14, 6], [15, 8], [16, 10], [17, 12], [18, 14], [19, 16], [20, 18], [21, 20]], 23, 45) == True\nassert sat([], 9, 9) == False", "entry_fn_name": "sat"}
{"id": "286", "text": "Find an (open) tour of knight moves on an m x n chess-board that visits each square once.", "solution": "def sat(tour: List[List[int]], m, n):\n    if not all(({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for ([i1, j1], [i2, j2]) in zip(tour, tour[1:]))):\n        return False\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]", "title": "TP3/KnightsTour", "testing_code": "assert sat([[0, 0], [2, 1], [4, 0], [6, 1], [7, 3], [6, 5], [7, 7], [5, 6], [3, 7], [1, 6], [0, 4], [1, 2], [2, 0], [0, 1], [1, 3], [0, 5], [1, 7], [2, 5], [0, 6], [2, 7], [4, 6], [6, 7], [7, 5], [5, 4], [6, 6], [7, 4], [6, 2], [7, 0], [5, 1], [3, 0], [1, 1], [3, 2], [2, 4], [0, 3], [1, 5], [0, 7], [2, 6], [4, 7], [3, 5], [1, 4], [0, 2], [1, 0], [2, 2], [4, 1], [6, 0], [7, 2], [5, 3], [3, 4], [4, 2], [5, 0], [7, 1], [6, 3], [4, 4], [2, 3], [3, 1], [5, 2], [3, 3], [4, 5], [5, 7], [3, 6], [5, 5], [4, 3], [6, 4], [7, 6]], 8, 8) == True\nassert sat([[0, 0], [2, 1], [4, 0], [6, 1], [8, 0], [7, 2], [8, 4], [7, 6], [8, 8], [6, 7], [8, 6], [7, 8], [5, 7], [3, 8], [1, 7], [0, 5], [1, 3], [0, 1], [2, 0], [1, 2], [0, 4], [2, 5], [0, 6], [1, 8], [3, 7], [5, 8], [7, 7], [8, 5], [7, 3], [8, 1], [6, 0], [4, 1], [3, 3], [1, 4], [0, 2], [1, 0], [3, 1], [5, 2], [7, 1], [5, 0], [6, 2], [8, 3], [6, 4], [4, 5], [2, 6], [0, 7], [2, 8], [1, 6], [0, 8], [2, 7], [4, 8], [5, 6], [6, 8], [8, 7], [7, 5], [5, 4], [6, 6], [4, 7], [3, 5], [2, 3], [1, 5], [3, 6], [2, 4], [0, 3], [1, 1], [3, 0], [2, 2], [4, 3], [5, 1], [7, 0], [8, 2], [7, 4], [5, 5], [6, 3], [4, 2], [3, 4], [4, 6], [6, 5], [5, 3], [3, 2], [4, 4]], 9, 9) == True\nassert sat([[0, 0], [2, 1], [4, 0], [6, 1], [5, 3], [6, 5], [4, 6], [2, 5], [0, 6], [1, 4], [0, 2], [1, 0], [3, 1], [5, 0], [6, 2], [4, 1], [6, 0], [5, 2], [3, 3], [5, 4], [6, 6], [4, 5], [2, 6], [0, 5], [1, 3], [0, 1], [2, 0], [1, 2], [0, 4], [1, 6], [3, 5], [5, 6], [6, 4], [4, 3], [2, 2], [3, 0], [5, 1], [6, 3], [5, 5], [3, 4], [4, 2], [2, 3], [1, 1], [0, 3], [1, 5], [3, 6], [4, 4], [3, 2], [2, 4]], 7, 7) == True\nassert sat([[0, 0], [2, 1], [4, 0], [5, 2], [4, 4], [2, 5], [0, 4], [1, 2], [2, 0], [0, 1], [1, 3], [0, 5], [2, 4], [4, 5], [3, 3], [5, 4], [3, 5], [1, 4], [0, 2], [1, 0], [3, 1], [5, 0], [4, 2], [2, 3], [1, 5], [0, 3], [1, 1], [3, 2], [5, 3], [4, 1], [2, 2], [3, 4], [5, 5], [4, 3], [5, 1], [3, 0]], 6, 6) == True\nassert sat([[0, 0], [2, 1], [4, 0], [6, 1], [5, 3], [6, 5], [5, 7], [3, 6], [1, 7], [0, 5], [1, 3], [0, 1], [2, 0], [4, 1], [6, 0], [5, 2], [6, 4], [5, 6], [3, 7], [1, 6], [0, 4], [1, 2], [3, 3], [4, 5], [6, 6], [4, 7], [2, 6], [0, 7], [1, 5], [0, 3], [2, 4], [3, 2], [1, 1], [3, 0], [5, 1], [6, 3], [4, 4], [2, 5], [0, 6], [2, 7], [4, 6], [6, 7], [5, 5], [3, 4], [4, 2], [5, 0], [6, 2], [5, 4], [3, 5], [1, 4], [2, 2], [4, 3], [3, 1], [1, 0], [0, 2], [2, 3]], 7, 8) == True\nassert sat([], 8, 8) == False", "entry_fn_name": "sat"}
{"id": "287", "text": "Find a (short) compression that decompresses to the given string for the provided implementation of the\nLempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch", "solution": "def sat(seq: List[int], compressed_len, text):\n    index = [chr(i) for i in range(256)]\n    pieces = ['']\n    for i in seq:\n        pieces.append(pieces[-1] + pieces[-1][0] if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return ''.join(pieces) == text and len(seq) <= compressed_len", "title": "TP3/LZW", "testing_code": "assert sat([72, 101, 108, 108, 111, 261, 262, 263, 264, 265, 32, 119, 111, 114, 108, 100, 33], 17, 'Hellooooooooooooooooooooo world!') == True\nassert sat([], 0, '') == True\nassert sat([99, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 265], 45, 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc') == True\nassert sat([99, 117, 112, 101, 119, 111, 113, 117, 97, 98, 105, 259, 109, 101, 99, 97, 99, 105, 99, 104, 121, 116, 111, 103, 121, 99, 121, 107, 277, 276, 122, 121, 100, 105, 122, 117, 116, 101, 120, 278, 106, 111, 107, 111, 115, 97, 112, 121, 115, 101, 293, 295, 306, 104, 105, 108, 265, 101, 263, 121, 112, 97, 103, 274, 310, 275, 105, 109, 267, 121, 104, 117, 263, 105, 116, 286, 117, 119, 117, 284, 275, 281, 298, 105, 103, 111, 109, 121, 108, 111, 307, 278, 263, 111, 275, 272, 310, 107, 97, 345, 99, 101, 106, 105, 119, 121, 122, 318, 111, 100, 346, 310, 108, 285, 306, 105, 315, 112, 105, 114, 265, 97, 102, 117, 115, 117, 98, 97, 381, 102, 344, 358, 117, 108, 330, 117, 366, 115, 105, 115, 121, 376, 104, 101, 122, 330, 294, 278, 108, 328, 117, 101, 118, 121], 154, 'cupewoquabipemecacichytogycykythyzydizutextojokosapysetextethilabequypagichichimipyhuquithyzuwukychycokigomylotextoquochachikalocejiwyzagodothilythetiquypirabafusubasufylejulitudosisyrahezitextoluquevy') == True\nassert sat([115, 105], 2, 'si') == True\nassert sat([72, 101, 108, 108, 111, 261, 262, 263, 264, 265, 32, 119, 111, 114, 108, 100, 33], 17, '') == False\nassert sat([], 17, 'Hellooooooooooooooooooooo world!') == False", "entry_fn_name": "sat"}
{"id": "288", "text": "Pack a certain number of binary strings so that they have a minimum hamming distance between each other.", "solution": "def sat(words: List[str], num, bits, dist):\n    if not (len(words) == num and all((len(word) == bits and set(word) <= {'0', '1'} for word in words))):\n        return False\n    return all((sum([a != b for (a, b) in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i)))", "title": "TP3/PackingHam", "testing_code": "assert sat(['110000100000100100110001010011111011011111011111011011000001011000000011111001101', '000010100101110100110101110101010100101000101010111100011111001110000011010000010', '100000101110001011111011100101000101101001111101001000010010010000101111000111010', '111010110001000100110011110101001110000110111100001111100011001011100000111100101', '010011011010010111101010001110001001111010110000011001000101001110000011000111001'], 5, 81, 30) == True\nassert satrue\nassert sat(['11011000001', '01100010100', '11000010000', '11100011111', '01101011101', '00001010010', '01000010010', '11110111001', '10000010111', '01111100011', '01100111101', '11101011000', '11001000101', '11010100011', '01001101101', '11110111110', '01111010000', '01011011101', '10010101010', '11100100010', '11101000011', '00110111111', '10000001001', '00100011101', '01001000001', '00100011110', '11000001011', '00011000010'], 28, 11, 1) == True\nassert sat(['110000100000110001010011111011011111011111011011000001011000000011111001101', '000010100100110101110101010100101000101010111100011111001110000011010000010', '100000101111111011100101000101101001111101001000010010010000101111000111010', '111010110000110011110101001110000110111100001111100011001011100000111100101', '010011011011101010001110001001111010110000011001000101001110000011000111001', '010110111010111101000000010010000100000010011110111110000011011110110000111', '111010000111110010001000011110111110111100010010101010110001000011001111111', '001000111011000000100110011001010000111011000110111111010111101110011011001'], 8, 75, 24) == True\nassert sat([], 5, 81, 30) == False", "entry_fn_name": "sat"}
{"id": "289", "text": "Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\nwith a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life", "solution": "def sat(init: List[List[int]], period):\n    target = {x + y * 1j for (x, y) in init}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum((z + d in live for d in deltas)) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period", "title": "TP3/Oscillators", "testing_code": "assert sat([[-6, 2], [6, -2], [-1, 2], [-6, 4], [1, 2], [-1, 4], [6, 2], [1, 4], [-4, 6], [-3, 6], [-2, 6], [6, 4], [2, 6], [3, 6], [4, 6], [-6, -3], [-1, -2], [-1, -3], [1, -3], [6, -3], [-4, 1], [-3, 1], [-2, 1], [-6, 3], [2, 1], [3, 1], [4, 1], [-1, 3], [1, 3], [6, 3], [-4, -6], [-3, -6], [-2, -6], [-6, -4], [2, -6], [3, -6], [4, -6], [-1, -4], [-6, -2], [1, -4], [-4, -1], [-3, -1], [-2, -1], [6, -4], [1, -2], [2, -1], [3, -1], [4, -1]], 3) == True\nassert sat([], 1) == True\nassert sat([[-1, -7], [0, -7], [1, -7], [-1, 7], [0, 7], [1, 7]], 2) == True\nassert sat([], 3) == False", "entry_fn_name": "sat"}
{"id": "290", "text": "Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\nspecified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.", "solution": "def sat(position: List[List[int]], target):\n    live = {x + y * 1j for (x, y) in position}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum((z + d in live for d in deltas)) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for (x, y) in target}", "title": "TP3/ReverseLifeStep", "testing_code": "assert sat([[-3, 3], [0, 3], [-2, 4], [1, 4], [2, 4], [-3, 7], [3, 6], [0, 11], [3, -7], [4, -6], [-3, -2], [4, -4], [-4, -3]], [[1, 3], [1, 4], [2, 5]]) == True\nassert sat([], []) == True\nassert sat([[-1, -4], [0, -4], [1, -4], [-1, -3], [0, -2]], [[-1, -4], [-1, -3], [0, -5], [0, -4], [1, -3]]) == True\nassert sat([[4, 4], [4, 2], [1, 3], [2, 4]], [[3, 3]]) == True\nassert sat([[5, -8], [4, -7], [0, -4], [2, -5], [0, -3]], [[1, -4]]) == True\nassert sat([], [[1, 3], [1, 4], [2, 5]]) == False\nassert sat([[-3, 3], [0, 3], [-2, 4], [1, 4], [2, 4], [-3, 7], [3, 6], [0, 11], [3, -7], [4, -6], [-3, -2], [4, -4], [-4, -3]], []) == False", "entry_fn_name": "sat"}
{"id": "291", "text": "Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\nremoving one or more objects from a single non-empty heap. The player who takes the last object wins.\n- initial_state is list of numbers of objects in each heap\n- moves is a list of your moves: [heap, number of objects to take]\n- you play first", "solution": "def sat(moves: List[List[int]], initial_state):\n\n    def bot_move():\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])\n        state[i_largest] -= max(vals[0] - vals[1], 1)\n    state = initial_state[:]\n    for (i, n) in moves:\n        if not 0 < n <= state[i]:\n            return False\n        state[i] -= n\n        if set(state) == {0}:\n            return True\n        if not any(state):\n            return False\n        bot_move()", "title": "TP3/Nim", "testing_code": "assert sat([[1, 9], [3, 11], [2, 3], [7, 1], [0, 1], [6, 1], [5, 1], [5, 1], [5, 1], [5, 1], [0, 1], [8, 1], [0, 1], [7, 1], [0, 1], [8, 3], [0, 1], [9, 1], [5, 1], [5, 1], [5, 1], [5, 1], [5, 1], [5, 1], [5, 1], [5, 1]], [5, 9, 3, 11, 18, 25, 1, 2, 4, 1]) == True\nassert sat([[6, 1], [1, 1], [5, 1], [4, 1], [6, 1], [5, 1], [5, 1], [2, 1], [5, 1], [2, 1], [5, 1], [2, 1], [5, 1], [2, 1], [5, 1]], [4, 1, 8, 0, 5, 9, 2, 0]) == True\nassert sat([[0, 1], [2, 2], [0, 1], [2, 1], [3, 1], [3, 1], [3, 1], [3, 1]], [2, 5, 3, 7, 0]) == True\nassert sat([[5, 5], [1, 1], [5, 1], [1, 1], [3, 1], [5, 1], [1, 1], [3, 1], [5, 1]], [3, 3, 2, 2, 3, 8]) == True\nassert sat([[1, 2], [2, 3], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]], [5, 8, 3, 0]) == True\nassert sat([[1, 2]], [4, 1, 8, 0, 5, 9, 2, 0]) == False\nassert sat([[1, 2]], [4, 1, 8, 0, 5, 9, 2, 0]) == False\nassert sat([[0, 1], [2, 2], [0, 1], [2, 1], [3, 1], [3, 1], [3, 1], [3, 1]], [0]) == False\nassert sat([[1, 2]], [4, 1, 8, 0, 5, 9, 2, 0]) == False\nassert sat([[0, 1], [2, 2], [0, 1], [2, 1], [3, 1], [3, 1], [3, 1], [3, 1]], [0]) == False\nassert sat([[1, 2]], [4, 1, 8, 0, 5, 9, 2, 0]) == False\nassert sat([[1, 2]], [4, 1, 8, 0, 5, 9, 2, 0]) == False\nassert sat([[0, 1], [2, 2], [0, 1], [2, 1], [3, 1], [3, 1], [3, 1], [3, 1]], [0]) == False\nassert sat([[0, 1], [2, 2], [0, 1], [2, 1], [3, 1], [3, 1], [3, 1], [3, 1]], [0]) == False\nassert sat([[0, 1], [2, 2], [0, 1], [2, 1], [3, 1], [3, 1], [3, 1], [3, 1]], [0]) == False", "entry_fn_name": "sat"}
{"id": "292", "text": "Compute a strategy for X (first player) in tic-tac-toe that guarantees a tie. That is a strategy for X that,\nno matter what the opponent does, X does not lose.\nA board is represented as a 9-char string like an X in the middle would be \"....X....\" and a\nmove is an integer 0-8. The answer is a list of \"good boards\" that X aims for, so no matter what O does there\nis always good board that X can get to with a single move.", "solution": "def sat(good_boards: List[str]):\n    board_bit_reps = {tuple((sum((1 << i for i in range(9) if b[i] == c)) for c in 'XO')) for b in good_boards}\n    win = [any((i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448])) for i in range(512)]\n\n    def tie(x, o):\n        x |= 1 << [i for i in range(9) if (x | 1 << i, o) in board_bit_reps][0]\n        return not win[o] and (win[x] or all(((x | o) & 1 << i or tie(x, o | 1 << i) for i in range(9))))\n    return tie(0, 0)", "title": "TP3/TicTacToeX", "testing_code": "assert sat(['XOXOXOX..', 'XOXOXXOOX', 'XOXOXXOXO', 'XOXOXXO..', 'XOXOXXOOX', 'XOXOXXXOO', 'XOXOXX.O.', 'XOXOXXOXO', 'XOXOXXXOO', 'XOXOXX..O', 'XOXOX....', 'XOXXOOX..', 'XOXXOOOXX', 'XOXXOXOXO', 'XOXXO.OX.', 'XOXOOXOXX', 'XOXOOXXXO', 'XOXOOX.X.', 'XOXOOXOXX', 'XOXXOXOXO', 'XOX.OXOX.', 'XOXOOXOXX', 'XOXOOXXXO', 'XOXOOX.X.', 'XOXXOOOXX', 'XOXXOOXXO', 'XOXXOO.X.', 'XOXXOOOXX', 'XOXXOXOXO', 'XOXXO.OX.', 'XOXXOOXXO', 'XOXXOXOXO', 'XOXXO..XO', 'XOX.O..X.', 'XOXXOOX..', 'XOXXXOOOX', 'XOXXXOOXO', 'XOXXXOO..', 'XOXXXOOOX', 'XOXXXOXOO', 'XOXXXO.O.', 'XOXXXOOXO', 'XOXXXOXOO', 'XOXXXO..O', 'XOXX.O...', 'XOXXOOOXX', 'XOXXOXOXO', 'XOXXO.OX.', 'XOXXXOOOX', 'XOXXXOOXO', 'XOXXXOO..', 'XOXXXOOOX', 'XOXOXXOOX', 'XOXOXXOXO', 'XOXOXXO..', 'XOXXXOOOX', 'XOXXXOOXO', 'XOXXXOO..', 'XOXXXOOOX', 'XOXOXXOOX', 'XOX.X.OOX', 'XOXXXOOXO', 'XOXOXXOXO', 'XOXOXXOXO', 'XOXXXOOXO', 'XOX.X.OXO', 'XOX.X.O..', 'XOXOXXOOX', 'XOXOXXXOO', 'XOXOXX.O.', 'XOXXXOOOX', 'XOXXXOXOO', 'XOXXXO.O.', 'XOXXXOOOX', 'XOXOXXOOX', 'XOX.X.OOX', 'XOXXXOXOO', 'XOXOXXXOO', 'XOX.X.XOO', 'XOX.X..O.', 'XOXXOXOXO', 'XOXXO.X.O', 'XOXXXOOXO', 'XOXXXOXOO', 'XOXXXO..O', 'XOXXXOOXO', 'XOXXOXOXO', 'XOXXOXOXO', 'XOXXXOOXO', 'XOXX..OXO', 'XOXXXOXOO', 'XOXX..XOO', 'XOXX....O', 'XOX......', 'XXOOXOXOX', 'XXOOXO.X.', 'XXOOXXOOX', 'XXOOXXOXO', 'XXOOXXO..', 'XXOOXXOOX', 'XXOOXXXOO', 'XXOOXX.O.', 'XXOOXXOXO', 'XXOOXXXOO', 'XXOOXX..O', 'XXOOX....', 'XXOXOOX..', 'XXOOOXXOX', 'XXOOOXXXO', 'XXOOOXX..', 'XXOOOXXOX', 'XXOOOXXXO', 'XXOOOXX..', 'XXOXOOX..', 'XXOXO.XO.', 'XXOXO.X.O', 'XXO.O.X..', 'XXOXOOX..', 'XXOXXOOOX', 'XXOOXOXOX', 'XXOOXO.X.', 'XXOXXOOOX', 'XXO.XOOX.', 'XXOXXOOOX', 'XXOOXOXOX', 'XXO.XO.OX', 'XXOOXOXOX', 'XXOOXO.X.', 'XXOOXO..X', 'XOOXXOX..', 'XOOXXXO..', 'XOOXXX.O.', 'XOOXXX..O', 'XOOXX....', 'XXOXOOX..', 'XOOXOXX..', 'X.OXO.X..', 'XXOXOOX..', 'XXOXXOOOX', 'XOOXXOX..', 'XXOXXOOOX', 'XOOXXOOXX', 'X.OXXOO.X', 'XXOXXOOOX', 'X.OXXOXO.', 'X.OX.OX..', 'XOOXXXO..', 'XXOXXOOOX', 'XOOXXOOXX', 'X.OXXOO.X', 'XXOXXOOOX', 'X.OXXXOO.', 'X.OXXXO.O', 'X.OXX.O..', 'XXOXO.XO.', 'XXOXXOOOX', 'XXOX.OXO.', 'XXOXXOOOX', 'XOOXXX.O.', 'XXOXXOOOX', 'X.OXXOXO.', 'XXOXXOOOX', 'X.OXXXOO.', 'X.OXXX.OO', 'X.OXX..O.', 'XXOXO.X.O', 'XOOXXX..O', 'XOOXXX..O', 'X.OXOXX.O', 'X.OXXXO.O', 'XXOXOXXOO', 'X.OXXX.OO', 'X.OX.X..O', 'X.OX.....', 'XXOOXOXOX', 'XXOOXO.X.', 'XXOOXXOOX', 'XXOOXXOXO', 'XXOOXXO..', 'XXOOXXOOX', 'XXOOXXXOO', 'XXOOXX.O.', 'XXOOXXOXO', 'XXOOXXXOO', 'XXOOXX..O', 'XXOOX....', 'XXXOO....', 'XXXO.O...', 'XXXO..O..', 'XXXO...O.', 'XXXO....O', 'XX.O.....', 'XXOXOOX..', 'XXOOOXXOX', 'XXOOOXXXO', 'XXOOOXX..', 'XXOOOXXOX', 'XXOOOXXXO', 'XXOOOXX..', 'XXOXOOX..', 'XXOXO.XO.', 'XXOXO.X.O', 'XXO.O.X..', 'XXXOO....', 'XXX.OO...', 'XXX.O.O..', 'XXX.O..O.', 'XXX.O...O', 'XX..O....', 'XXOXOOX..', 'XXOXXOOOX', 'XXOOXOXOX', 'XXOOXO.X.', 'XXOXXOOOX', 'XXO.XOOX.', 'XXOXXOOOX', 'XXOOXOXOX', 'XXO.XO.OX', 'XXOOXOXOX', 'XXOOXO.X.', 'XXOOXO..X', 'XOXXOOX..', 'XOXXXOOOX', 'XOXXXOOXO', 'XOXXXOO..', 'XOXXXOOOX', 'XOXXXOXOO', 'XOXXXO.O.', 'XOXXXOOXO', 'XOXXXOXOO', 'XOXXXO..O', 'XOXX.O...', 'XXXO.O...', 'XXX.OO...', 'XXX..OO..', 'XXX..O.O.', 'XXX..O..O', 'X.X..O...', 'XXOOXXOOX', 'XXOOXXOXO', 'XXOOXXO..', 'XXOXXOOOX', 'XXO.XOOX.', 'XXOXXOOOX', 'XXOOXXOOX', 'XXO.X.OOX', 'XXOOXXOXO', 'XXO.X.OXO', 'XXO.X.O..', 'XXXO..O..', 'XXX.O.O..', 'XXX..OO..', 'XXX...OO.', 'XXX...O.O', 'XX....O..', 'XXOXO.XO.', 'XXOXXOOOX', 'XXOX.OXO.', 'XXOXXOOOX', 'XXOOXXOOX', 'XXOOXXXOO', 'XXOOXX.O.', 'XXOXXOOOX', 'XXOOXOXOX', 'XXO.XO.OX', 'XXOXXOOOX', 'XXOOXXOOX', 'XXO.X.OOX', 'XXOOXXXOO', 'XXOOXXXOO', 'XXOOXXOOX', 'XXOOXXXOO', 'XXOOXX.O.', 'XXOOOXXOX', 'XXOXOXXOO', 'XXO.OXXO.', 'XXOOXXOOX', 'XXOOXXOOX', 'XXOOXOXOX', 'XXOOXXXOO', 'XXOOX.XO.', 'XXOXO.XO.', 'XXOX.OXO.', 'XXOX..XOO', 'XXO...XO.', 'XXXO...O.', 'XXX.O..O.', 'XXX..O.O.', 'XXX...OO.', 'XXX....OO', 'XX.....O.', 'XXOXO.X.O', 'XXOOXXOXO', 'XXOOXXXOO', 'XXOOXX..O', 'XXOOXXOXO', 'XXOOXXXOO', 'XXOOXX..O', 'XXOOOXXXO', 'XXOXOXXOO', 'XXO.OXX.O', 'XXOOXXOXO', 'XXOOXXOXO', 'XXOOOXXXO', 'XXOOXXXOO', 'XXOO.XX.O', 'XXOXO.X.O', 'XXOOX..XO', 'XXOOOXXXO', 'XXOOOXXXO', 'XOXXOXOXO', 'XOXXO.X.O', 'XOXXXOOXO', 'XOXXXOXOO', 'XOXXXO..O', 'XOXXXOOXO', 'XOXXOXOXO', 'XOXXOXOXO', 'XOXXXOOXO', 'XOXX..OXO', 'XOXXXOXOO', 'XOXX..XOO', 'XOXX....O', 'XXXO....O', 'XXX.O...O', 'XXX..O..O', 'XXX...O.O', 'XXX....OO', 'X.X.....O', 'X........']) == True", "entry_fn_name": "sat"}
{"id": "293", "text": "Find optimal probabilities for playing Rock-Paper-Scissors zero-sum game, with best worst-case guarantee", "solution": "def sat(probs: List[float]):\n    if not (len(probs) == 3 and abs(sum(probs) - 1) < 1e-06):\n        return False\n    return max((probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3))) < 1e-06", "title": "TP3/RockPaperScissors", "testing_code": "assert sat([0.3333333333333333, 0.3333333333333333, 0.3333333333333333]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "294", "text": "Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\nFor example, for the classic Prisoner dilemma:\nA=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\neps is the error tolerance", "solution": "def sat(strategies: List[List[float]], A, B, eps):\n    (m, n) = (len(A), len(A[0]))\n    (p, q) = strategies\n    if not (len(B) == m and all((len(row) == n for row in A + B))):\n        return False\n    if not (len(p) == m and len(q) == n):\n        return False\n    if not (sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0):\n        return False\n    v = sum((A[i][j] * p[i] * q[j] for i in range(m) for j in range(n)))\n    w = sum((B[i][j] * p[i] * q[j] for i in range(m) for j in range(n)))\n    return all((sum((A[i][j] * q[j] for j in range(n))) <= v + eps for i in range(m))) and all((sum((B[i][j] * p[i] for i in range(m))) <= w + eps for j in range(n)))", "title": "TP3/Nash", "testing_code": "assert sat([[0.42960486365369255, 0.5703951363463075], [0.4361488482822452, 0.5638511517177548]], [[1.0, -1.0], [-1.3, 0.8]], [[-0.9, 1.1], [0.7, -0.8]], 0.01) == True\nassert sat([[0.0, 0.0, 0.0, 0.9999967695762441, 0.0, 0.0, 0.0, 0.0, 3.2304237559399596e-06], [0.14574765976616436, 0.0010525737691793884, 0.37854281029092, 0.0, 0.060621662480296205, 0.41403529369344005]], [[0.14738177495578275, 0.747980019825271, 0.1051232435961047, 0.46907581621423977, 0.4706551623263341, 0.9062661953318937], [0.12988166612252583, 0.890441435875433, 0.15190125502216845, 0.0251552990265973, 0.32734850066506815, 0.3591430990509836], [0.9425550188084191, 0.08611212072450258, 0.783624348822126, 0.5349936815267257, 0.10270055080436169, 0.009590499808168174], [0.6380601343485022, 0.2218383099094161, 0.6868257338754123, 0.806638752054053, 0.9018561622314694, 0.7590395566591508], [0.6859264269381581, 0.3699302620070518, 0.9942148381089508, 0.8903935289162987, 0.674293629800702, 0.11410994407146158], [0.019262410240239114, 0.35560181353997367, 0.8517917641156626, 0.3074607746901762, 0.9261733304770997, 0.15224796120543604], [0.03366324617275729, 0.8709614609040649, 0.5849217229245649, 0.6379408604095658, 0.07001731910881204, 0.9582581413742493], [0.4142207195937342, 0.3193135769930635, 0.10706268323342383, 0.942046924893307, 0.9143451786836865, 0.701950437311744], [0.5179763142759984, 0.6412718009580387, 0.20022057700520002, 0.5942457297156203, 0.19646377673223914, 0.1351944216925801]], [[0.6516235984777713, 0.6123203626800926, 0.6186872023667903, 0.3853596754503974, 0.1073381662525007, 0.1291386906927786], [0.4925608374781314, 0.6308638606801343, 0.9530950453320264, 0.19706903321155278, 0.24184190603658184, 0.5045244344435803], [0.441426258818589, 0.38377342845027484, 0.012225023944992808, 0.891576455082707, 0.7733199528680031, 0.5559723587618317], [0.40823234393591534, 0.3751689897312942, 0.9735593124687937, 0.9428257869910855, 0.8271844491151399, 0.9685273237161491], [0.4832145692461641, 0.5635754453674369, 0.35994676263243286, 0.7815677383683111, 0.9809479850913646, 0.2808093367857648], [0.7473188591890239, 0.12760325771253167, 0.6709148257444112, 0.6960324705687125, 0.9742301280874588, 0.5061403432364218], [0.5512441627071583, 0.24752179828917065, 0.8112753285511846, 0.31333832922799887, 0.6811740304141864, 0.9411639311639899], [0.7477089685706007, 0.2569950106729836, 0.5041394572889569, 0.10948936347507965, 0.6055289733960375, 0.5733220923473799], [0.6810018730369142, 0.7452579755751384, 0.5448601672849144, 0.6414658827186077, 0.8050401801463669, 0.729851403010736]], 0.1) == True\nassert sat([[0.0, 1.0], [0.0, 0.0, 0.9999931938860329, 0.0, 6.80611396708386e-06]], [[0.4934719584926307, 0.05664225783974475, 0.4878391988801185, 0.6983347656105304, 0.7903235569844771], [0.9209179850842271, 0.6945169729870889, 0.985586605726519, 0.03611807745215567, 0.07791862369265457]], [[0.5723776540419043, 0.3177494964308457, 0.03283373751184504, 0.960932861317398, 0.3843454398162133], [0.7415658068058613, 0.4423455643375954, 0.9314198922910875, 0.937956471095574, 0.6337568371723998]], 0.01) == True\nassert sat([[0.3332202132209236, 0.2518594367825358, 0.0, 0.2218505776064346, 0.0, 0.0, 0.0, 0.1930687707780433, 1.0016120627343028e-06], [0.534221727741769, 0.0, 0.1363811701648476, 0.0, 0.0, 0.32939710209338335]], [[0.8589758630993106, 0.7749919744562254, 0.18371378758390233, 0.28034839679007295, 0.18276337511723684, 0.5173168267432149], [0.535972149604936, 0.6860082336427572, 0.8154412069051551, 0.02442129105356694, 0.1349312146704914, 0.7530215223132398], [0.3519956107153608, 0.9660103168436817, 0.10172694662400983, 0.7254690944575098, 0.8254057287673647, 0.3189629245726713], [0.5725690579346981, 0.1589108703965545, 0.01688986355891453, 0.3074319760280675, 0.4584643560452394, 0.5853201363256517], [0.6489314270374363, 0.6347169492821729, 0.18348768635443546, 0.5731694328630751, 0.6566567470060826, 0.8039403838540958], [0.4917243999522437, 0.16144631954506772, 0.04044367374900226, 0.09502214062659131, 0.8738947440998662, 0.6114058437094053], [0.1967023709822303, 0.29782628261932154, 0.058285139123036234, 0.6302740689117773, 0.33364400882000855, 0.5776389301631869], [0.6777544316258026, 0.6724283041374894, 0.9798391425483743, 0.8838381708326536, 0.6667218181098736, 0.34481925547433623], [0.5958711406283824, 0.44387553450142214, 0.6668717494447683, 0.25986773196752133, 0.8873567554013287, 0.4374385442834563]], [[0.6509157248335261, 0.47969567636489663, 0.7175654058769987, 0.8305604678011964, 0.11420347930129515, 0.8401333925076142], [0.8690852438876666, 0.8127345690587251, 0.316832083958, 0.9589533790230425, 0.6983255500551921, 0.4492765771156503], [0.7058401433380928, 0.007340378623609478, 0.5423001137088079, 0.2066909384280825, 0.3317417420195775, 0.003203599551001912], [0.4887994419103735, 0.4082867953539032, 0.3605910405209234, 0.19354666101193807, 0.3116629413961449, 0.9698417812464528], [0.30623970889248353, 0.8377553335650854, 0.7624220111189529, 0.22826919233755616, 0.3832245488487954, 0.11387974071378948], [0.8818032772640031, 0.24028195971823052, 0.8834992573768841, 0.9883007945834051, 0.7024933884432355, 0.7617988546407181], [0.9160905473729156, 0.6927856066612084, 0.6159687601776853, 0.15074396336216966, 0.7764252875888226, 0.3459191304782905], [0.9991431698755587, 0.32389039099370287, 0.8354695347283115, 0.51319161530113, 0.5229921145906276, 0.7690459477032934], [0.7591967670432632, 0.23382636010443625, 0.26521035423368, 0.8577953561722641, 0.020432130142500116, 0.019755815416500178]], 0.1) == True\nassert sat([[0.0, 0.0, 0.999994063803743, 0.0, 0.0, 0.0, 0.0, 5.936196256994819e-06], [0.0, 0.0, 0.0, 0.9999938743036757, 0.0, 0.0, 0.0, 6.12569632429949e-06]], [[0.5753373910044396, 0.883286704506171, 0.14098419242590676, 0.0796482735170555, 0.28053511699815137, 0.4802587237433614, 0.7927565741942321, 0.10486790699611082], [0.674897469149739, 0.5526354958094333, 0.14126552040252316, 0.8176885681560745, 0.5950057513195114, 0.9394498004514682, 0.9974412293717752, 0.31785998202168364], [0.8551492483900579, 0.0873581901597057, 0.7058504781434135, 0.8614481823894408, 0.774002479389802, 0.5194163269795865, 0.8839947283493329, 0.4796849532033839], [0.24669121918914239, 0.9192009909426845, 0.22533689422848313, 0.42231986064003346, 0.8524917527913644, 0.3217815290765713, 0.13012568628724053, 0.08517580086974996], [0.6708003793106111, 0.9370021425919828, 0.956981559137809, 0.48294825852969425, 0.09451427192867867, 0.958711015678715, 0.13874285709747414, 0.17240487357189138], [0.6862479923713413, 0.40988185301904767, 0.7232258320050972, 0.12156129874113497, 0.4137204968814412, 0.43096712555208105, 0.9673727161037606, 0.9554536674896775], [0.2645245766573283, 0.16353379162998616, 0.8208329137057697, 0.24945486012929086, 0.19060921538692044, 0.6886849242360286, 0.6513544853108113, 0.13898253443118158], [0.8399423196728664, 0.5583901386668076, 0.05055384968867316, 0.272512815876485, 0.4706764309925491, 0.9920874820129374, 0.11006687231735834, 0.6003338823254668]], [[0.8661101149166154, 0.5041424261188884, 0.654530488206357, 0.842287965510257, 0.5418722524658692, 0.615317049155107, 0.2474305118268787, 0.802249852604974], [0.17399126319302805, 0.37286827574250436, 0.9025123265462714, 0.6302774019777034, 0.6096954531215514, 0.14282756248667317, 0.5039665393854678, 0.5053857713064859], [0.08645764165911696, 0.34639849481946294, 0.4003286765389642, 0.8522825407634552, 0.38924375107949505, 0.13708630962779877, 0.09413370097193263, 0.024977157717289145], [0.18665183173707744, 0.08210966062569414, 0.8906028770829486, 0.9292380534706237, 0.3432700204525524, 0.03791015448620483, 0.23701146631134296, 0.5236370615896554], [0.4158240648499627, 0.620309795706114, 0.6606023798050246, 0.7581954943445194, 0.9399309644265448, 0.6640739757418763, 0.5470483802958659, 0.3881528058493644], [0.8452380694038372, 0.7687623496765781, 0.22422282300746144, 0.03236167241305821, 0.1113965246318579, 0.4589759506900418, 0.8415359432321317, 0.27521377409486303], [0.6582156349227984, 0.9988816473957544, 0.4901663751981855, 0.3788210957458895, 0.455713995042737, 0.04960398762882756, 0.16850674065572013, 0.6202540021741917], [0.7515673992699056, 0.6867547828670959, 0.038529441293790434, 0.9995963277046196, 0.15577904716257307, 0.2596640500026437, 0.76139213514593, 0.5065163836406463]], 0.01) == True\nassert sat([[0.42960486365369255, 0.5703951363463075], [0.4361488482822452, 0.5638511517177548]], [[1.0, -1.0], [-1.3, 0.8]], [], 0.01) == False", "entry_fn_name": "sat"}
{"id": "295", "text": "Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\nFor example, rock paper scissors has\nA = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2", "solution": "def sat(strategies: List[List[float]], A, eps):\n    (m, n) = (len(A), len(A[0]))\n    (p, q) = strategies\n    if not all((len(row) == n for row in A)):\n        return False\n    if not (len(p) == m and len(q) == n):\n        return False\n    if not (sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0):\n        return False\n    v = sum((A[i][j] * p[i] * q[j] for i in range(m) for j in range(n)))\n    return all((sum((A[i][j] * q[j] for j in range(n))) <= v + eps for i in range(m))) and all((sum((A[i][j] * p[i] for i in range(m))) >= v - eps for j in range(n)))", "title": "TP3/ZeroSum", "testing_code": "assert sat([[0.3395291201141192, 0.35390334563719866, 0.3065675342486822], [0.2441140024178156, 0.5226765797961148, 0.23320941778606952]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.01) == True\nassert sat([[0.9999990000010001, 9.99998999939855e-07], [0.9999990000010001, 0.0, 9.99998999939855e-07]], [[0.5303369225581901, 0.4458248560112187, 0.47857713121903245], [0.07696760921779966, 0.40492093882513336, 0.8351857615090292]], 0.5) == True\nassert sat([[0.285714244897965, 0.7142856122449125, 1.4285712257589012e-07], [0.1428571224489825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.857142734693895, 0.0, 1.4285712246486781e-07]], [[0.8737161029595927, 0.3380931327691771, 0.20525289813478453, 0.9772812942597162, 0.6011469499669913, 0.5657635078441663, 0.007362594660960342, 0.5523386597843655, 0.06548815570594102], [0.8440989957774637, 0.11456946368545384, 0.6266416865322296, 0.6112942108318355, 0.15090892170912606, 0.19181369635746925, 0.23558304486799253, 0.08883158381322309, 0.5626427070785186], [0.5990766112287766, 0.16770300013300976, 0.7790082288508813, 0.8213933806929374, 0.8409107317631046, 0.32215242243482034, 0.04927911582647726, 0.18589922022642869, 0.4416673076660764]], 0.1) == True\nassert sat([[0.16666663888889352, 0.8333333611111065], [0.16666663888889352, 0.0, 0.8333331944444675, 0.0, 1.6666663893438738e-07]], [[0.35120738216503444, 0.6305426964442432, 0.09361690123750299, 0.17215263015782456, 0.3569473010721259], [0.9341169088059124, 0.43769720086284414, 0.35911118735479475, 0.37956863261812823, 0.9170151449695092]], 0.1) == True\nassert sat([[0.636363578512402, 0.1818181652892577, 0.09090908264462885, 0.09090908264462885, 9.090908270614761e-08], [0.09090908264462885, 0.0, 0.7272726611570308, 0.1818181652892577, 9.090908270614761e-08]], [[0.6637255179009651, 0.9756262037263238, 0.4926064602986052, 0.4097654368373934, 0.9284930704872523], [0.21641001481296873, 0.3381822244340763, 0.10113277325663139, 0.867285215856176, 0.27100572371021947], [0.7831143244052009, 0.6045743236145783, 0.10582868480749341, 0.5591604978434377, 0.27602687543748194], [0.8431935916393734, 0.09227518008541435, 0.06352450108543961, 0.13377427705288458, 0.8928593671227156], [0.15573895145866545, 0.3897235344943152, 0.5095156356106815, 0.25893802778092634, 0.4730747656010391]], 0.1) == True\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.01) == False\nassert sat([[0.9999990000010001, 9.99998999939855e-07], [0.9999990000010001, 0.0, 9.99998999939855e-07]], [[1.0, -1.0], [-1.3, 0.8]], 0.5) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.1) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.5) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.1) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.01) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.01) == False\nassert sat([[0.9999990000010001, 9.99998999939855e-07], [0.9999990000010001, 0.0, 9.99998999939855e-07]], [[1.0, -1.0], [-1.3, 0.8]], 0.1) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.1) == False\nassert sat([[1.0, -1.0], [-1.3, 0.8]], [[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], 0.5) == False", "entry_fn_name": "sat"}
{"id": "296", "text": "Find any edge in edges.", "solution": "def sat(e: List[int], edges):\n    return e in edges", "title": "TP3/AnyEdge", "testing_code": "assert sat([0, 217], [[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]) == True\nassert sat([0, 1], [[0, 1], [1, 1], [0, 0]]) == True\nassert sat([1, 0], [[1, 0], [0, 1], [1, 1]]) == True\nassert sat([1, 15], [[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]) == True\nassert sat([7, 84], [[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]) == True\nassert sat('[7, 84]', '[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]') == False\nassert sat('[1, 0]', '[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]') == False\nassert sat('[1, 15]', '[[0, 1], [1, 1], [0, 0]]') == False\nassert sat('[1, 0]', '[[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]') == False\nassert sat('[1, 15]', '[[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]') == False\nassert sat('[0, 217]', '[[0, 1], [1, 1], [0, 0]]') == False\nassert sat('[1, 15]', '[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]') == False\nassert sat('[0, 217]', '[[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]') == False\nassert sat('[7, 84]', '[[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]') == False\nassert sat('[0, 1]', '[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]') == False", "entry_fn_name": "sat"}
{"id": "297", "text": "Find any triangle in the given directed graph.", "solution": "def sat(tri: List[int], edges):\n    (a, b, c) = tri\n    return [a, b] in edges and [b, c] in edges and ([c, a] in edges) and (a != b != c != a)", "title": "TP3/AnyTriangle", "testing_code": "assert sat([17, 22, 31], [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) == True\nassert sat([56, 3, 75], [[19, 48], [14, 42], [19, 14], [56, 3], [37, 16], [46, 5], [14, 14], [62, 40], [12, 41], [37, 1], [46, 40], [4, 9], [70, 39], [75, 49], [61, 55], [65, 61], [5, 1], [67, 44], [46, 68], [49, 62], [41, 61], [39, 43], [44, 60], [71, 40], [8, 42], [54, 67], [33, 27], [25, 70], [50, 3], [53, 22], [61, 34], [5, 16], [39, 62], [30, 44], [10, 3], [21, 67], [41, 54], [10, 66], [34, 1], [45, 44], [38, 47], [25, 36], [2, 47], [46, 2], [38, 4], [50, 66], [45, 18], [45, 50], [63, 57], [19, 43], [39, 66], [29, 13], [39, 65], [63, 39], [7, 25], [34, 51], [65, 54], [13, 64], [9, 70], [28, 12], [41, 69], [67, 53], [33, 38], [59, 27], [18, 37], [11, 3], [13, 23], [33, 50], [44, 49], [9, 50], [23, 55], [59, 66], [4, 74], [50, 12], [14, 24], [0, 28], [75, 29], [62, 60], [68, 35], [69, 55], [3, 19], [72, 30], [25, 9], [12, 58], [3, 66], [43, 8], [12, 11], [15, 56], [30, 75], [35, 57], [19, 20], [71, 36], [34, 35], [30, 17], [7, 52], [49, 31], [39, 58], [48, 32], [4, 57], [75, 31], [42, 1], [0, 48], [22, 13], [18, 17], [71, 52], [41, 19], [48, 12], [9, 48], [63, 65], [68, 63], [46, 39], [24, 30], [46, 61], [55, 25], [75, 36], [49, 5], [44, 12], [29, 5], [64, 69], [15, 64], [8, 66], [49, 25], [24, 53], [7, 39], [41, 2], [29, 48], [51, 30], [41, 21], [46, 30], [63, 75], [19, 3], [58, 72], [62, 59], [68, 54], [9, 61], [70, 74], [56, 48], [74, 48], [2, 9], [51, 22], [69, 61], [0, 35], [28, 46], [7, 11], [56, 57], [14, 67], [15, 4], [53, 12], [64, 42], [20, 15], [52, 53], [44, 16], [8, 7], [21, 7], [42, 45], [4, 66], [39, 59], [20, 1], [60, 0], [52, 28], [75, 63], [59, 14], [40, 69], [74, 46], [60, 67], [6, 57], [38, 68], [24, 22], [59, 61], [53, 30], [10, 56], [49, 59], [12, 27], [75, 22], [24, 25], [37, 11], [56, 12], [62, 47], [22, 9], [34, 17], [57, 10], [52, 43], [17, 22], [14, 73], [54, 75], [28, 22], [18, 51], [38, 46], [6, 22], [75, 15], [10, 1], [37, 12], [67, 34], [28, 43], [5, 2], [60, 40], [9, 22], [3, 75], [50, 1], [19, 8], [17, 57], [43, 60], [45, 60], [57, 32], [52, 35], [18, 22], [11, 38], [16, 57], [31, 39], [13, 18], [61, 54], [25, 10], [23, 46], [47, 5], [42, 66], [73, 67], [44, 28], [65, 34], [35, 50], [67, 1], [12, 44], [17, 51], [70, 23], [44, 35], [0, 16], [65, 53], [10, 74], [5, 60], [45, 8], [13, 46], [57, 6], [72, 47], [1, 36], [60, 4], [11, 31], [46, 21], [60, 29], [58, 44], [53, 41], [33, 44], [47, 34], [58, 35], [74, 51], [71, 35], [58, 10], [47, 59], [32, 36], [16, 67], [62, 9], [14, 44], [12, 32], [6, 19], [35, 21], [49, 71], [7, 7], [25, 39], [25, 24], [45, 40], [44, 20], [9, 37], [58, 18], [59, 52], [12, 23], [26, 49], [62, 69], [8, 2], [66, 52], [25, 42], [34, 70], [64, 1], [29, 57], [8, 26], [25, 63], [75, 56], [51, 49], [70, 9], [63, 51], [6, 28], [1, 38], [47, 27], [74, 26], [27, 63], [20, 47], [25, 37], [31, 67], [59, 71], [56, 32], [28, 65], [37, 10], [30, 50], [42, 32], [56, 63], [32, 65], [48, 70], [37, 21], [10, 11], [5, 24], [51, 8], [46, 6], [75, 23], [42, 28], [60, 26], [37, 9], [0, 19], [11, 34], [66, 51], [49, 42], [16, 37], [52, 55], [20, 39], [46, 12], [1, 70], [45, 37], [18, 63], [63, 23], [54, 7], [18, 11], [51, 28], [21, 65], [28, 71], [46, 53], [14, 36], [35, 71], [30, 5], [50, 62], [32, 28], [64, 38], [66, 61], [0, 10]]) == True\nassert sat([51, 11, 39], [[51, 44], [11, 59], [57, 15], [18, 1], [41, 1], [44, 6], [58, 44], [43, 10], [41, 9], [50, 43], [56, 0], [47, 4], [42, 45], [51, 15], [60, 18], [11, 56], [21, 45], [39, 42], [57, 34], [60, 25], [57, 33], [6, 17], [26, 43], [38, 25], [29, 18], [39, 43], [34, 4], [22, 61], [0, 9], [1, 20], [36, 28], [10, 37], [53, 7], [49, 60], [12, 48], [31, 33], [4, 8], [5, 56], [27, 59], [56, 29], [60, 17], [17, 27], [24, 58], [46, 47], [60, 35], [4, 37], [41, 43], [37, 33], [30, 7], [53, 31], [3, 60], [24, 39], [14, 41], [14, 54], [33, 35], [50, 1], [60, 57], [23, 17], [34, 15], [60, 26], [22, 0], [5, 4], [8, 41], [16, 4], [56, 40], [60, 44], [2, 26], [42, 21], [21, 28], [58, 32], [58, 12], [31, 22], [43, 0], [28, 3], [35, 21], [54, 18], [0, 58], [3, 9], [6, 59], [57, 46], [48, 45], [30, 12], [46, 27], [41, 55], [52, 58], [30, 21], [51, 24], [23, 18], [31, 59], [34, 49], [41, 34], [19, 58], [1, 32], [52, 16], [17, 8], [20, 3], [56, 12], [3, 51], [60, 31], [41, 5], [58, 23], [59, 6], [39, 2], [6, 6], [11, 38], [3, 44], [61, 58], [13, 46], [56, 1], [35, 14], [25, 7], [29, 60], [16, 32], [32, 32], [7, 44], [3, 48], [38, 21], [19, 43], [60, 4], [56, 56], [21, 33], [15, 11], [32, 0], [8, 10], [44, 11], [37, 36], [24, 28], [4, 23], [37, 22], [44, 4], [34, 28], [1, 7], [15, 48], [11, 20], [60, 13], [7, 30], [51, 18], [3, 56], [14, 57], [14, 22], [55, 13], [47, 50], [36, 14], [42, 46], [7, 29], [58, 36], [52, 49], [33, 4], [51, 51], [47, 55], [7, 60], [4, 17], [53, 6], [59, 28], [51, 52], [50, 24], [30, 18], [37, 42], [51, 30], [6, 37], [0, 41], [38, 30], [0, 24], [43, 38], [33, 2], [10, 21], [44, 33], [57, 29], [28, 45], [2, 27], [59, 38], [41, 28], [49, 61], [54, 23], [44, 32], [58, 33], [2, 43], [34, 39], [37, 28], [40, 56], [55, 59], [28, 43], [36, 36], [29, 41], [16, 35], [50, 33], [51, 4], [33, 11], [26, 17], [2, 49], [7, 18], [15, 60], [14, 47], [40, 16], [47, 19], [18, 43], [38, 53], [28, 10], [46, 12], [26, 48], [1, 45], [9, 45], [2, 12], [8, 55], [19, 24], [2, 10], [17, 38], [30, 48], [2, 13], [59, 22], [11, 39], [32, 47], [23, 26], [43, 25], [9, 34], [46, 30], [36, 32], [33, 36], [38, 54], [33, 14], [48, 46], [29, 53], [46, 60], [14, 10], [0, 3], [13, 39], [53, 53], [22, 16], [33, 31], [33, 13], [54, 51], [25, 34], [14, 33], [19, 56], [51, 10], [58, 43], [4, 20], [28, 54], [3, 34], [47, 45], [1, 58], [55, 43], [13, 21], [31, 46], [23, 57], [58, 15], [54, 36], [44, 7], [16, 52], [20, 40], [46, 18], [59, 19], [14, 44], [3, 4], [58, 52], [31, 42], [21, 17], [42, 18], [46, 57], [7, 35], [52, 4], [30, 11], [17, 14], [60, 10], [57, 59], [59, 46], [18, 15], [35, 27], [46, 31], [49, 18], [21, 23], [50, 25], [24, 59], [51, 26], [36, 34], [27, 17], [13, 16], [54, 56], [53, 13], [27, 25], [8, 33], [52, 7], [45, 61], [39, 0], [6, 51], [35, 23], [31, 5], [38, 33], [47, 58], [28, 61], [36, 0], [18, 30], [51, 11], [39, 51], [39, 36], [60, 37], [37, 43], [46, 42]]) == True\nassert sat([2, 7, 1], [[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]) == True\nassert sat([3, 2, 5], [[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]) == True\nassert sat([17, 22, 31], []) == False", "entry_fn_name": "sat"}
{"id": "298", "text": "Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.", "solution": "def sat(nodes: List[int], size, edges):\n    if not len(nodes) == len(set(nodes)) >= size:\n        return False\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            if not (a == b or (a, b) in edge_set or (b, a) in edge_set):\n                return False\n    return True", "title": "TP3/PlantedClique", "testing_code": "assert sat([0, 17, 22], 3, [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) == True\nassert sat([], 0, [[1, 0]]) == True\nassert sat([], 0, [[0, 1], [1, 0]]) == True\nassert sat('[0, 17, 22]', '3', '[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]') == False\nassert sat('[0, 17, 22]', '0', '[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]') == False\nassert sat('[0, 17, 22]', '3', '[[0, 1], [1, 0]]') == False\nassert sat('[0, 17, 22]', '3', '[[1, 0]]') == False\nassert sat('[0, 17, 22]', '0', '[[0, 1], [1, 0]]') == False\nassert sat([], 3, [[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]) == False\nassert sat([0, 17, 22], 3, []) == False\nassert sat('[0, 17, 22]', '0', '[[1, 0]]') == False", "entry_fn_name": "sat"}
{"id": "299", "text": "Find a path from node 0 to node 1, of length at most bound, in the given digraph.\nweights[a][b] is weight on edge [a,b] for (int) nodes a, b", "solution": "def sat(path: List[int], weights, bound):\n    return path[0] == 0 and path[-1] == 1 and (sum((weights[a][b] for (a, b) in zip(path, path[1:]))) <= bound)", "title": "TP3/ShortestPath", "testing_code": "assert sat([0, 2, 1], [{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], 11) == True\nassert sat([0, 1], [{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], 66) == True\nassert sat([0, 25, 1], [{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], 715) == True\nassert sat([0, 1], [{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], 239) == True\nassert sat([0, 1], [{1: 996, 2: 237, 4: 264}, {4: 329, 5: 12, 2: 542, 0: 419}, {2: 170, 6: 339, 5: 211}, {1: 714, 5: 885, 3: 640}, {5: 652, 4: 3, 3: 26, 6: 74}, {0: 647, 5: 346}, {2: 297, 6: 358, 3: 636, 0: 722, 4: 942}], 996) == True\nassert sat('[0, 2, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '996') == False\nassert sat('[0, 1]', '[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}]', '715') == False\nassert sat('[0, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '66') == False\nassert sat('[0, 25, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '715') == False\nassert sat('[0, 1]', '[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}]', '996') == False\nassert sat('[0, 2, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '66') == False\nassert sat('[0, 25, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '11') == False\nassert sat('[0, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '239') == False\nassert sat('[0, 25, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '996') == False\nassert sat('[0, 1]', '[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}]', '715') == False", "entry_fn_name": "sat"}
{"id": "300", "text": "Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.", "solution": "def sat(path: List[int], edges, u, v, bound):\n    if not (path[0] == u and path[-1] == v and all(([i, j] in edges for (i, j) in zip(path, path[1:])))):\n        return False\n    return len(path) <= bound", "title": "TP3/UnweightedShortestPath", "testing_code": "assert sat([0, 11, 33], [[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], 0, 33, 3) == True\nassert sat([14, 0, 11, 1], [[12, 4], [33, 15], [37, 12], [11, 1], [34, 19], [42, 36], [2, 38], [6, 25], [29, 25], [30, 6], [16, 31], [10, 41], [15, 2], [3, 19], [1, 26], [17, 17], [19, 4], [0, 6], [42, 5], [11, 13], [22, 15], [39, 11], [35, 34], [39, 20], [7, 31], [38, 27], [9, 30], [31, 25], [0, 9], [13, 34], [31, 34], [19, 42], [37, 32], [4, 13], [11, 43], [14, 0], [22, 41], [20, 17], [0, 15], [13, 4], [20, 6], [34, 42], [42, 10], [32, 19], [41, 8], [26, 42], [0, 13], [28, 42], [9, 0], [32, 26], [6, 4], [27, 19], [37, 9], [7, 6], [25, 14], [23, 14], [31, 39], [18, 27], [34, 36], [24, 16], [24, 31], [16, 17], [2, 4], [34, 40], [28, 6], [41, 9], [17, 18], [43, 11], [11, 39], [43, 29], [1, 19], [27, 27], [4, 42], [0, 16], [16, 14], [40, 22], [22, 22], [38, 16], [3, 34], [33, 23], [2, 18], [3, 11], [4, 5], [18, 3], [23, 11], [41, 22], [7, 26], [31, 42], [35, 33], [15, 28], [34, 10], [36, 3], [9, 38], [17, 5], [3, 9], [37, 21], [36, 1], [25, 6], [22, 12], [42, 3], [16, 32], [0, 11], [24, 33], [15, 31], [18, 34], [11, 8], [30, 41], [19, 19], [4, 11], [22, 16], [1, 13], [6, 22], [12, 30], [19, 15], [3, 21], [38, 29], [32, 39], [1, 17], [16, 20], [10, 39], [32, 27], [37, 6], [18, 18], [22, 32], [31, 32], [24, 32], [22, 25], [38, 18], [38, 21], [39, 12], [9, 17], [10, 42], [29, 36], [34, 23], [27, 29], [17, 24], [24, 28], [31, 23], [28, 7], [5, 2], [24, 26], [27, 13], [43, 19], [37, 36], [2, 13], [10, 11], [30, 11], [29, 32], [4, 24], [17, 27], [21, 2], [24, 43], [26, 37], [16, 6], [43, 35], [42, 27], [26, 12], [39, 3], [38, 25], [20, 5], [36, 8], [25, 42], [27, 40], [39, 23], [6, 12], [27, 32], [12, 34], [2, 5], [40, 35], [15, 12], [22, 29], [21, 11], [0, 22], [13, 23], [27, 4], [35, 24], [32, 29], [4, 14], [9, 7], [32, 11], [11, 26], [26, 41], [2, 16], [38, 23], [30, 29], [6, 31], [1, 34], [4, 39], [24, 3], [25, 22], [9, 14], [33, 26], [34, 38], [35, 29], [32, 38], [5, 42], [42, 24], [15, 38], [41, 14], [39, 9], [4, 36], [21, 24], [36, 9]], 14, 1, 4) == True\nassert sat([1, 2], [[2, 6], [6, 2], [2, 5], [4, 7], [4, 1], [0, 2], [3, 3], [6, 1], [4, 0], [1, 3], [5, 2], [4, 2], [6, 7], [2, 2], [2, 3], [4, 4], [5, 0], [0, 7], [4, 3], [6, 4], [0, 0], [3, 0], [2, 7], [1, 7], [3, 2], [1, 2], [2, 4], [7, 5]], 1, 2, 2) == True\nassert sat([4, 2], [[6, 0], [6, 2], [6, 5], [6, 4], [1, 4], [4, 3], [5, 3], [4, 4], [3, 1], [4, 6], [4, 2], [0, 2], [6, 6], [2, 3], [1, 0], [1, 5], [0, 0], [5, 4], [0, 1], [1, 2], [0, 4], [2, 5], [3, 0]], 4, 2, 2) == True\nassert sat([1], [[1, 1], [2, 0], [1, 0], [2, 2]], 1, 1, 1) == True\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '4', '1', '4') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '4', '2', '4') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '4', '1', '2') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '1', '1', '4') == False\nassert sat([0, 11, 33], [], 0, 33, 3) == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '1', '1', '2') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '1', '2', '2') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '4', '1', '3') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '0', '1', '3') == False\nassert sat('[1]', '[[1, 1], [2, 0], [1, 0], [2, 2]]', '1', '2', '3') == False", "entry_fn_name": "sat"}
{"id": "301", "text": "Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.", "solution": "def sat(path: List[int], edges):\n    for i in range(len(path) - 1):\n        if not [path[i], path[i + 1]] in edges:\n            return False\n    if not path[0] == 0:\n        return False\n    if not path[-1] == max((max(edge) for edge in edges)):\n        return False\n    return True", "title": "TP3/AnyPath", "testing_code": "assert sat([0, 2, 5, 6, 7], [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) == True\nassert sat([0, 27, 14, 11, 34, 36, 22, 35, 17, 5, 29, 3, 16, 44], [[16, 8], [13, 33], [29, 37], [25, 10], [3, 33], [43, 10], [19, 9], [26, 16], [0, 9], [18, 36], [40, 32], [24, 10], [25, 35], [15, 14], [18, 2], [17, 5], [15, 26], [28, 28], [4, 39], [26, 9], [35, 22], [42, 11], [44, 13], [6, 34], [33, 0], [36, 34], [41, 34], [31, 1], [41, 27], [20, 43], [30, 33], [15, 18], [8, 20], [31, 14], [21, 33], [40, 28], [35, 39], [19, 14], [35, 10], [3, 34], [14, 11], [34, 36], [29, 3], [20, 33], [27, 14], [5, 29], [15, 6], [21, 20], [36, 1], [30, 40], [44, 6], [24, 43], [24, 30], [3, 16], [8, 34], [15, 36], [33, 36], [19, 17], [35, 17], [20, 29], [0, 27], [36, 38], [1, 0], [43, 18], [5, 36], [22, 10], [5, 32], [11, 34], [4, 15], [4, 9], [4, 6], [24, 12], [8, 27], [42, 38], [25, 2], [2, 12], [1, 34], [36, 22], [24, 42], [4, 18], [30, 13], [16, 44], [4, 21], [22, 35], [33, 32], [24, 26], [21, 44]]) == True\nassert sat([0], [[0, 0]]) == True\nassert sat([0, 44, 38, 53, 63], [[2, 33], [39, 59], [22, 21], [55, 39], [34, 13], [28, 62], [34, 56], [41, 23], [52, 39], [27, 62], [19, 12], [14, 63], [48, 1], [53, 1], [47, 55], [43, 35], [13, 51], [18, 30], [7, 17], [25, 52], [35, 46], [16, 45], [7, 22], [42, 40], [35, 41], [21, 52], [35, 43], [22, 30], [20, 47], [48, 25], [32, 11], [38, 35], [39, 35], [34, 62], [19, 32], [15, 51], [62, 29], [54, 26], [1, 6], [42, 51], [26, 62], [18, 8], [47, 40], [30, 41], [42, 15], [35, 36], [12, 55], [38, 53], [52, 37], [4, 44], [13, 61], [2, 58], [9, 48], [2, 11], [52, 0], [11, 35], [33, 7], [49, 40], [21, 46], [1, 30], [60, 34], [36, 46], [8, 52], [43, 58], [53, 63], [61, 16], [50, 16], [33, 44], [23, 26], [27, 16], [52, 18], [59, 1], [29, 44], [37, 57], [25, 2], [3, 15], [33, 19], [22, 6], [59, 51], [58, 32], [46, 37], [15, 9], [1, 35], [48, 6], [15, 59], [58, 28], [6, 24], [4, 38], [37, 20], [52, 28], [43, 40], [28, 39], [58, 31], [62, 35], [63, 11], [24, 40], [44, 38], [0, 44], [57, 11], [0, 16], [41, 1], [62, 55], [8, 51], [5, 8], [46, 26], [40, 6], [45, 42], [24, 32], [19, 31], [6, 55], [30, 2], [43, 57], [25, 48], [53, 31], [29, 13], [63, 39], [37, 46], [32, 40], [16, 16], [53, 59], [11, 57], [33, 20], [19, 11], [47, 51], [50, 15], [19, 36]]) == True\nassert sat([0, 5, 3, 6, 7], [[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]) == True\nassert sat([0, 2, 5, 6, 7], []) == False", "entry_fn_name": "sat"}
{"id": "302", "text": "Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.", "solution": "def sat(path: List[int], edges):\n    if not (path[0] == 0 and path[-1] == max((max(e) for e in edges))):\n        return False\n    if not all([[a, b] in edges for (a, b) in zip(path, path[1:])]):\n        return False\n    return len(path) % 2 == 0", "title": "TP3/EvenPath", "testing_code": "assert sat([0, 1, 2, 5, 6, 7], [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]) == True\nassert sat([0, 2, 2, 3], [[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]) == True\nassert sat([0, 5, 46, 3, 25, 47, 37, 55], [[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]) == True\nassert sat([0, 53, 36, 24, 33, 10, 54, 19, 52, 46, 37, 68, 56, 74], [[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]) == True\nassert sat([0, 74, 9, 50, 68, 18, 90, 92], [[67, 92], [18, 52], [25, 21], [83, 58], [36, 36], [26, 63], [48, 15], [53, 32], [62, 30], [41, 21], [91, 25], [82, 79], [33, 58], [65, 81], [57, 57], [62, 36], [85, 24], [14, 19], [58, 11], [20, 31], [76, 82], [92, 37], [73, 88], [90, 37], [68, 18], [70, 18], [45, 65], [45, 78], [87, 36], [41, 72], [66, 4], [25, 58], [18, 16], [72, 68], [21, 0], [44, 8], [51, 21], [30, 15], [18, 90], [75, 47], [42, 7], [13, 13], [27, 46], [78, 39], [71, 28], [85, 39], [56, 52], [60, 37], [37, 18], [82, 83], [84, 9], [31, 54], [81, 32], [46, 82], [10, 66], [85, 71], [3, 5], [15, 18], [83, 64], [9, 50], [60, 70], [7, 13], [81, 63], [32, 6], [18, 80], [22, 34], [60, 0], [88, 72], [9, 19], [74, 0], [87, 22], [41, 17], [66, 80], [33, 9], [71, 46], [23, 79], [64, 44], [40, 67], [78, 4], [8, 31], [15, 41], [42, 92], [22, 28], [57, 84], [69, 65], [35, 16], [1, 10], [7, 82], [62, 52], [8, 12], [51, 12], [5, 2], [83, 30], [76, 83], [0, 27], [30, 80], [33, 14], [39, 12], [51, 78], [30, 47], [25, 26], [11, 63], [52, 24], [32, 49], [0, 74], [51, 16], [1, 16], [14, 90], [49, 74], [69, 14], [72, 30], [61, 31], [54, 20], [46, 78], [4, 50], [13, 37], [61, 1], [4, 35], [29, 70], [20, 89], [28, 6], [74, 9], [86, 53], [58, 6], [57, 91], [10, 40], [15, 74], [23, 60], [5, 37], [50, 68], [78, 22], [90, 59], [74, 21], [80, 71], [92, 82], [42, 43], [68, 74], [43, 55], [67, 90], [87, 68], [40, 2], [55, 68], [52, 30], [10, 21], [44, 1], [39, 9], [12, 18], [61, 38], [65, 37], [10, 12], [21, 10], [81, 3], [65, 20], [31, 25], [59, 77], [43, 59], [75, 75], [71, 13], [17, 37], [31, 13], [6, 33], [24, 40], [52, 70], [70, 5], [4, 8], [20, 29], [11, 10], [43, 67], [11, 80], [49, 19], [81, 64], [44, 28], [18, 20], [91, 91], [90, 92], [81, 16], [31, 81], [7, 81], [54, 53], [65, 16], [91, 32]]) == True\nassert sat('[0, 53, 36, 24, 33, 10, 54, 19, 52, 46, 37, 68, 56, 74]', '[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]') == False\nassert sat('[0, 1, 2, 5, 6, 7]', '[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]') == False\nassert sat('[0, 53, 36, 24, 33, 10, 54, 19, 52, 46, 37, 68, 56, 74]', '[[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]') == False\nassert sat('[0, 74, 9, 50, 68, 18, 90, 92]', '[[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]') == False\nassert sat('[0, 2, 2, 3]', '[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]') == False\nassert sat('[0, 1, 2, 5, 6, 7]', '[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]') == False\nassert sat('[0, 74, 9, 50, 68, 18, 90, 92]', '[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]') == False\nassert sat('[0, 53, 36, 24, 33, 10, 54, 19, 52, 46, 37, 68, 56, 74]', '[[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]') == False\nassert sat('[0, 2, 2, 3]', '[[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]') == False\nassert sat('[0, 5, 46, 3, 25, 47, 37, 55]', '[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]') == False", "entry_fn_name": "sat"}
{"id": "303", "text": "Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.", "solution": "def sat(p: List[int], edges):\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for (a, b) in zip(p, p[1:])])", "title": "TP3/OddPath", "testing_code": "assert sat([0, 2, 5, 6, 1], [[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]) == True\nassert sat([0, 8, 1], [[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]) == True\nassert sat([0, 34, 29, 36, 21, 23, 40, 31, 31, 5, 1], [[40, 31], [16, 32], [41, 10], [14, 9], [36, 26], [14, 12], [22, 6], [36, 6], [13, 22], [0, 34], [6, 28], [27, 22], [31, 5], [2, 3], [34, 37], [17, 14], [1, 4], [22, 26], [32, 18], [20, 10], [28, 17], [2, 22], [22, 30], [36, 41], [7, 35], [24, 29], [31, 31], [26, 39], [14, 32], [33, 27], [33, 9], [30, 37], [40, 14], [19, 17], [15, 11], [7, 40], [6, 36], [20, 19], [7, 12], [17, 25], [14, 24], [34, 25], [27, 34], [35, 41], [34, 3], [25, 12], [34, 29], [21, 23], [2, 12], [25, 26], [28, 16], [17, 2], [15, 28], [29, 0], [32, 16], [13, 29], [23, 26], [3, 11], [39, 3], [40, 16], [22, 39], [12, 30], [12, 24], [38, 24], [5, 1], [21, 39], [33, 39], [29, 36], [23, 40], [34, 20], [35, 10], [13, 7], [10, 2], [32, 26], [37, 4], [36, 21], [1, 18], [23, 11], [19, 11], [35, 5], [10, 32], [9, 17], [21, 2]]) == True\nassert sat([0, 17, 15, 3, 5, 13, 1], [[6, 6], [3, 6], [5, 0], [7, 16], [9, 12], [10, 3], [3, 5], [14, 17], [10, 14], [15, 3], [17, 15], [8, 18], [1, 12], [3, 7], [12, 17], [15, 15], [6, 2], [10, 9], [5, 13], [2, 15], [8, 5], [9, 15], [10, 6], [10, 17], [3, 9], [2, 6], [4, 1], [7, 12], [13, 1], [15, 17], [13, 5], [14, 10], [0, 17], [0, 11], [4, 17], [1, 11], [12, 18]]) == True\nassert sat([0, 7, 7, 6, 3, 2, 1], [[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]) == True\nassert sat('[0, 7, 7, 6, 3, 2, 1]', '[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]') == False\nassert sat('[0, 17, 15, 3, 5, 13, 1]', '[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]') == False\nassert sat('[0, 7, 7, 6, 3, 2, 1]', '[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]') == False\nassert sat([0, 2, 5, 6, 1], []) == False\nassert sat('[0, 17, 15, 3, 5, 13, 1]', '[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]') == False\nassert sat('[0, 34, 29, 36, 21, 23, 40, 31, 31, 5, 1]', '[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]') == False\nassert sat('[0, 8, 1]', '[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]') == False\nassert sat('[0, 2, 5, 6, 1]', '[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]') == False\nassert sat('[0, 8, 1]', '[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]') == False\nassert sat('[0, 2, 5, 6, 1]', '[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]') == False", "entry_fn_name": "sat"}
{"id": "304", "text": "Find a bipartite graph with n vertices on each side, z edges, and no K_3,3 subgraph.", "solution": "def sat(edges: List[List[int]], z, n, t):\n    from itertools import combinations\n    edges = {(a, b) for (a, b) in edges if a in range(n) and b in range(n)}\n    if not len(edges) >= z:\n        return False\n    return all((any(((a, b) not in edges for a in left for b in right)) for left in combinations(range(n), t) for right in combinations(range(n), t)))", "title": "TP3/Zarankiewicz", "testing_code": "assert sat([[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 4], [2, 0], [2, 1], [2, 3], [2, 4], [3, 0], [3, 2], [3, 3], [3, 4], [4, 1], [4, 2], [4, 3], [4, 4]], 20, 5, 3) == True\nassert sat([[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 3], [3, 0], [3, 2], [3, 3]], 13, 4, 3) == True\nassert sat([], 20, 5, 3) == False", "entry_fn_name": "sat"}
{"id": "305", "text": "You are given two graphs which are permutations of one another and the goal is to find the permutation.\nEach graph is specified by a list of edges where each edge is a pair of integer vertex numbers.", "solution": "def sat(bi: List[int], g1, g2):\n    return len(bi) == len(set(bi)) and {(i, j) for (i, j) in g1} == {(bi[i], bi[j]) for (i, j) in g2}", "title": "TP3/GraphIsomorphism", "testing_code": "assert sat([0, 2, 3, 4, 1, 5], [[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]], [[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]) == True\nassert sat([5, 6, 2, 7, 4, 1, 0, 3], [[0, 1], [0, 7], [1, 1], [2, 0], [2, 3], [2, 5], [2, 6], [3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [4, 3], [4, 5], [4, 6], [5, 0], [5, 2], [5, 3], [6, 0], [6, 5], [6, 7], [7, 0], [7, 4], [7, 6]], [[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]) == True\nassert sat([2, 0, 1], [[1, 0], [1, 1], [1, 2], [2, 1]], [[0, 2], [2, 2], [2, 0], [2, 1]]) == True\nassert sat('[0, 2, 3, 4, 1, 5]', '[[1, 0], [1, 1], [1, 2], [2, 1]]', '[[0, 2], [2, 2], [2, 0], [2, 1]]') == False\nassert sat('[5, 6, 2, 7, 4, 1, 0, 3]', '[[1, 0], [1, 1], [1, 2], [2, 1]]', '[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]') == False\nassert sat([0, 2, 3, 4, 1, 5], [], [[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]) == False\nassert sat('[2, 0, 1]', '[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]]', '[[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]') == False\nassert sat('[5, 6, 2, 7, 4, 1, 0, 3]', '[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]]', '[[0, 2], [2, 2], [2, 0], [2, 1]]') == False\nassert sat('[0, 2, 3, 4, 1, 5]', '[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]]', '[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]') == False\nassert sat('[5, 6, 2, 7, 4, 1, 0, 3]', '[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]]', '[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]') == False\nassert sat('[0, 2, 3, 4, 1, 5]', '[[1, 0], [1, 1], [1, 2], [2, 1]]', '[[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]') == False\nassert sat('[0, 2, 3, 4, 1, 5]', '[[0, 1], [0, 7], [1, 1], [2, 0], [2, 3], [2, 5], [2, 6], [3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [4, 3], [4, 5], [4, 6], [5, 0], [5, 2], [5, 3], [6, 0], [6, 5], [6, 7], [7, 0], [7, 4], [7, 6]]', '[[0, 2], [2, 2], [2, 0], [2, 1]]') == False\nassert sat('[2, 0, 1]', '[[1, 0], [1, 1], [1, 2], [2, 1]]', '[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]') == False", "entry_fn_name": "sat"}
{"id": "306", "text": "Find a list of nine integers, starting with 0 and ending with 128, such that each integer either differs from\nthe previous one by one or is thrice the previous one.", "solution": "def sat(li: List[int]):\n    return all((j in {i - 1, i + 1, 3 * i} for (i, j) in zip([0] + li, li + [128]))) and len(li) == 9", "title": "TP3/ShortIntegerPath", "testing_code": "assert sat([1, 3, 4, 12, 13, 14, 42, 126, 127]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "307", "text": "There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\nrow, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\nso that the first row is taller than the second row.", "solution": "def sat(perms: List[List[int]], prices0, prices1, heights0, heights1):\n    n = len(prices0)\n    (perm0, perm1) = perms\n    if not sorted(perm0) == sorted(perm1) == list(range(n)):\n        return False\n    for i in range(n - 1):\n        if not prices0[perm0[i]] <= prices0[perm0[i + 1]]:\n            return False\n        if not prices1[perm1[i]] <= prices1[perm1[i + 1]]:\n            return False\n    return all((heights0[i] > heights1[j] for (i, j) in zip(perm0, perm1)))", "title": "TP3/BiPermutations", "testing_code": "assert sat([[6, 7, 4, 3, 0, 1, 5, 2], [6, 7, 4, 3, 0, 1, 5, 2]], [7, 7, 9, 5, 3, 7, 1, 2], [5, 5, 5, 4, 2, 5, 1, 1], [2, 4, 9, 3, 8, 5, 5, 4], [1, 3, 8, 1, 5, 4, 4, 2]) == True\nassert sat([[0, 3, 4, 1, 2], [1, 4, 3, 2, 0]], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [12, 5, 8, 13, 7], [2, 10, 4, 5, 9]) == True\nassert sat([[2, 3, 0, 1, 4], [3, 4, 2, 0, 1]], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [9, 10, 12, 14, 14], [6, 5, 7, 10, 10]) == True\nassert sat([[41, 65, 63, 32, 72, 35, 60, 22, 42, 45, 56, 11, 15, 0, 26, 23, 61, 8, 17, 28, 34, 68, 27, 33, 52, 75, 3, 10, 29, 12, 5, 59, 58, 9, 24, 64, 37, 20, 2, 39, 49, 57, 62, 54, 67, 18, 6, 25, 43, 31, 53, 55, 7, 16, 48, 1, 71, 73, 14, 19, 74, 38, 69, 44, 66, 30, 47, 4, 21, 51, 13, 40, 46, 50, 70, 36], [56, 5, 37, 17, 50, 75, 47, 67, 66, 28, 46, 42, 34, 51, 62, 69, 26, 61, 2, 68, 13, 70, 40, 48, 54, 19, 25, 63, 24, 33, 53, 60, 18, 59, 52, 74, 72, 45, 0, 20, 35, 8, 57, 15, 14, 30, 1, 27, 21, 71, 43, 55, 9, 10, 3, 36, 6, 38, 32, 49, 16, 12, 31, 11, 7, 23, 44, 4, 41, 64, 58, 22, 29, 39, 65, 73]], [2, 5, 4, 2, 7, 3, 4, 5, 2, 3, 2, 1, 2, 7, 6, 1, 5, 2, 4, 6, 3, 7, 1, 2, 3, 5, 2, 2, 2, 2, 6, 5, 0, 2, 2, 0, 7, 3, 6, 4, 7, 0, 1, 5, 6, 1, 7, 6, 5, 4, 7, 7, 2, 5, 4, 5, 1, 4, 3, 3, 0, 2, 4, 0, 3, 0, 6, 4, 2, 6, 7, 5, 0, 5, 6, 2], [4, 5, 2, 5, 7, 0, 6, 6, 4, 5, 5, 6, 6, 2, 5, 4, 6, 0, 3, 3, 4, 5, 7, 7, 3, 3, 2, 5, 1, 7, 5, 6, 6, 3, 1, 4, 5, 0, 6, 7, 3, 7, 1, 5, 7, 4, 1, 0, 3, 6, 0, 1, 3, 3, 3, 5, 0, 4, 7, 3, 3, 2, 2, 3, 7, 7, 1, 1, 2, 2, 2, 5, 4, 7, 3, 0], [5, 4, 8, 9, 9, 11, 13, 6, 6, 6, 9, 13, 15, 8, 7, 14, 6, 5, 12, 7, 14, 9, 6, 13, 3, 10, 11, 8, 4, 14, 10, 10, 4, 8, 3, 7, 11, 8, 5, 5, 10, 11, 9, 9, 7, 11, 3, 13, 15, 5, 3, 7, 8, 10, 8, 13, 12, 3, 4, 13, 7, 7, 5, 5, 6, 10, 8, 11, 7, 5, 10, 15, 4, 15, 6, 8], [5, 9, 4, 4, 8, 7, 10, 1, 2, 5, 5, 3, 4, 1, 10, 1, 5, 3, 3, 5, 4, 8, 3, 9, 10, 5, 6, 9, 10, 2, 10, 4, 6, 10, 4, 3, 2, 4, 9, 2, 7, 8, 7, 7, 9, 10, 9, 1, 7, 6, 2, 4, 2, 10, 6, 6, 10, 2, 5, 3, 10, 5, 10, 4, 6, 2, 8, 5, 3, 10, 1, 8, 6, 2, 2, 2]) == True\nassert sat([[41, 51, 10, 72, 28, 70, 73, 3, 50, 43, 48, 49, 76, 22, 44, 36, 56, 64, 60, 67, 46, 30, 8, 15, 45, 42, 34, 29, 53, 58, 20, 7, 37, 74, 33, 17, 27, 47, 68, 16, 0, 63, 11, 54, 19, 2, 32, 6, 13, 62, 61, 52, 59, 4, 57, 21, 39, 55, 26, 69, 71, 14, 75, 5, 24, 1, 9, 25, 12, 18, 66, 65, 38, 35, 31, 23, 40], [64, 21, 32, 2, 9, 36, 41, 57, 15, 51, 53, 42, 60, 65, 28, 74, 0, 25, 35, 63, 5, 33, 47, 58, 68, 38, 59, 16, 43, 48, 71, 12, 23, 66, 69, 8, 30, 72, 39, 4, 27, 10, 14, 17, 6, 67, 34, 1, 22, 40, 73, 37, 45, 61, 29, 46, 56, 44, 26, 3, 24, 31, 76, 13, 18, 70, 7, 19, 55, 52, 62, 75, 11, 49, 50, 54, 20]], [3, 6, 4, 0, 5, 6, 4, 3, 1, 7, 0, 4, 7, 5, 6, 1, 3, 3, 7, 4, 2, 5, 1, 7, 6, 7, 6, 3, 0, 2, 1, 7, 4, 3, 2, 7, 1, 3, 7, 6, 7, 0, 2, 0, 1, 1, 1, 3, 1, 1, 0, 0, 5, 2, 4, 6, 1, 5, 2, 5, 1, 5, 5, 3, 1, 7, 7, 1, 3, 6, 0, 6, 0, 0, 3, 6, 1], [1, 4, 0, 6, 3, 1, 4, 6, 3, 0, 4, 7, 2, 6, 4, 0, 2, 4, 6, 7, 7, 0, 4, 2, 6, 1, 6, 3, 0, 5, 3, 6, 0, 1, 4, 1, 0, 5, 1, 3, 4, 0, 0, 2, 5, 5, 5, 1, 2, 7, 7, 0, 7, 0, 7, 7, 5, 0, 1, 1, 0, 5, 7, 1, 0, 0, 2, 4, 1, 2, 6, 2, 3, 4, 0, 7, 6], [12, 13, 8, 14, 12, 10, 15, 4, 13, 8, 7, 4, 8, 4, 7, 13, 7, 11, 6, 7, 11, 14, 11, 13, 10, 10, 5, 9, 12, 5, 11, 12, 12, 6, 4, 11, 5, 3, 4, 6, 3, 4, 3, 15, 4, 13, 8, 10, 10, 10, 14, 6, 10, 7, 6, 4, 6, 12, 8, 11, 7, 9, 7, 12, 6, 8, 6, 7, 8, 5, 13, 6, 10, 13, 5, 7, 10], [5, 8, 9, 3, 4, 7, 2, 7, 10, 10, 10, 3, 3, 8, 3, 9, 4, 5, 8, 9, 1, 4, 2, 2, 5, 3, 4, 4, 2, 6, 8, 2, 6, 9, 9, 6, 10, 7, 2, 7, 1, 10, 8, 6, 2, 10, 6, 8, 4, 3, 3, 9, 5, 9, 3, 7, 5, 10, 3, 1, 8, 10, 5, 6, 3, 8, 1, 7, 3, 1, 10, 4, 8, 1, 2, 5, 2]) == True\nassert sat([[6, 7, 4, 3, 0, 1, 5, 2], [6, 7, 4, 3, 0, 1, 5, 2]], [], [5, 5, 5, 4, 2, 5, 1, 1], [2, 4, 9, 3, 8, 5, 5, 4], [1, 3, 8, 1, 5, 4, 4, 2]) == False", "entry_fn_name": "sat"}
{"id": "308", "text": "You are to choose locations for bridge bases from among a given set of mountain peaks located at\n`xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\nlist of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\nare feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n* The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\nof adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\nselected mountain peaks must both be at most `H - d/2`.\n*  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\npeak. See the code for how this is determined mathematically.\n* The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\nall pillar heights) + beta * (the sum of the squared diameters)", "solution": "def sat(indices: List[int], H, alpha, beta, xs, ys, thresh):\n    if not sorted({0, len(xs) - 1, *indices}) == indices:\n        return False\n    cost = alpha * (H - ys[0])\n    for (i, j) in zip(indices, indices[1:]):\n        (a, b, r) = (xs[i], xs[j], (xs[j] - xs[i]) / 2)\n        if not max(ys[i], ys[j]) + r <= H:\n            return False\n        if not all((ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j))):\n            return False\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh", "title": "TP3/OptimalBridges", "testing_code": "assert sat([0, 2, 6, 7, 8, 10], 60, 18, 2, [0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], [0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], 26020) == True\nassert sat([0, 1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], 100000, 17, 6, [0, 3069, 5319, 5373, 5466, 5479, 5519, 6629, 9652, 9919, 11009, 11175, 11348, 12167, 13016, 13109, 13216, 13250, 13253, 14265, 15018, 16389, 20993, 22240, 23259, 23276, 23410, 25158, 27034, 30140, 31404, 31521, 31619, 31683, 31692, 31705, 34207, 55515, 64781, 71416, 76305, 77516, 81021, 85257, 85806, 86243, 91008, 97806, 100000], [81112, 12485, 94379, 88854, 987, 76485, 42941, 64723, 81743, 86552, 93967, 41028, 583, 23986, 45831, 34204, 5856, 40242, 63968, 6777, 16745, 36621, 70993, 45840, 41901, 19003, 56321, 76109, 36482, 43746, 94401, 24752, 56908, 76875, 59498, 38391, 6693, 23419, 73740, 47413, 27170, 34095, 80071, 53942, 76129, 80538, 44026, 72982, 75701], 4786941056) == True\nassert sat([0, 1, 3, 4, 5, 6, 7], 100000, 21, 40, [0, 8094, 57578, 62776, 83547, 87398, 95828, 100000], [14832, 27072, 77311, 50782, 82688, 11061, 50767, 3696], 143624404582) == True\nassert sat([0, 3, 8, 9, 23, 26, 27, 31, 41, 42, 47, 50, 51, 52, 54, 58, 59, 248, 289, 292, 294, 296, 297, 299, 306, 307, 308, 309, 311, 317, 326, 328, 338, 345, 350, 358, 360, 363, 365, 368, 371, 374, 375, 377, 379, 380, 382, 385, 387, 388, 391, 392, 394, 395, 398, 399, 400, 402, 403, 404, 409, 410, 412, 415, 418, 420, 425, 426, 428, 429, 434, 441, 450, 459, 466, 489, 492, 493, 495, 500, 501, 514, 522, 524, 525, 527, 528, 536, 539, 541, 542, 544, 546, 550, 552, 572, 587, 588, 589, 590, 592, 663, 794, 795, 797, 798, 799, 801, 803, 804, 805, 808, 814, 821, 828, 831, 835, 836, 839, 845, 846, 847, 848, 850, 852, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 886, 887, 888, 889, 891, 892, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 907, 909, 912, 914, 916, 918, 919, 921, 923, 924, 926, 927, 928, 929, 930, 931, 932, 934, 937, 938, 939, 940, 943, 944, 945, 946, 949, 951, 952, 953, 954, 955, 958, 959, 960, 961, 962, 963, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 980, 981, 982, 983, 984, 986, 987, 989, 991, 992, 994, 997, 998], 100000, 975, 546, [0, 102, 174, 281, 458, 554, 583, 590, 646, 1592, 1795, 1805, 1835, 1839, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1843, 2357, 2683, 3152, 3159, 3167, 3170, 3170, 3171, 3171, 3172, 3172, 3172, 3172, 3172, 3173, 4025, 4274, 4282, 4465, 4520, 4529, 4666, 4676, 4901, 4905, 5003, 5295, 5510, 5553, 5585, 5585, 5638, 5973, 6136, 6317, 6329, 6374, 6400, 6405, 6407, 6407, 6409, 6409, 6409, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6411, 6456, 6462, 6462, 6469, 6482, 6486, 6881, 6919, 7240, 7510, 7599, 7995, 8173, 8249, 8284, 8296, 8298, 8298, 8299, 8301, 8427, 8701, 8751, 8945, 9141, 9166, 9208, 9308, 9321, 9327, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9333, 10630, 11062, 11173, 11286, 11294, 11319, 11322, 11367, 11372, 11376, 11398, 11399, 11403, 11409, 11451, 11459, 11519, 11660, 11687, 11691, 11694, 11694, 11697, 12232, 12313, 12314, 12316, 12321, 12322, 12322, 12322, 12323, 13101, 13207, 13274, 13445, 13512, 13687, 13911, 13987, 14251, 14255, 14306, 14570, 14594, 14606, 14606, 14608, 14998, 15232, 15237, 15633, 15795, 15831, 15991, 16176, 16179, 16189, 16228, 16339, 16450, 16540, 16777, 16851, 16889, 17291, 17694, 18333, 18356, 19390, 19449, 19454, 19750, 20562, 22013, 22332, 22374, 22591, 23234, 23276, 23281, 23296, 23351, 23397, 23762, 23844, 23859, 23866, 23894, 23943, 24311, 24379, 24958, 25140, 25160, 25178, 25211, 25219, 25235, 25378, 25929, 26078, 26181, 26474, 26804, 26821, 26838, 26843, 26858, 26894, 26894, 26894, 26895, 27181, 27302, 27329, 27365, 27374, 27380, 27381, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27383, 27386, 27418, 27450, 27463, 27525, 27529, 27552, 27559, 27562, 27562, 27563, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27565, 27721, 27801, 27818, 27882, 28083, 28148, 28673, 29079, 29102, 29155, 29158, 29162, 29193, 29256, 29576, 29991, 29992, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29997, 30025, 30083, 30088, 30146, 30173, 30182, 30305, 30408, 30596, 30905, 31000, 31405, 31558, 31588, 31663, 31664, 31664, 31667, 31670, 31674, 31676, 31703, 32815, 32821, 32949, 33977, 34036, 34403, 34413, 34464, 34505, 34509, 34511, 34772, 34972, 35021, 35068, 35259, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35273, 35311, 35343, 35611, 35950, 36192, 36400, 36410, 36622, 36820, 36883, 36959, 36960, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36964, 37010, 37035, 37311, 37660, 37733, 37934, 38287, 38539, 39425, 39441, 39473, 40033, 40124, 40319, 40609, 40643, 40673, 40727, 40741, 40742, 40744, 40750, 41021, 41080, 41311, 41319, 41321, 41335, 41344, 41344, 41345, 41345, 41345, 41345, 41345, 41346, 41532, 41554, 42011, 42164, 42187, 42276, 42566, 42675, 43393, 43473, 43480, 43504, 43504, 43504, 43504, 43504, 43505, 44026, 44718, 45006, 45128, 45193, 45581, 45643, 45679, 45684, 45687, 45858, 45958, 46022, 46126, 46367, 46712, 46849, 47743, 47968, 48262, 49272, 49376, 50058, 50436, 51804, 51966, 52122, 52374, 53401, 53638, 54722, 55797, 55906, 56812, 56839, 57005, 58384, 58720, 58959, 59074, 59209, 59512, 59785, 60798, 61136, 61198, 61505, 62052, 62540, 62555, 62783, 63241, 63829, 64155, 64422, 64520, 65271, 65297, 67452, 67628, 68258, 68379, 69233, 69496, 69613, 69774, 70090, 70092, 70759, 70770, 70809, 71196, 71265, 71529, 72250, 72476, 72523, 72556, 72829, 73209, 73477, 73739, 73843, 74249, 74728, 74988, 75425, 75988, 76032, 76096, 76152, 76222, 76751, 77227, 77631, 77995, 78061, 78169, 78400, 78784, 79499, 80385, 80551, 80627, 80660, 81059, 81143, 81405, 81665, 82904, 83595, 83957, 83996, 84043, 84739, 85031, 85987, 86319, 86864, 86933, 86947, 87127, 87520, 87543, 87848, 88057, 88437, 89195, 89401, 90469, 90756, 90761, 91175, 91975, 92907, 92987, 94337, 94470, 95290, 96267, 96378, 96635, 97113, 97608, 97663, 97721, 98148, 98536, 98629, 98960, 99036, 99763, 99793, 100000], [2773, 47376, 17008, 24785, 21921, 60359, 33137, 72146, 76002, 49654, 25696, 25832, 72474, 2917, 18229, 2385, 66151, 51868, 4760, 69187, 67221, 14320, 24425, 88890, 24553, 78751, 70869, 11279, 12625, 84959, 28885, 87499, 61816, 41222, 81997, 1265, 63632, 12863, 54939, 56081, 35629, 37122, 49133, 24893, 41731, 9182, 34407, 90952, 42360, 43861, 99296, 80331, 78826, 19484, 90699, 30578, 71697, 10304, 61318, 89870, 38599, 71160, 22805, 17850, 60106, 76742, 14571, 74280, 88847, 53537, 84726, 7279, 55376, 47707, 78111, 14855, 20855, 89936, 20706, 98672, 5385, 76357, 90172, 48891, 6243, 82298, 64602, 99637, 83220, 87261, 26190, 39457, 12610, 44567, 54545, 71246, 96608, 5086, 65811, 15907, 21012, 17278, 1139, 54815, 52416, 19440, 44857, 16066, 22379, 73573, 36087, 54255, 60304, 30497, 1202, 95520, 48378, 68296, 14032, 50456, 60555, 80390, 70975, 17531, 3761, 46399, 48927, 96320, 79008, 25360, 67058, 26409, 29891, 324, 67141, 24534, 69987, 11711, 99837, 82260, 8818, 67647, 66046, 76727, 25049, 48694, 96244, 42767, 13120, 53729, 90754, 47498, 40257, 7844, 79665, 35900, 33567, 80332, 68427, 29914, 91621, 38959, 35796, 7435, 65460, 434, 2785, 4710, 80793, 20827, 22155, 90320, 5066, 24178, 18875, 51294, 5222, 95816, 14268, 68478, 96761, 66479, 67335, 51513, 78673, 73143, 11679, 85300, 88785, 1004, 18064, 91085, 18999, 25640, 45379, 74924, 94706, 46916, 32682, 31715, 3086, 49466, 85098, 49913, 44647, 82331, 27219, 13875, 58769, 3667, 10298, 44795, 62204, 21497, 58731, 12965, 62569, 72238, 49525, 22899, 84200, 3845, 98178, 924, 35984, 32417, 22686, 22620, 47458, 87867, 29566, 77085, 10960, 14876, 89730, 21641, 13636, 79167, 53472, 30103, 56335, 39274, 74071, 68958, 66408, 47354, 84728, 28113, 99860, 49955, 79844, 1186, 85981, 39037, 60464, 80363, 89186, 92541, 16343, 48363, 7581, 73306, 68325, 65829, 84163, 74355, 53786, 58715, 98906, 39439, 27860, 76391, 76589, 39834, 27137, 81688, 64132, 49120, 56144, 86941, 95518, 72009, 82728, 96067, 97712, 79469, 44330, 67454, 39941, 97408, 58132, 5066, 93590, 77162, 72882, 39621, 31441, 23172, 65710, 88436, 34469, 86816, 9665, 5643, 68076, 70549, 80805, 94994, 91769, 84542, 62168, 74918, 61406, 45287, 5793, 54563, 3652, 92584, 61367, 28505, 30248, 20120, 86422, 81094, 83631, 58464, 55958, 40896, 81384, 55062, 40915, 58556, 32091, 34368, 54084, 77250, 25828, 15620, 90399, 20250, 73405, 26695, 2032, 83486, 95048, 94554, 30946, 28573, 74157, 43422, 85194, 47436, 36847, 40337, 44865, 44811, 69652, 13169, 41240, 48298, 72630, 51768, 49849, 81558, 51868, 75819, 14511, 36733, 35093, 77864, 36881, 97122, 60008, 48465, 10154, 94832, 12514, 47840, 15591, 65517, 68261, 63597, 80341, 6530, 76786, 97631, 2526, 47318, 83685, 23732, 20477, 36378, 4066, 79691, 93070, 83021, 37168, 52019, 85092, 72854, 20879, 55104, 61225, 87611, 84521, 9011, 27496, 39666, 61677, 49131, 80714, 29320, 98393, 71579, 39547, 34736, 99974, 53333, 26106, 50745, 92975, 84628, 24607, 5133, 38793, 24284, 43324, 50981, 51005, 22088, 10404, 59675, 84882, 52975, 94861, 17852, 74017, 42533, 53763, 1986, 59478, 96769, 77976, 58875, 25744, 68724, 10130, 52144, 73428, 10610, 97509, 64410, 37812, 59809, 8455, 65712, 89789, 87542, 22274, 94253, 59627, 42450, 26524, 12018, 35043, 27433, 94055, 79108, 64297, 39011, 68974, 69586, 87982, 71372, 62430, 43056, 15425, 80083, 68963, 38661, 45853, 44335, 71876, 28982, 2264, 61889, 6454, 58072, 242, 93781, 71755, 66290, 90497, 54071, 55444, 64765, 4058, 79429, 41630, 15024, 64603, 98934, 48326, 56618, 55522, 37470, 57495, 31975, 70970, 31709, 31945, 64378, 12831, 51921, 76994, 31476, 72360, 63265, 35422, 88813, 58864, 74401, 91076, 37836, 55027, 95549, 15618, 34969, 60039, 61528, 3321, 94087, 37316, 81288, 81268, 71368, 95150, 57625, 34979, 60444, 45713, 87417, 17729, 30256, 98375, 2527, 95619, 71929, 47741, 59345, 50186, 73234, 74055, 49179, 14980, 21318, 96240, 9917, 75849, 56534, 85371, 63765, 23611, 47419, 34402, 48943, 26048, 69611, 29375, 29430, 6553, 97428, 97806, 80481, 26953, 42600, 59032, 65854, 66035, 48964, 22269, 52171, 14513, 65468, 66339, 25356, 52393, 7853, 24853, 78187, 83930, 67307, 45091, 41518, 52101, 76047, 40529, 36318, 3755, 62784, 77519, 22200, 70689, 33135, 81934, 72265, 2971, 91369, 53872, 45818, 57790, 21607, 66120, 26696, 92619, 47305, 65861, 60602, 66559, 2054, 57820, 19261, 6596, 56435, 12167, 29581, 17598, 1729, 77111, 26411, 66914, 14722, 39615, 27758, 96587, 69153, 65407, 65952, 52604, 28856, 58297, 94511, 71028, 75000, 60829, 12334, 21754, 20048, 5488, 11184, 80078, 64552, 23655, 75130, 79850, 40299, 92970, 89686, 72265, 49906, 84405, 90304, 74509, 97608, 32383, 77555, 89457, 96493, 25090, 79130, 5238, 44242, 54197, 87027, 77862, 44899, 39596, 50314, 66002, 34789, 83144, 62992, 9580, 89205, 9252, 54862, 53171, 64280, 13361, 17974, 66583, 40129, 4768, 25940, 96021, 80579, 7235, 63726, 87348, 21304, 86007, 94534, 57733, 43068, 31145, 34295, 12128, 97580, 83653, 28797, 69504, 29790, 73946, 59341, 48155, 1463, 80083, 32469, 71782, 20850, 96205, 42015, 73041, 55026, 56528, 41902, 12404, 62462, 81533, 16708, 7415, 68387, 80571, 32027, 35225, 10946, 94144, 4194, 43504, 49796, 50362, 95023, 52994, 95205, 36035, 71247, 41720, 6865, 17427, 36924, 61894, 38538, 67742, 44575, 14625, 79002, 90627, 8841, 84462, 7945, 24927, 82064, 46459, 52759, 31226, 5657, 79441, 64942, 70601, 84159, 3713, 5819, 33208, 82518, 79984, 11805, 65691, 27461, 79491, 31649, 44872, 55358, 59545, 43403, 25937, 57129, 95086, 33073, 66761, 54601, 58418, 97317, 55033, 52664, 98134, 37723, 11301, 82638, 57741, 7107, 3684, 12886, 23805, 51818, 91767, 69982, 49206, 31880, 98404, 66281, 65126, 58401, 7132, 42216, 82869, 16032, 26488, 60581, 34013, 63817, 6519, 89872, 31855, 22997, 69212, 73604, 76079, 64953, 98735, 44812, 4732, 94488, 84054, 42787, 46869, 45010, 20732, 5560, 56309, 77803, 42883, 66324, 49402, 64847, 31627, 94225, 77195, 95635, 68166, 31386, 63128, 31631, 70432, 46143, 52182, 8113, 84606, 51625, 55982, 29418, 64146, 69813, 44592, 79603, 46634, 32362, 62318, 18402, 68531, 53415, 19852, 28919, 62513, 79532, 49718, 33065, 56835, 64306, 60638, 70658, 79161, 27512, 68976, 89331, 29937, 12813, 57173, 27550, 84813, 60721, 11582, 44931, 88702, 7688, 52433, 55498, 95194, 39528, 6913, 6693, 94386, 842, 12398, 45874, 68922, 71749, 4672, 93255, 10276, 30051, 18146, 1369, 34708, 13026, 81431, 18801, 4379, 1238, 53213, 33648, 8064, 76802, 41132, 22338, 2817, 16671, 85926, 86066, 41124, 36200, 37286, 96525, 59693, 83181, 87393, 35298, 17208, 90473, 22239, 61861, 41594, 2519, 54614, 59722, 37429, 49717, 81394, 55456, 64709, 76277, 23690, 55080, 41336, 29750, 97329, 28604, 24728, 76992, 67044, 34563, 32395, 24170, 30848, 56474, 78881, 4772, 23177, 28993, 11230, 77390, 62191, 24747, 29986, 50371, 34979, 66772, 80075, 19549, 78848, 11352, 48373, 96733, 93428, 45892, 86184, 62894, 19948, 70176, 16630, 69200, 28933, 93458, 73504, 54975, 55489, 8787, 47519, 97887, 16335], 44238370995) == True\nassert sat([0, 1, 2, 3], 100000, 6, 2, [0, 75202, 97997, 100000], [24586, 7488, 4413, 30235], 12359929344) == True\nassert sat([0, 2, 6, 7, 8, 10], 60, 18, 2, [], [0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], 26020) == False\nassert sat([], 60, 18, 2, [0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], [0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], 26020) == False", "entry_fn_name": "sat"}
{"id": "309", "text": "You are given a partial transcript a checkers game. Find an initial position such that the transcript\nwould be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\nThere are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\nThe initial position is represented as a list [x, y, piece] where piece means:\n* 0 is empty square\n* 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n* 2 or -2 is king for player 1 or player 2 respectively\nAdditional rules:\n* You must jump if you can, and you must continue jumping until one can't any longer.\n* You cannot start the position with any non-kings on your last rank.\n* Promotion happens after the turn ends", "solution": "def sat(position: List[List[int]], transcript):\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    for (x, y, p) in position:\n        if not (-2 <= p <= 2 and board[x, y] == 0):\n            return False\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]\n        return any((board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for (dx, dy) in deltas))\n    sign = 1\n    for move in transcript:\n        (start, end) = (tuple(move[0]), tuple(move[-1]))\n        p = board[start]\n        if not p * sign > 0:\n            return False\n        if not all((board[x, y] == 0 for (x, y) in move if [x, y] != move[0])):\n            return False\n        for ((x1, y1), (x2, y2)) in zip(move, move[1:]):\n            if not (abs(p) != 1 or (y2 - y1) * p > 0):\n                return False\n            if abs(x2 - x1) == 1:\n                if not not any((has_a_jump(*a) for a in board if board[a] * p > 0)):\n                    return False\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            if not board[mid] * p < 0:\n                return False\n            board[mid] = 0\n        (board[start], board[end]) = (0, p)\n        if not (abs(x2 - x1) == 1 or not has_a_jump(*end)):\n            return False\n        if abs(p) == 1 and any((y in {0, 7} for (x, y) in move[1:])):\n            board[end] *= 2\n        sign *= -1\n    return True", "title": "TP3/CheckersPosition", "testing_code": "assert sat([[0, 0, 0], [0, 2, 0], [0, 4, 0], [0, 6, 0], [1, 1, 0], [1, 3, 0], [1, 5, 0], [1, 7, 0], [2, 0, 0], [2, 2, 0], [2, 4, 0], [2, 6, 0], [3, 1, 0], [3, 3, 1], [3, 5, 0], [3, 7, 0], [4, 0, 0], [4, 2, 0], [4, 4, -1], [4, 6, -1], [5, 1, 0], [5, 3, -2], [5, 5, 0], [5, 7, 0], [6, 0, 0], [6, 2, 0], [6, 4, 0], [6, 6, 0], [7, 1, 0], [7, 3, 0], [7, 5, 0], [7, 7, 0]], [[[3, 3], [5, 5], [3, 7]], [[5, 3], [6, 4]]]) == True\nassert sat([[0, 0, 0], [0, 2, 0], [0, 4, 0], [0, 6, 0], [1, 1, 0], [1, 3, 0], [1, 5, 0], [1, 7, 0], [2, 0, 0], [2, 2, 0], [2, 4, 0], [2, 6, 0], [3, 1, 0], [3, 3, 0], [3, 5, 0], [3, 7, 0], [4, 0, 0], [4, 2, 0], [4, 4, 0], [4, 6, 0], [5, 1, 0], [5, 3, 0], [5, 5, 0], [5, 7, 0], [6, 0, 0], [6, 2, 0], [6, 4, 0], [6, 6, 0], [7, 1, 0], [7, 3, 0], [7, 5, 0], [7, 7, 0]], []) == True\nassert sat([[0, 0, 1], [0, 2, 0], [0, 4, 0], [0, 6, 0], [1, 1, 1], [1, 3, 0], [1, 5, 0], [1, 7, -1], [2, 0, 0], [2, 2, 0], [2, 4, -1], [2, 6, 0], [3, 1, 1], [3, 3, 0], [3, 5, -1], [3, 7, -1], [4, 0, 1], [4, 2, 1], [4, 4, 0], [4, 6, -1], [5, 1, 0], [5, 3, -1], [5, 5, 0], [5, 7, -1], [6, 0, 0], [6, 2, 0], [6, 4, 1], [6, 6, 0], [7, 1, 0], [7, 3, 1], [7, 5, 0], [7, 7, -1]], [[[6, 4], [5, 5]], [[4, 6], [6, 4]], [[7, 3], [5, 5]], [[3, 5], [4, 4]], [[4, 2], [6, 4]], [[3, 7], [2, 6]], [[5, 5], [6, 6]], [[7, 7], [5, 5], [7, 3]], [[1, 1], [0, 2]], [[7, 3], [6, 2]], [[0, 0], [1, 1]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[4, 4], [3, 3]], [[1, 1], [2, 2]], [[3, 3], [1, 1]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[0, 2], [1, 3]], [[2, 4], [0, 2]], [[3, 1], [2, 2]], [[1, 7], [0, 6]]]) == True\nassert sat([[0, 0, 0], [0, 2, 0], [0, 4, 0], [0, 6, 0], [1, 1, 0], [1, 3, 0], [1, 5, 0], [1, 7, 0], [2, 0, 0], [2, 2, -1], [2, 4, 0], [2, 6, 0], [3, 1, 1], [3, 3, 0], [3, 5, 0], [3, 7, 0], [4, 0, 0], [4, 2, 0], [4, 4, 0], [4, 6, 0], [5, 1, 0], [5, 3, 0], [5, 5, 0], [5, 7, 0], [6, 0, 0], [6, 2, 0], [6, 4, 0], [6, 6, 0], [7, 1, 0], [7, 3, 0], [7, 5, 0], [7, 7, 0]], [[[3, 1], [1, 3]]]) == True\nassert sat([[0, 0, 1], [0, 2, 1], [0, 4, 0], [0, 6, -1], [1, 1, 1], [1, 3, 1], [1, 5, -1], [1, 7, 0], [2, 0, 1], [2, 2, 0], [2, 4, 0], [2, 6, 0], [3, 1, 0], [3, 3, 0], [3, 5, -1], [3, 7, 0], [4, 0, 0], [4, 2, -1], [4, 4, -1], [4, 6, -1], [5, 1, 1], [5, 3, 0], [5, 5, 0], [5, 7, -1], [6, 0, 1], [6, 2, 1], [6, 4, 0], [6, 6, -1], [7, 1, 1], [7, 3, -1], [7, 5, -1], [7, 7, -1]], [[[5, 1], [3, 3], [5, 5], [3, 7]], [[7, 3], [5, 1]], [[6, 0], [4, 2]], [[3, 5], [2, 4]], [[1, 3], [3, 5]], [[7, 5], [6, 4]], [[1, 1], [2, 2]], [[6, 4], [7, 3]], [[4, 2], [3, 3]], [[6, 6], [5, 5]], [[0, 2], [1, 3]], [[5, 7], [4, 6]], [[3, 5], [5, 7]], [[1, 5], [2, 4]], [[3, 3], [1, 5]], [[0, 6], [2, 4], [0, 2]], [[2, 2], [1, 3]], [[5, 5], [4, 4]], [[7, 1], [6, 2]], [[7, 3], [5, 1]], [[1, 3], [2, 4]], [[7, 7], [6, 6]], [[5, 7], [7, 5]], [[0, 2], [1, 1]], [[0, 0], [2, 2]], [[4, 4], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [4, 2]], [[6, 4], [7, 5]], [[5, 1], [6, 0]], [[2, 4], [3, 5]], [[6, 0], [7, 1]], [[2, 2], [1, 3]], [[7, 1], [6, 0]], [[3, 5], [4, 6]], [[4, 2], [5, 1]], [[2, 0], [3, 1]], [[6, 0], [7, 1]], [[1, 3], [0, 4]], [[5, 1], [6, 0]], [[7, 5], [6, 6]], [[7, 1], [6, 2]], [[6, 6], [7, 7]], [[6, 0], [5, 1]], [[7, 7], [6, 6]], [[6, 2], [5, 3]], [[3, 1], [4, 2]], [[5, 3], [3, 1]], [[6, 6], [5, 5]], [[3, 1], [2, 0]], [[3, 7], [2, 6]], [[2, 0], [3, 1]], [[5, 5], [4, 4]], [[5, 1], [6, 2]], [[4, 4], [5, 5]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [3, 3]], [[2, 6], [1, 7]], [[3, 3], [2, 2]], [[4, 6], [5, 7]], [[2, 2], [3, 3]], [[1, 7], [2, 6]], [[6, 2], [5, 3]], [[5, 7], [4, 6]]]) == True\nassert sat([], [[[3, 3], [5, 5], [3, 7]], [[5, 3], [6, 4]]]) == False", "entry_fn_name": "sat"}
{"id": "310", "text": "The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\nand lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\nto find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n(like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\nnesting like nested parentheses. Can you solve it in linear time?", "solution": "def sat(cut_position: int, ring, lower):\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= 1 if matches[c] > 0 else len(line)\n        else:\n            matches[c.lower()] += 1\n    return sum((i == 0 for i in matches.values())) >= lower", "title": "TP3/MatchingMarkers", "testing_code": "assert sat(4, 'yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM', 5) == True\nassert sat(0, 'MvI', 0) == True\nassert sat(0, 's', 0) == True\nassert sat(0, 'fyVYVBfGHVYsBrYVgsgHYvVD', 0) == True\nassert sat(0, 'ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf', 1) == True\nassert sat(4, '', 5) == False", "entry_fn_name": "sat"}
{"id": "311", "text": "There are five boxes each having one coin initially. Two types of moves are allowed:\n* (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n* (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\nGiven `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\nNote that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\nbox. Encode each state as a list of the numbers of coins in the five boxes.\nSample Input:\n`n = 2`\nSample Output:\n`[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\nThe last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\nstates is encoded by lists of 5 coin counts", "solution": "def sat(states: List[List[int]], n):\n    if not (states[0] == [1] * 5 and all((len(li) == 5 for li in states)) and all((i >= 0 for li in states for i in li))):\n        return False\n    for (prev, cur) in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        if not cur[i] < prev[i]:\n            return False\n        if not (cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:] or (cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:])):\n            return False\n    return states[-1][-1] == 2 ** n", "title": "TP3/ExponentialCoinMoves", "testing_code": "assert sat([[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32767, 2]], 1) == True\nassert sat([[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32766, 4]], 2) == True\nassert sat([[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32760, 16]], 4) == True\nassert sat([[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32640, 256]], 8) == True\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32760, 16]]', '2') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32767, 2]]', '2') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32766, 4]]', '8') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32760, 16]]', '8') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32766, 4]]', '4') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32640, 256]]', '2') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32766, 4]]', '2') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32760, 16]]', '4') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32767, 2]]', '8') == False\nassert sat('[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0], [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0], [0, 1, 13, 2, 0], [0, 1, 13, 0, 4], [0, 1, 12, 4, 0], [0, 1, 12, 0, 8], [0, 1, 11, 8, 0], [0, 1, 11, 0, 16], [0, 1, 10, 16, 0], [0, 1, 10, 0, 32], [0, 1, 9, 32, 0], [0, 1, 9, 0, 64], [0, 1, 8, 64, 0], [0, 1, 8, 0, 128], [0, 1, 7, 128, 0], [0, 1, 7, 0, 256], [0, 1, 6, 256, 0], [0, 1, 6, 0, 512], [0, 1, 5, 512, 0], [0, 1, 5, 0, 1024], [0, 1, 4, 1024, 0], [0, 1, 4, 0, 2048], [0, 1, 3, 2048, 0], [0, 1, 3, 0, 4096], [0, 1, 2, 4096, 0], [0, 1, 2, 0, 8192], [0, 1, 1, 8192, 0], [0, 1, 1, 0, 16384], [0, 1, 0, 16384, 0], [0, 0, 16384, 0, 0], [0, 0, 0, 32768, 0], [0, 0, 0, 32640, 256]]', '4') == False", "entry_fn_name": "sat"}
{"id": "312", "text": "Let P(n) = n^2 + n + 1.\nGiven b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\nthe property that there is no element that is relatively prime to every other element.\nSample input:\nb = 6\nm = 2\nSample output:\n[195, 196]", "solution": "def sat(nums: List[int], b, m):\n    if not (len(nums) == len(set(nums)) == m and min(nums) >= 0):\n        return False\n\n    def gcd(i, j):\n        (r, s) = (max(i, j), min(i, j))\n        while s >= 1:\n            (r, s) = (s, r % s)\n        return r\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if not all((any((i != j and gcd(i, j) > 1 for j in nums)) for i in nums)):\n            return False\n    return True", "title": "TP3/NoRelativePrimes", "testing_code": "assert sat([195, 594, 993, 1392, 1791, 2190], 7, 6) == True\nassert sat([195, 594, 993, 1392, 1791, 2190, 2589, 2988, 3387, 3786, 4185, 4584, 4983, 5382, 5781, 6180, 6579, 6978, 7377, 7776, 8175, 8574, 8973, 9372, 9771, 10170], 7, 26) == True\nassert sat([195, 196, 594, 595, 994, 1393, 1792, 2191, 2590, 2989, 3388, 3787, 4186, 4585, 4984, 5383, 5782, 6181, 6580, 6979, 7378, 7777, 8176, 8575, 8974, 9373, 9772, 10171, 10570, 10969, 11368, 11767, 12166, 12565, 12964, 13363, 13762, 14161, 14560, 14959, 15358, 15757, 16156, 16555, 16954, 17353, 17752, 18151, 18550, 18949, 19348, 19747, 20146, 20545, 20944, 21343, 21742, 22141, 22540, 22939, 23338, 23737, 24136, 24535, 24934, 25333, 25732, 26131, 26530, 26929, 27328, 27727, 28126], 6, 73) == True\nassert sat([195, 594, 993, 1392, 1791, 2190, 2589, 2988, 3387, 3786, 4185, 4584, 4983, 5382, 5781, 6180, 6579, 6978, 7377, 7776, 8175, 8574, 8973, 9372, 9771, 10170, 10569, 10968, 11367, 11766, 12165, 12564, 12963, 13362, 13761, 14160, 14559, 14958, 15357, 15756, 16155, 16554, 16953, 17352, 17751, 18150, 18549, 18948, 19347, 19746, 20145, 20544, 20943, 21342, 21741, 22140, 22539, 22938, 23337, 23736, 24135, 24534, 24933, 25332, 25731, 26130, 26529, 26928, 27327, 27726, 28125, 28524, 28923, 29322, 29721, 30120, 30519, 30918, 31317, 31716, 32115, 32514, 32913, 33312, 33711, 34110, 34509, 34908, 35307, 35706, 36105, 36504], 7, 92) == True\nassert sat('[195, 594, 993, 1392, 1791, 2190, 2589, 2988, 3387, 3786, 4185, 4584, 4983, 5382, 5781, 6180, 6579, 6978, 7377, 7776, 8175, 8574, 8973, 9372, 9771, 10170]', '7', '6') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190, 2589, 2988, 3387, 3786, 4185, 4584, 4983, 5382, 5781, 6180, 6579, 6978, 7377, 7776, 8175, 8574, 8973, 9372, 9771, 10170]', '6', '6') == False\nassert sat('[195, 196, 594, 595, 994, 1393, 1792, 2191, 2590, 2989, 3388, 3787, 4186, 4585, 4984, 5383, 5782, 6181, 6580, 6979, 7378, 7777, 8176, 8575, 8974, 9373, 9772, 10171, 10570, 10969, 11368, 11767, 12166, 12565, 12964, 13363, 13762, 14161, 14560, 14959, 15358, 15757, 16156, 16555, 16954, 17353, 17752, 18151, 18550, 18949, 19348, 19747, 20146, 20545, 20944, 21343, 21742, 22141, 22540, 22939, 23338, 23737, 24136, 24535, 24934, 25333, 25732, 26131, 26530, 26929, 27328, 27727, 28126]', '6', '6') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190]', '7', '6') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190]', '7', '26') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190]', '7', '73') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190]', '6', '73') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190, 2589, 2988, 3387, 3786, 4185, 4584, 4983, 5382, 5781, 6180, 6579, 6978, 7377, 7776, 8175, 8574, 8973, 9372, 9771, 10170]', '7', '73') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190]', '6', '6') == False\nassert sat('[195, 594, 993, 1392, 1791, 2190, 2589, 2988, 3387, 3786, 4185, 4584, 4983, 5382, 5781, 6180, 6579, 6978, 7377, 7776, 8175, 8574, 8973, 9372, 9771, 10170]', '6', '73') == False", "entry_fn_name": "sat"}
{"id": "313", "text": "Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\noccurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\na_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\nFor a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\nSample input:\n9\nSample output:\n[0, 3, 6, ..., 2997]\nThe sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\nall equal in this case.", "solution": "def sat(indices: List[int], a0):\n    if not (a0 >= 0 and a0 % 3 == 0):\n        return False\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and (len({s[i] for i in indices}) == 1)", "title": "TP3/FindRepeats", "testing_code": "assert sat([19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 241, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 334, 337, 340, 343, 346, 349, 352, 355, 358, 361, 364, 367, 370, 373, 376, 379, 382, 385, 388, 391, 394, 397, 400, 403, 406, 409, 412, 415, 418, 421, 424, 427, 430, 433, 436, 439, 442, 445, 448, 451, 454, 457, 460, 463, 466, 469, 472, 475, 478, 481, 484, 487, 490, 493, 496, 499, 502, 505, 508, 511, 514, 517, 520, 523, 526, 529, 532, 535, 538, 541, 544, 547, 550, 553, 556, 559, 562, 565, 568, 571, 574, 577, 580, 583, 586, 589, 592, 595, 598, 601, 604, 607, 610, 613, 616, 619, 622, 625, 628, 631, 634, 637, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 691, 694, 697, 700, 703, 706, 709, 712, 715, 718, 721, 724, 727, 730, 733, 736, 739, 742, 745, 748, 751, 754, 757, 760, 763, 766, 769, 772, 775, 778, 781, 784, 787, 790, 793, 796, 799, 802, 805, 808, 811, 814, 817, 820, 823, 826, 829, 832, 835, 838, 841, 844, 847, 850, 853, 856, 859, 862, 865, 868, 871, 874, 877, 880, 883, 886, 889, 892, 895, 898, 901, 904, 907, 910, 913, 916, 919, 922, 925, 928, 931, 934, 937, 940, 943, 946, 949, 952, 955, 958, 961, 964, 967, 970, 973, 976, 979, 982, 985, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 1273, 1276, 1279, 1282, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 1318, 1321, 1324, 1327, 1330, 1333, 1336, 1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 1363, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 1387, 1390, 1393, 1396, 1399, 1402, 1405, 1408, 1411, 1414, 1417, 1420, 1423, 1426, 1429, 1432, 1435, 1438, 1441, 1444, 1447, 1450, 1453, 1456, 1459, 1462, 1465, 1468, 1471, 1474, 1477, 1480, 1483, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507, 1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552, 1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 1750, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 1774, 1777, 1780, 1783, 1786, 1789, 1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837, 1840, 1843, 1846, 1849, 1852, 1855, 1858, 1861, 1864, 1867, 1870, 1873, 1876, 1879, 1882, 1885, 1888, 1891, 1894, 1897, 1900, 1903, 1906, 1909, 1912, 1915, 1918, 1921, 1924, 1927, 1930, 1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954, 1957, 1960, 1963, 1966, 1969, 1972, 1975, 1978, 1981, 1984, 1987, 1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011, 2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 2038, 2041, 2044, 2047, 2050, 2053, 2056, 2059, 2062, 2065, 2068, 2071, 2074, 2077, 2080, 2083, 2086, 2089, 2092, 2095, 2098, 2101, 2104, 2107, 2110, 2113, 2116, 2119, 2122, 2125, 2128, 2131, 2134, 2137, 2140, 2143, 2146, 2149, 2152, 2155, 2158, 2161, 2164, 2167, 2170, 2173, 2176, 2179, 2182, 2185, 2188, 2191, 2194, 2197, 2200, 2203, 2206, 2209, 2212, 2215, 2218, 2221, 2224, 2227, 2230, 2233, 2236, 2239, 2242, 2245, 2248, 2251, 2254, 2257, 2260, 2263, 2266, 2269, 2272, 2275, 2278, 2281, 2284, 2287, 2290, 2293, 2296, 2299, 2302, 2305, 2308, 2311, 2314, 2317, 2320, 2323, 2326, 2329, 2332, 2335, 2338, 2341, 2344, 2347, 2350, 2353, 2356, 2359, 2362, 2365, 2368, 2371, 2374, 2377, 2380, 2383, 2386, 2389, 2392, 2395, 2398, 2401, 2404, 2407, 2410, 2413, 2416, 2419, 2422, 2425, 2428, 2431, 2434, 2437, 2440, 2443, 2446, 2449, 2452, 2455, 2458, 2461, 2464, 2467, 2470, 2473, 2476, 2479, 2482, 2485, 2488, 2491, 2494, 2497, 2500, 2503, 2506, 2509, 2512, 2515, 2518, 2521, 2524, 2527, 2530, 2533, 2536, 2539, 2542, 2545, 2548, 2551, 2554, 2557, 2560, 2563, 2566, 2569, 2572, 2575, 2578, 2581, 2584, 2587, 2590, 2593, 2596, 2599, 2602, 2605, 2608, 2611, 2614, 2617, 2620, 2623, 2626, 2629, 2632, 2635, 2638, 2641, 2644, 2647, 2650, 2653, 2656, 2659, 2662, 2665, 2668, 2671, 2674, 2677, 2680, 2683, 2686, 2689, 2692, 2695, 2698, 2701, 2704, 2707, 2710, 2713, 2716, 2719, 2722, 2725, 2728, 2731, 2734, 2737, 2740, 2743, 2746, 2749, 2752, 2755, 2758, 2761, 2764, 2767, 2770, 2773, 2776, 2779, 2782, 2785, 2788, 2791, 2794, 2797, 2800, 2803, 2806, 2809, 2812, 2815, 2818, 2821, 2824, 2827, 2830, 2833, 2836, 2839, 2842, 2845, 2848, 2851, 2854, 2857, 2860, 2863, 2866, 2869, 2872, 2875, 2878, 2881, 2884, 2887, 2890, 2893, 2896, 2899, 2902, 2905, 2908, 2911, 2914, 2917, 2920, 2923, 2926, 2929, 2932, 2935, 2938, 2941, 2944, 2947, 2950, 2953, 2956, 2959, 2962, 2965, 2968, 2971, 2974, 2977, 2980, 2983, 2986, 2989, 2992, 2995, 2998, 3001, 3004, 3007, 3010, 3013, 3016], 123) == True\nassert sat([1758, 1761, 1764, 1767, 1770, 1773, 1776, 1779, 1782, 1785, 1788, 1791, 1794, 1797, 1800, 1803, 1806, 1809, 1812, 1815, 1818, 1821, 1824, 1827, 1830, 1833, 1836, 1839, 1842, 1845, 1848, 1851, 1854, 1857, 1860, 1863, 1866, 1869, 1872, 1875, 1878, 1881, 1884, 1887, 1890, 1893, 1896, 1899, 1902, 1905, 1908, 1911, 1914, 1917, 1920, 1923, 1926, 1929, 1932, 1935, 1938, 1941, 1944, 1947, 1950, 1953, 1956, 1959, 1962, 1965, 1968, 1971, 1974, 1977, 1980, 1983, 1986, 1989, 1992, 1995, 1998, 2001, 2004, 2007, 2010, 2013, 2016, 2019, 2022, 2025, 2028, 2031, 2034, 2037, 2040, 2043, 2046, 2049, 2052, 2055, 2058, 2061, 2064, 2067, 2070, 2073, 2076, 2079, 2082, 2085, 2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 2112, 2115, 2118, 2121, 2124, 2127, 2130, 2133, 2136, 2139, 2142, 2145, 2148, 2151, 2154, 2157, 2160, 2163, 2166, 2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190, 2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 2241, 2244, 2247, 2250, 2253, 2256, 2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 2307, 2310, 2313, 2316, 2319, 2322, 2325, 2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349, 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 2379, 2382, 2385, 2388, 2391, 2394, 2397, 2400, 2403, 2406, 2409, 2412, 2415, 2418, 2421, 2424, 2427, 2430, 2433, 2436, 2439, 2442, 2445, 2448, 2451, 2454, 2457, 2460, 2463, 2466, 2469, 2472, 2475, 2478, 2481, 2484, 2487, 2490, 2493, 2496, 2499, 2502, 2505, 2508, 2511, 2514, 2517, 2520, 2523, 2526, 2529, 2532, 2535, 2538, 2541, 2544, 2547, 2550, 2553, 2556, 2559, 2562, 2565, 2568, 2571, 2574, 2577, 2580, 2583, 2586, 2589, 2592, 2595, 2598, 2601, 2604, 2607, 2610, 2613, 2616, 2619, 2622, 2625, 2628, 2631, 2634, 2637, 2640, 2643, 2646, 2649, 2652, 2655, 2658, 2661, 2664, 2667, 2670, 2673, 2676, 2679, 2682, 2685, 2688, 2691, 2694, 2697, 2700, 2703, 2706, 2709, 2712, 2715, 2718, 2721, 2724, 2727, 2730, 2733, 2736, 2739, 2742, 2745, 2748, 2751, 2754, 2757, 2760, 2763, 2766, 2769, 2772, 2775, 2778, 2781, 2784, 2787, 2790, 2793, 2796, 2799, 2802, 2805, 2808, 2811, 2814, 2817, 2820, 2823, 2826, 2829, 2832, 2835, 2838, 2841, 2844, 2847, 2850, 2853, 2856, 2859, 2862, 2865, 2868, 2871, 2874, 2877, 2880, 2883, 2886, 2889, 2892, 2895, 2898, 2901, 2904, 2907, 2910, 2913, 2916, 2919, 2922, 2925, 2928, 2931, 2934, 2937, 2940, 2943, 2946, 2949, 2952, 2955, 2958, 2961, 2964, 2967, 2970, 2973, 2976, 2979, 2982, 2985, 2988, 2991, 2994, 2997, 3000, 3003, 3006, 3009, 3012, 3015, 3018, 3021, 3024, 3027, 3030, 3033, 3036, 3039, 3042, 3045, 3048, 3051, 3054, 3057, 3060, 3063, 3066, 3069, 3072, 3075, 3078, 3081, 3084, 3087, 3090, 3093, 3096, 3099, 3102, 3105, 3108, 3111, 3114, 3117, 3120, 3123, 3126, 3129, 3132, 3135, 3138, 3141, 3144, 3147, 3150, 3153, 3156, 3159, 3162, 3165, 3168, 3171, 3174, 3177, 3180, 3183, 3186, 3189, 3192, 3195, 3198, 3201, 3204, 3207, 3210, 3213, 3216, 3219, 3222, 3225, 3228, 3231, 3234, 3237, 3240, 3243, 3246, 3249, 3252, 3255, 3258, 3261, 3264, 3267, 3270, 3273, 3276, 3279, 3282, 3285, 3288, 3291, 3294, 3297, 3300, 3303, 3306, 3309, 3312, 3315, 3318, 3321, 3324, 3327, 3330, 3333, 3336, 3339, 3342, 3345, 3348, 3351, 3354, 3357, 3360, 3363, 3366, 3369, 3372, 3375, 3378, 3381, 3384, 3387, 3390, 3393, 3396, 3399, 3402, 3405, 3408, 3411, 3414, 3417, 3420, 3423, 3426, 3429, 3432, 3435, 3438, 3441, 3444, 3447, 3450, 3453, 3456, 3459, 3462, 3465, 3468, 3471, 3474, 3477, 3480, 3483, 3486, 3489, 3492, 3495, 3498, 3501, 3504, 3507, 3510, 3513, 3516, 3519, 3522, 3525, 3528, 3531, 3534, 3537, 3540, 3543, 3546, 3549, 3552, 3555, 3558, 3561, 3564, 3567, 3570, 3573, 3576, 3579, 3582, 3585, 3588, 3591, 3594, 3597, 3600, 3603, 3606, 3609, 3612, 3615, 3618, 3621, 3624, 3627, 3630, 3633, 3636, 3639, 3642, 3645, 3648, 3651, 3654, 3657, 3660, 3663, 3666, 3669, 3672, 3675, 3678, 3681, 3684, 3687, 3690, 3693, 3696, 3699, 3702, 3705, 3708, 3711, 3714, 3717, 3720, 3723, 3726, 3729, 3732, 3735, 3738, 3741, 3744, 3747, 3750, 3753, 3756, 3759, 3762, 3765, 3768, 3771, 3774, 3777, 3780, 3783, 3786, 3789, 3792, 3795, 3798, 3801, 3804, 3807, 3810, 3813, 3816, 3819, 3822, 3825, 3828, 3831, 3834, 3837, 3840, 3843, 3846, 3849, 3852, 3855, 3858, 3861, 3864, 3867, 3870, 3873, 3876, 3879, 3882, 3885, 3888, 3891, 3894, 3897, 3900, 3903, 3906, 3909, 3912, 3915, 3918, 3921, 3924, 3927, 3930, 3933, 3936, 3939, 3942, 3945, 3948, 3951, 3954, 3957, 3960, 3963, 3966, 3969, 3972, 3975, 3978, 3981, 3984, 3987, 3990, 3993, 3996, 3999, 4002, 4005, 4008, 4011, 4014, 4017, 4020, 4023, 4026, 4029, 4032, 4035, 4038, 4041, 4044, 4047, 4050, 4053, 4056, 4059, 4062, 4065, 4068, 4071, 4074, 4077, 4080, 4083, 4086, 4089, 4092, 4095, 4098, 4101, 4104, 4107, 4110, 4113, 4116, 4119, 4122, 4125, 4128, 4131, 4134, 4137, 4140, 4143, 4146, 4149, 4152, 4155, 4158, 4161, 4164, 4167, 4170, 4173, 4176, 4179, 4182, 4185, 4188, 4191, 4194, 4197, 4200, 4203, 4206, 4209, 4212, 4215, 4218, 4221, 4224, 4227, 4230, 4233, 4236, 4239, 4242, 4245, 4248, 4251, 4254, 4257, 4260, 4263, 4266, 4269, 4272, 4275, 4278, 4281, 4284, 4287, 4290, 4293, 4296, 4299, 4302, 4305, 4308, 4311, 4314, 4317, 4320, 4323, 4326, 4329, 4332, 4335, 4338, 4341, 4344, 4347, 4350, 4353, 4356, 4359, 4362, 4365, 4368, 4371, 4374, 4377, 4380, 4383, 4386, 4389, 4392, 4395, 4398, 4401, 4404, 4407, 4410, 4413, 4416, 4419, 4422, 4425, 4428, 4431, 4434, 4437, 4440, 4443, 4446, 4449, 4452, 4455, 4458, 4461, 4464, 4467, 4470, 4473, 4476, 4479, 4482, 4485, 4488, 4491, 4494, 4497, 4500, 4503, 4506, 4509, 4512, 4515, 4518, 4521, 4524, 4527, 4530, 4533, 4536, 4539, 4542, 4545, 4548, 4551, 4554, 4557, 4560, 4563, 4566, 4569, 4572, 4575, 4578, 4581, 4584, 4587, 4590, 4593, 4596, 4599, 4602, 4605, 4608, 4611, 4614, 4617, 4620, 4623, 4626, 4629, 4632, 4635, 4638, 4641, 4644, 4647, 4650, 4653, 4656, 4659, 4662, 4665, 4668, 4671, 4674, 4677, 4680, 4683, 4686, 4689, 4692, 4695, 4698, 4701, 4704, 4707, 4710, 4713, 4716, 4719, 4722, 4725, 4728, 4731, 4734, 4737, 4740, 4743, 4746, 4749, 4752, 4755], 2827347) == True\nassert sat([2178, 2181, 2184, 2187, 2190, 2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 2241, 2244, 2247, 2250, 2253, 2256, 2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 2307, 2310, 2313, 2316, 2319, 2322, 2325, 2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349, 2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 2379, 2382, 2385, 2388, 2391, 2394, 2397, 2400, 2403, 2406, 2409, 2412, 2415, 2418, 2421, 2424, 2427, 2430, 2433, 2436, 2439, 2442, 2445, 2448, 2451, 2454, 2457, 2460, 2463, 2466, 2469, 2472, 2475, 2478, 2481, 2484, 2487, 2490, 2493, 2496, 2499, 2502, 2505, 2508, 2511, 2514, 2517, 2520, 2523, 2526, 2529, 2532, 2535, 2538, 2541, 2544, 2547, 2550, 2553, 2556, 2559, 2562, 2565, 2568, 2571, 2574, 2577, 2580, 2583, 2586, 2589, 2592, 2595, 2598, 2601, 2604, 2607, 2610, 2613, 2616, 2619, 2622, 2625, 2628, 2631, 2634, 2637, 2640, 2643, 2646, 2649, 2652, 2655, 2658, 2661, 2664, 2667, 2670, 2673, 2676, 2679, 2682, 2685, 2688, 2691, 2694, 2697, 2700, 2703, 2706, 2709, 2712, 2715, 2718, 2721, 2724, 2727, 2730, 2733, 2736, 2739, 2742, 2745, 2748, 2751, 2754, 2757, 2760, 2763, 2766, 2769, 2772, 2775, 2778, 2781, 2784, 2787, 2790, 2793, 2796, 2799, 2802, 2805, 2808, 2811, 2814, 2817, 2820, 2823, 2826, 2829, 2832, 2835, 2838, 2841, 2844, 2847, 2850, 2853, 2856, 2859, 2862, 2865, 2868, 2871, 2874, 2877, 2880, 2883, 2886, 2889, 2892, 2895, 2898, 2901, 2904, 2907, 2910, 2913, 2916, 2919, 2922, 2925, 2928, 2931, 2934, 2937, 2940, 2943, 2946, 2949, 2952, 2955, 2958, 2961, 2964, 2967, 2970, 2973, 2976, 2979, 2982, 2985, 2988, 2991, 2994, 2997, 3000, 3003, 3006, 3009, 3012, 3015, 3018, 3021, 3024, 3027, 3030, 3033, 3036, 3039, 3042, 3045, 3048, 3051, 3054, 3057, 3060, 3063, 3066, 3069, 3072, 3075, 3078, 3081, 3084, 3087, 3090, 3093, 3096, 3099, 3102, 3105, 3108, 3111, 3114, 3117, 3120, 3123, 3126, 3129, 3132, 3135, 3138, 3141, 3144, 3147, 3150, 3153, 3156, 3159, 3162, 3165, 3168, 3171, 3174, 3177, 3180, 3183, 3186, 3189, 3192, 3195, 3198, 3201, 3204, 3207, 3210, 3213, 3216, 3219, 3222, 3225, 3228, 3231, 3234, 3237, 3240, 3243, 3246, 3249, 3252, 3255, 3258, 3261, 3264, 3267, 3270, 3273, 3276, 3279, 3282, 3285, 3288, 3291, 3294, 3297, 3300, 3303, 3306, 3309, 3312, 3315, 3318, 3321, 3324, 3327, 3330, 3333, 3336, 3339, 3342, 3345, 3348, 3351, 3354, 3357, 3360, 3363, 3366, 3369, 3372, 3375, 3378, 3381, 3384, 3387, 3390, 3393, 3396, 3399, 3402, 3405, 3408, 3411, 3414, 3417, 3420, 3423, 3426, 3429, 3432, 3435, 3438, 3441, 3444, 3447, 3450, 3453, 3456, 3459, 3462, 3465, 3468, 3471, 3474, 3477, 3480, 3483, 3486, 3489, 3492, 3495, 3498, 3501, 3504, 3507, 3510, 3513, 3516, 3519, 3522, 3525, 3528, 3531, 3534, 3537, 3540, 3543, 3546, 3549, 3552, 3555, 3558, 3561, 3564, 3567, 3570, 3573, 3576, 3579, 3582, 3585, 3588, 3591, 3594, 3597, 3600, 3603, 3606, 3609, 3612, 3615, 3618, 3621, 3624, 3627, 3630, 3633, 3636, 3639, 3642, 3645, 3648, 3651, 3654, 3657, 3660, 3663, 3666, 3669, 3672, 3675, 3678, 3681, 3684, 3687, 3690, 3693, 3696, 3699, 3702, 3705, 3708, 3711, 3714, 3717, 3720, 3723, 3726, 3729, 3732, 3735, 3738, 3741, 3744, 3747, 3750, 3753, 3756, 3759, 3762, 3765, 3768, 3771, 3774, 3777, 3780, 3783, 3786, 3789, 3792, 3795, 3798, 3801, 3804, 3807, 3810, 3813, 3816, 3819, 3822, 3825, 3828, 3831, 3834, 3837, 3840, 3843, 3846, 3849, 3852, 3855, 3858, 3861, 3864, 3867, 3870, 3873, 3876, 3879, 3882, 3885, 3888, 3891, 3894, 3897, 3900, 3903, 3906, 3909, 3912, 3915, 3918, 3921, 3924, 3927, 3930, 3933, 3936, 3939, 3942, 3945, 3948, 3951, 3954, 3957, 3960, 3963, 3966, 3969, 3972, 3975, 3978, 3981, 3984, 3987, 3990, 3993, 3996, 3999, 4002, 4005, 4008, 4011, 4014, 4017, 4020, 4023, 4026, 4029, 4032, 4035, 4038, 4041, 4044, 4047, 4050, 4053, 4056, 4059, 4062, 4065, 4068, 4071, 4074, 4077, 4080, 4083, 4086, 4089, 4092, 4095, 4098, 4101, 4104, 4107, 4110, 4113, 4116, 4119, 4122, 4125, 4128, 4131, 4134, 4137, 4140, 4143, 4146, 4149, 4152, 4155, 4158, 4161, 4164, 4167, 4170, 4173, 4176, 4179, 4182, 4185, 4188, 4191, 4194, 4197, 4200, 4203, 4206, 4209, 4212, 4215, 4218, 4221, 4224, 4227, 4230, 4233, 4236, 4239, 4242, 4245, 4248, 4251, 4254, 4257, 4260, 4263, 4266, 4269, 4272, 4275, 4278, 4281, 4284, 4287, 4290, 4293, 4296, 4299, 4302, 4305, 4308, 4311, 4314, 4317, 4320, 4323, 4326, 4329, 4332, 4335, 4338, 4341, 4344, 4347, 4350, 4353, 4356, 4359, 4362, 4365, 4368, 4371, 4374, 4377, 4380, 4383, 4386, 4389, 4392, 4395, 4398, 4401, 4404, 4407, 4410, 4413, 4416, 4419, 4422, 4425, 4428, 4431, 4434, 4437, 4440, 4443, 4446, 4449, 4452, 4455, 4458, 4461, 4464, 4467, 4470, 4473, 4476, 4479, 4482, 4485, 4488, 4491, 4494, 4497, 4500, 4503, 4506, 4509, 4512, 4515, 4518, 4521, 4524, 4527, 4530, 4533, 4536, 4539, 4542, 4545, 4548, 4551, 4554, 4557, 4560, 4563, 4566, 4569, 4572, 4575, 4578, 4581, 4584, 4587, 4590, 4593, 4596, 4599, 4602, 4605, 4608, 4611, 4614, 4617, 4620, 4623, 4626, 4629, 4632, 4635, 4638, 4641, 4644, 4647, 4650, 4653, 4656, 4659, 4662, 4665, 4668, 4671, 4674, 4677, 4680, 4683, 4686, 4689, 4692, 4695, 4698, 4701, 4704, 4707, 4710, 4713, 4716, 4719, 4722, 4725, 4728, 4731, 4734, 4737, 4740, 4743, 4746, 4749, 4752, 4755, 4758, 4761, 4764, 4767, 4770, 4773, 4776, 4779, 4782, 4785, 4788, 4791, 4794, 4797, 4800, 4803, 4806, 4809, 4812, 4815, 4818, 4821, 4824, 4827, 4830, 4833, 4836, 4839, 4842, 4845, 4848, 4851, 4854, 4857, 4860, 4863, 4866, 4869, 4872, 4875, 4878, 4881, 4884, 4887, 4890, 4893, 4896, 4899, 4902, 4905, 4908, 4911, 4914, 4917, 4920, 4923, 4926, 4929, 4932, 4935, 4938, 4941, 4944, 4947, 4950, 4953, 4956, 4959, 4962, 4965, 4968, 4971, 4974, 4977, 4980, 4983, 4986, 4989, 4992, 4995, 4998, 5001, 5004, 5007, 5010, 5013, 5016, 5019, 5022, 5025, 5028, 5031, 5034, 5037, 5040, 5043, 5046, 5049, 5052, 5055, 5058, 5061, 5064, 5067, 5070, 5073, 5076, 5079, 5082, 5085, 5088, 5091, 5094, 5097, 5100, 5103, 5106, 5109, 5112, 5115, 5118, 5121, 5124, 5127, 5130, 5133, 5136, 5139, 5142, 5145, 5148, 5151, 5154, 5157, 5160, 5163, 5166, 5169, 5172, 5175], 2362263) == True\nassert sat([2632, 2635, 2638, 2641, 2644, 2647, 2650, 2653, 2656, 2659, 2662, 2665, 2668, 2671, 2674, 2677, 2680, 2683, 2686, 2689, 2692, 2695, 2698, 2701, 2704, 2707, 2710, 2713, 2716, 2719, 2722, 2725, 2728, 2731, 2734, 2737, 2740, 2743, 2746, 2749, 2752, 2755, 2758, 2761, 2764, 2767, 2770, 2773, 2776, 2779, 2782, 2785, 2788, 2791, 2794, 2797, 2800, 2803, 2806, 2809, 2812, 2815, 2818, 2821, 2824, 2827, 2830, 2833, 2836, 2839, 2842, 2845, 2848, 2851, 2854, 2857, 2860, 2863, 2866, 2869, 2872, 2875, 2878, 2881, 2884, 2887, 2890, 2893, 2896, 2899, 2902, 2905, 2908, 2911, 2914, 2917, 2920, 2923, 2926, 2929, 2932, 2935, 2938, 2941, 2944, 2947, 2950, 2953, 2956, 2959, 2962, 2965, 2968, 2971, 2974, 2977, 2980, 2983, 2986, 2989, 2992, 2995, 2998, 3001, 3004, 3007, 3010, 3013, 3016, 3019, 3022, 3025, 3028, 3031, 3034, 3037, 3040, 3043, 3046, 3049, 3052, 3055, 3058, 3061, 3064, 3067, 3070, 3073, 3076, 3079, 3082, 3085, 3088, 3091, 3094, 3097, 3100, 3103, 3106, 3109, 3112, 3115, 3118, 3121, 3124, 3127, 3130, 3133, 3136, 3139, 3142, 3145, 3148, 3151, 3154, 3157, 3160, 3163, 3166, 3169, 3172, 3175, 3178, 3181, 3184, 3187, 3190, 3193, 3196, 3199, 3202, 3205, 3208, 3211, 3214, 3217, 3220, 3223, 3226, 3229, 3232, 3235, 3238, 3241, 3244, 3247, 3250, 3253, 3256, 3259, 3262, 3265, 3268, 3271, 3274, 3277, 3280, 3283, 3286, 3289, 3292, 3295, 3298, 3301, 3304, 3307, 3310, 3313, 3316, 3319, 3322, 3325, 3328, 3331, 3334, 3337, 3340, 3343, 3346, 3349, 3352, 3355, 3358, 3361, 3364, 3367, 3370, 3373, 3376, 3379, 3382, 3385, 3388, 3391, 3394, 3397, 3400, 3403, 3406, 3409, 3412, 3415, 3418, 3421, 3424, 3427, 3430, 3433, 3436, 3439, 3442, 3445, 3448, 3451, 3454, 3457, 3460, 3463, 3466, 3469, 3472, 3475, 3478, 3481, 3484, 3487, 3490, 3493, 3496, 3499, 3502, 3505, 3508, 3511, 3514, 3517, 3520, 3523, 3526, 3529, 3532, 3535, 3538, 3541, 3544, 3547, 3550, 3553, 3556, 3559, 3562, 3565, 3568, 3571, 3574, 3577, 3580, 3583, 3586, 3589, 3592, 3595, 3598, 3601, 3604, 3607, 3610, 3613, 3616, 3619, 3622, 3625, 3628, 3631, 3634, 3637, 3640, 3643, 3646, 3649, 3652, 3655, 3658, 3661, 3664, 3667, 3670, 3673, 3676, 3679, 3682, 3685, 3688, 3691, 3694, 3697, 3700, 3703, 3706, 3709, 3712, 3715, 3718, 3721, 3724, 3727, 3730, 3733, 3736, 3739, 3742, 3745, 3748, 3751, 3754, 3757, 3760, 3763, 3766, 3769, 3772, 3775, 3778, 3781, 3784, 3787, 3790, 3793, 3796, 3799, 3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829, 3832, 3835, 3838, 3841, 3844, 3847, 3850, 3853, 3856, 3859, 3862, 3865, 3868, 3871, 3874, 3877, 3880, 3883, 3886, 3889, 3892, 3895, 3898, 3901, 3904, 3907, 3910, 3913, 3916, 3919, 3922, 3925, 3928, 3931, 3934, 3937, 3940, 3943, 3946, 3949, 3952, 3955, 3958, 3961, 3964, 3967, 3970, 3973, 3976, 3979, 3982, 3985, 3988, 3991, 3994, 3997, 4000, 4003, 4006, 4009, 4012, 4015, 4018, 4021, 4024, 4027, 4030, 4033, 4036, 4039, 4042, 4045, 4048, 4051, 4054, 4057, 4060, 4063, 4066, 4069, 4072, 4075, 4078, 4081, 4084, 4087, 4090, 4093, 4096, 4099, 4102, 4105, 4108, 4111, 4114, 4117, 4120, 4123, 4126, 4129, 4132, 4135, 4138, 4141, 4144, 4147, 4150, 4153, 4156, 4159, 4162, 4165, 4168, 4171, 4174, 4177, 4180, 4183, 4186, 4189, 4192, 4195, 4198, 4201, 4204, 4207, 4210, 4213, 4216, 4219, 4222, 4225, 4228, 4231, 4234, 4237, 4240, 4243, 4246, 4249, 4252, 4255, 4258, 4261, 4264, 4267, 4270, 4273, 4276, 4279, 4282, 4285, 4288, 4291, 4294, 4297, 4300, 4303, 4306, 4309, 4312, 4315, 4318, 4321, 4324, 4327, 4330, 4333, 4336, 4339, 4342, 4345, 4348, 4351, 4354, 4357, 4360, 4363, 4366, 4369, 4372, 4375, 4378, 4381, 4384, 4387, 4390, 4393, 4396, 4399, 4402, 4405, 4408, 4411, 4414, 4417, 4420, 4423, 4426, 4429, 4432, 4435, 4438, 4441, 4444, 4447, 4450, 4453, 4456, 4459, 4462, 4465, 4468, 4471, 4474, 4477, 4480, 4483, 4486, 4489, 4492, 4495, 4498, 4501, 4504, 4507, 4510, 4513, 4516, 4519, 4522, 4525, 4528, 4531, 4534, 4537, 4540, 4543, 4546, 4549, 4552, 4555, 4558, 4561, 4564, 4567, 4570, 4573, 4576, 4579, 4582, 4585, 4588, 4591, 4594, 4597, 4600, 4603, 4606, 4609, 4612, 4615, 4618, 4621, 4624, 4627, 4630, 4633, 4636, 4639, 4642, 4645, 4648, 4651, 4654, 4657, 4660, 4663, 4666, 4669, 4672, 4675, 4678, 4681, 4684, 4687, 4690, 4693, 4696, 4699, 4702, 4705, 4708, 4711, 4714, 4717, 4720, 4723, 4726, 4729, 4732, 4735, 4738, 4741, 4744, 4747, 4750, 4753, 4756, 4759, 4762, 4765, 4768, 4771, 4774, 4777, 4780, 4783, 4786, 4789, 4792, 4795, 4798, 4801, 4804, 4807, 4810, 4813, 4816, 4819, 4822, 4825, 4828, 4831, 4834, 4837, 4840, 4843, 4846, 4849, 4852, 4855, 4858, 4861, 4864, 4867, 4870, 4873, 4876, 4879, 4882, 4885, 4888, 4891, 4894, 4897, 4900, 4903, 4906, 4909, 4912, 4915, 4918, 4921, 4924, 4927, 4930, 4933, 4936, 4939, 4942, 4945, 4948, 4951, 4954, 4957, 4960, 4963, 4966, 4969, 4972, 4975, 4978, 4981, 4984, 4987, 4990, 4993, 4996, 4999, 5002, 5005, 5008, 5011, 5014, 5017, 5020, 5023, 5026, 5029, 5032, 5035, 5038, 5041, 5044, 5047, 5050, 5053, 5056, 5059, 5062, 5065, 5068, 5071, 5074, 5077, 5080, 5083, 5086, 5089, 5092, 5095, 5098, 5101, 5104, 5107, 5110, 5113, 5116, 5119, 5122, 5125, 5128, 5131, 5134, 5137, 5140, 5143, 5146, 5149, 5152, 5155, 5158, 5161, 5164, 5167, 5170, 5173, 5176, 5179, 5182, 5185, 5188, 5191, 5194, 5197, 5200, 5203, 5206, 5209, 5212, 5215, 5218, 5221, 5224, 5227, 5230, 5233, 5236, 5239, 5242, 5245, 5248, 5251, 5254, 5257, 5260, 5263, 5266, 5269, 5272, 5275, 5278, 5281, 5284, 5287, 5290, 5293, 5296, 5299, 5302, 5305, 5308, 5311, 5314, 5317, 5320, 5323, 5326, 5329, 5332, 5335, 5338, 5341, 5344, 5347, 5350, 5353, 5356, 5359, 5362, 5365, 5368, 5371, 5374, 5377, 5380, 5383, 5386, 5389, 5392, 5395, 5398, 5401, 5404, 5407, 5410, 5413, 5416, 5419, 5422, 5425, 5428, 5431, 5434, 5437, 5440, 5443, 5446, 5449, 5452, 5455, 5458, 5461, 5464, 5467, 5470, 5473, 5476, 5479, 5482, 5485, 5488, 5491, 5494, 5497, 5500, 5503, 5506, 5509, 5512, 5515, 5518, 5521, 5524, 5527, 5530, 5533, 5536, 5539, 5542, 5545, 5548, 5551, 5554, 5557, 5560, 5563, 5566, 5569, 5572, 5575, 5578, 5581, 5584, 5587, 5590, 5593, 5596, 5599, 5602, 5605, 5608, 5611, 5614, 5617, 5620, 5623, 5626, 5629], 1703235) == True\nassert sat([1841, 1844, 1847, 1850, 1853, 1856, 1859, 1862, 1865, 1868, 1871, 1874, 1877, 1880, 1883, 1886, 1889, 1892, 1895, 1898, 1901, 1904, 1907, 1910, 1913, 1916, 1919, 1922, 1925, 1928, 1931, 1934, 1937, 1940, 1943, 1946, 1949, 1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973, 1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997, 2000, 2003, 2006, 2009, 2012, 2015, 2018, 2021, 2024, 2027, 2030, 2033, 2036, 2039, 2042, 2045, 2048, 2051, 2054, 2057, 2060, 2063, 2066, 2069, 2072, 2075, 2078, 2081, 2084, 2087, 2090, 2093, 2096, 2099, 2102, 2105, 2108, 2111, 2114, 2117, 2120, 2123, 2126, 2129, 2132, 2135, 2138, 2141, 2144, 2147, 2150, 2153, 2156, 2159, 2162, 2165, 2168, 2171, 2174, 2177, 2180, 2183, 2186, 2189, 2192, 2195, 2198, 2201, 2204, 2207, 2210, 2213, 2216, 2219, 2222, 2225, 2228, 2231, 2234, 2237, 2240, 2243, 2246, 2249, 2252, 2255, 2258, 2261, 2264, 2267, 2270, 2273, 2276, 2279, 2282, 2285, 2288, 2291, 2294, 2297, 2300, 2303, 2306, 2309, 2312, 2315, 2318, 2321, 2324, 2327, 2330, 2333, 2336, 2339, 2342, 2345, 2348, 2351, 2354, 2357, 2360, 2363, 2366, 2369, 2372, 2375, 2378, 2381, 2384, 2387, 2390, 2393, 2396, 2399, 2402, 2405, 2408, 2411, 2414, 2417, 2420, 2423, 2426, 2429, 2432, 2435, 2438, 2441, 2444, 2447, 2450, 2453, 2456, 2459, 2462, 2465, 2468, 2471, 2474, 2477, 2480, 2483, 2486, 2489, 2492, 2495, 2498, 2501, 2504, 2507, 2510, 2513, 2516, 2519, 2522, 2525, 2528, 2531, 2534, 2537, 2540, 2543, 2546, 2549, 2552, 2555, 2558, 2561, 2564, 2567, 2570, 2573, 2576, 2579, 2582, 2585, 2588, 2591, 2594, 2597, 2600, 2603, 2606, 2609, 2612, 2615, 2618, 2621, 2624, 2627, 2630, 2633, 2636, 2639, 2642, 2645, 2648, 2651, 2654, 2657, 2660, 2663, 2666, 2669, 2672, 2675, 2678, 2681, 2684, 2687, 2690, 2693, 2696, 2699, 2702, 2705, 2708, 2711, 2714, 2717, 2720, 2723, 2726, 2729, 2732, 2735, 2738, 2741, 2744, 2747, 2750, 2753, 2756, 2759, 2762, 2765, 2768, 2771, 2774, 2777, 2780, 2783, 2786, 2789, 2792, 2795, 2798, 2801, 2804, 2807, 2810, 2813, 2816, 2819, 2822, 2825, 2828, 2831, 2834, 2837, 2840, 2843, 2846, 2849, 2852, 2855, 2858, 2861, 2864, 2867, 2870, 2873, 2876, 2879, 2882, 2885, 2888, 2891, 2894, 2897, 2900, 2903, 2906, 2909, 2912, 2915, 2918, 2921, 2924, 2927, 2930, 2933, 2936, 2939, 2942, 2945, 2948, 2951, 2954, 2957, 2960, 2963, 2966, 2969, 2972, 2975, 2978, 2981, 2984, 2987, 2990, 2993, 2996, 2999, 3002, 3005, 3008, 3011, 3014, 3017, 3020, 3023, 3026, 3029, 3032, 3035, 3038, 3041, 3044, 3047, 3050, 3053, 3056, 3059, 3062, 3065, 3068, 3071, 3074, 3077, 3080, 3083, 3086, 3089, 3092, 3095, 3098, 3101, 3104, 3107, 3110, 3113, 3116, 3119, 3122, 3125, 3128, 3131, 3134, 3137, 3140, 3143, 3146, 3149, 3152, 3155, 3158, 3161, 3164, 3167, 3170, 3173, 3176, 3179, 3182, 3185, 3188, 3191, 3194, 3197, 3200, 3203, 3206, 3209, 3212, 3215, 3218, 3221, 3224, 3227, 3230, 3233, 3236, 3239, 3242, 3245, 3248, 3251, 3254, 3257, 3260, 3263, 3266, 3269, 3272, 3275, 3278, 3281, 3284, 3287, 3290, 3293, 3296, 3299, 3302, 3305, 3308, 3311, 3314, 3317, 3320, 3323, 3326, 3329, 3332, 3335, 3338, 3341, 3344, 3347, 3350, 3353, 3356, 3359, 3362, 3365, 3368, 3371, 3374, 3377, 3380, 3383, 3386, 3389, 3392, 3395, 3398, 3401, 3404, 3407, 3410, 3413, 3416, 3419, 3422, 3425, 3428, 3431, 3434, 3437, 3440, 3443, 3446, 3449, 3452, 3455, 3458, 3461, 3464, 3467, 3470, 3473, 3476, 3479, 3482, 3485, 3488, 3491, 3494, 3497, 3500, 3503, 3506, 3509, 3512, 3515, 3518, 3521, 3524, 3527, 3530, 3533, 3536, 3539, 3542, 3545, 3548, 3551, 3554, 3557, 3560, 3563, 3566, 3569, 3572, 3575, 3578, 3581, 3584, 3587, 3590, 3593, 3596, 3599, 3602, 3605, 3608, 3611, 3614, 3617, 3620, 3623, 3626, 3629, 3632, 3635, 3638, 3641, 3644, 3647, 3650, 3653, 3656, 3659, 3662, 3665, 3668, 3671, 3674, 3677, 3680, 3683, 3686, 3689, 3692, 3695, 3698, 3701, 3704, 3707, 3710, 3713, 3716, 3719, 3722, 3725, 3728, 3731, 3734, 3737, 3740, 3743, 3746, 3749, 3752, 3755, 3758, 3761, 3764, 3767, 3770, 3773, 3776, 3779, 3782, 3785, 3788, 3791, 3794, 3797, 3800, 3803, 3806, 3809, 3812, 3815, 3818, 3821, 3824, 3827, 3830, 3833, 3836, 3839, 3842, 3845, 3848, 3851, 3854, 3857, 3860, 3863, 3866, 3869, 3872, 3875, 3878, 3881, 3884, 3887, 3890, 3893, 3896, 3899, 3902, 3905, 3908, 3911, 3914, 3917, 3920, 3923, 3926, 3929, 3932, 3935, 3938, 3941, 3944, 3947, 3950, 3953, 3956, 3959, 3962, 3965, 3968, 3971, 3974, 3977, 3980, 3983, 3986, 3989, 3992, 3995, 3998, 4001, 4004, 4007, 4010, 4013, 4016, 4019, 4022, 4025, 4028, 4031, 4034, 4037, 4040, 4043, 4046, 4049, 4052, 4055, 4058, 4061, 4064, 4067, 4070, 4073, 4076, 4079, 4082, 4085, 4088, 4091, 4094, 4097, 4100, 4103, 4106, 4109, 4112, 4115, 4118, 4121, 4124, 4127, 4130, 4133, 4136, 4139, 4142, 4145, 4148, 4151, 4154, 4157, 4160, 4163, 4166, 4169, 4172, 4175, 4178, 4181, 4184, 4187, 4190, 4193, 4196, 4199, 4202, 4205, 4208, 4211, 4214, 4217, 4220, 4223, 4226, 4229, 4232, 4235, 4238, 4241, 4244, 4247, 4250, 4253, 4256, 4259, 4262, 4265, 4268, 4271, 4274, 4277, 4280, 4283, 4286, 4289, 4292, 4295, 4298, 4301, 4304, 4307, 4310, 4313, 4316, 4319, 4322, 4325, 4328, 4331, 4334, 4337, 4340, 4343, 4346, 4349, 4352, 4355, 4358, 4361, 4364, 4367, 4370, 4373, 4376, 4379, 4382, 4385, 4388, 4391, 4394, 4397, 4400, 4403, 4406, 4409, 4412, 4415, 4418, 4421, 4424, 4427, 4430, 4433, 4436, 4439, 4442, 4445, 4448, 4451, 4454, 4457, 4460, 4463, 4466, 4469, 4472, 4475, 4478, 4481, 4484, 4487, 4490, 4493, 4496, 4499, 4502, 4505, 4508, 4511, 4514, 4517, 4520, 4523, 4526, 4529, 4532, 4535, 4538, 4541, 4544, 4547, 4550, 4553, 4556, 4559, 4562, 4565, 4568, 4571, 4574, 4577, 4580, 4583, 4586, 4589, 4592, 4595, 4598, 4601, 4604, 4607, 4610, 4613, 4616, 4619, 4622, 4625, 4628, 4631, 4634, 4637, 4640, 4643, 4646, 4649, 4652, 4655, 4658, 4661, 4664, 4667, 4670, 4673, 4676, 4679, 4682, 4685, 4688, 4691, 4694, 4697, 4700, 4703, 4706, 4709, 4712, 4715, 4718, 4721, 4724, 4727, 4730, 4733, 4736, 4739, 4742, 4745, 4748, 4751, 4754, 4757, 4760, 4763, 4766, 4769, 4772, 4775, 4778, 4781, 4784, 4787, 4790, 4793, 4796, 4799, 4802, 4805, 4808, 4811, 4814, 4817, 4820, 4823, 4826, 4829, 4832, 4835, 4838], 962856) == True\nassert sat([0], 2827347) == False\nassert sat([0], 2362263) == False\nassert sat([0], 123) == False\nassert sat([0], 962856) == False\nassert sat([0], 1703235) == False\nassert sat([0], 962856) == False\nassert sat([0], 1703235) == False\nassert sat([0], 123) == False\nassert sat([0], 2827347) == False\nassert sat([0], 962856) == False", "entry_fn_name": "sat"}
{"id": "314", "text": "Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\nso that the remaining list of numbers satisfies:\n* its largest number is next to its second largest number\n* its third largest number is next to its fourth largest number\n...\n* its second smallest number is next to its smallest number\nSample input:\n[4, 0, 5, 3, 1, 2]\nn = 2\nSample output:\n[True, False, True, False, True, True]\nKeeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.", "solution": "def sat(keep: List[bool], heights):\n    n = int(len(heights) ** 0.5)\n    if not sorted(heights) == list(range(n * n + n)):\n        return False\n    kept = [i for (i, k) in zip(heights, keep) if k]\n    if not len(kept) == 2 * n:\n        return False\n    pi = sorted(range(2 * n), key=lambda i: kept[i])\n    return all((abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n)))", "title": "TP3/PickNearNeighbors", "testing_code": "assert sat([True, False, True, False, False, True, True, False, False, True, False, True, True, False, True, False, False, False, False, False], [10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]) == True\nassert sat([False, False, True, False, True, False, True, True, True, True, False, False, False, False, True, False, False, True, False, False, True, False, True, False, False, False, False, False, False, False], [6, 12, 26, 4, 25, 20, 15, 14, 18, 22, 19, 23, 27, 13, 9, 28, 17, 11, 29, 7, 1, 10, 2, 0, 21, 3, 5, 8, 16, 24]) == True\nassert sat([True, False, False, True, False, True, True, True, False, True, False, False], [6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]) == True\nassert sat([False, False, False, True, False, False, True, False, False, False, True, False, False, False, True, False, True, True, False, False, False, True, False, False, True, False, False, True, False, True, False, False, False, True, False, True, False, True, True, False, False, False, True, True, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]) == True\nassert sat([True, False, False, True, False, True, False, False, False, True, False, False, False, True, True, True, True, True, False, False, True, False, True, False, False, True, False, False, True, False, False, True, False, False, False, False, True, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], [26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]) == True\nassert sat('[False, False, False, True, False, False, True, False, False, False, True, False, False, False, True, False, True, True, False, False, False, True, False, False, True, False, False, True, False, True, False, False, False, True, False, True, False, True, True, False, False, False, True, True, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]', '[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]') == False\nassert sat('[False, False, False, True, False, False, True, False, False, False, True, False, False, False, True, False, True, True, False, False, False, True, False, False, True, False, False, True, False, True, False, False, False, True, False, True, False, True, True, False, False, False, True, True, False, False, False, False, True, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]', '[6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]') == False\nassert sat('[True, False, False, True, False, True, True, True, False, True, False, False]', '[26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]') == False\nassert sat('[True, False, True, False, False, True, True, False, False, True, False, True, True, False, True, False, False, False, False, False]', '[46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]') == False\nassert sat('[True, False, False, True, False, True, True, True, False, True, False, False]', '[46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]') == False\nassert sat('[True, False, False, True, False, True, True, True, False, True, False, False]', '[6, 12, 26, 4, 25, 20, 15, 14, 18, 22, 19, 23, 27, 13, 9, 28, 17, 11, 29, 7, 1, 10, 2, 0, 21, 3, 5, 8, 16, 24]') == False\nassert sat('[True, False, False, True, False, True, False, False, False, True, False, False, False, True, True, True, True, True, False, False, True, False, True, False, False, True, False, False, True, False, False, True, False, False, False, False, True, False, False, True, False, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]', '[6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]') == False\nassert sat('[True, False, True, False, False, True, True, False, False, True, False, True, True, False, True, False, False, False, False, False]', '[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]') == False\nassert sat('[True, False, False, True, False, True, True, True, False, True, False, False]', '[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]') == False\nassert sat('[True, False, True, False, False, True, True, False, False, True, False, True, True, False, True, False, False, False, False, False]', '[26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]') == False", "entry_fn_name": "sat"}
{"id": "315", "text": "Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\nwhere indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\nthat are multiples of 3 (as proven in the IMO problem).\nSample input:\n6\nSample output:\n[_, _, _, _, _, _]\n(Sample output hidden because showing sample output would give away too much information.)", "solution": "def sat(li: List[int], n):\n    if not n % 3 == 0:\n        return False\n    return len(li) == n and all((li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n)))", "title": "TP3/FindProductiveList", "testing_code": "assert sat([-1, -1, 2, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, -1, 2, -1, -1, 2], 18) == True\nassert sat([-1, -1, 2], 3) == True\nassert sat([-1, -1, 2, -1, -1, 2], 6) == True\nassert sat([-1, -1, 2, -1, -1, 2, -1, -1, 2], 9) == True\nassert sat([-1, -1, 2, -1, -1, 2, -1, -1, 2, -1, -1, 2], 12) == True\nassert sat([], 18) == False", "entry_fn_name": "sat"}
{"id": "316", "text": "The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\nThe goal is to find a subset (list) li of half the indices such that:\n* The sum of the indices equals the sum of the sum of the missing indices.\n* The tags of the chosen indices contains exactly each number in range(n) twice.\nSample input:\nn = 3\ntags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\nSample output:\n[0, 3, 5, 6, 8, 11]\nNote the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]", "solution": "def sat(li: List[int], tags):\n    n = max(tags) + 1\n    if not sorted(tags) == sorted(list(range(n)) * 4):\n        return False\n    if not (len(li) == len(set(li)) and min(li) >= 0):\n        return False\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]", "title": "TP3/HalfTag", "testing_code": "assert sat([8, 7, 2, 13, 12, 3, 14, 1], [3, 0, 3, 2, 0, 1, 0, 3, 1, 1, 2, 2, 0, 2, 1, 3]) == True\nassert sat([11, 4, 8, 7, 3, 12, 14, 1], [2, 3, 1, 0, 3, 3, 0, 2, 1, 3, 1, 0, 1, 2, 2, 0]) == True\nassert sat([2, 25, 22, 5, 1, 26, 14, 13, 20, 7, 21, 6, 24, 3], [4, 1, 6, 5, 6, 4, 2, 1, 6, 2, 3, 1, 4, 6, 5, 2, 3, 5, 0, 5, 0, 3, 0, 0, 4, 2, 3, 1]) == True\nassert sat([11, 0, 6, 5, 8, 3], [0, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2]) == True\nassert sat([0, 31, 27, 4, 16, 15, 17, 14, 19, 12, 1, 30, 2, 29, 21, 10], [1, 2, 6, 0, 6, 2, 4, 7, 4, 0, 0, 5, 0, 3, 2, 1, 7, 5, 5, 3, 1, 7, 2, 7, 6, 6, 3, 3, 1, 4, 4, 5]) == True\nassert sat([11, 0, 6, 5, 8, 3], [0]) == False\nassert sat([0], [0, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2]) == False\nassert sat([11, 0, 6, 5, 8, 3], [0]) == False\nassert sat([8, 7, 2, 13, 12, 3, 14, 1], [0]) == False\nassert sat([8, 7, 2, 13, 12, 3, 14, 1], [0]) == False\nassert sat([11, 4, 8, 7, 3, 12, 14, 1], [0]) == False\nassert sat([11, 4, 8, 7, 3, 12, 14, 1], [0]) == False\nassert sat([11, 4, 8, 7, 3, 12, 14, 1], [0]) == False\nassert sat([11, 0, 6, 5, 8, 3], [0]) == False\nassert sat([11, 0, 6, 5, 8, 3], [0]) == False", "entry_fn_name": "sat"}
{"id": "317", "text": "Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n$\\\\sum_{i \\in S} x_i = 1 (mod 2)$", "solution": "def sat(inds: List[int], vecs):\n    return all((sum((v >> i & 1 for i in inds)) % 2 == 1 for v in vecs))", "title": "TP3/LearnParity", "testing_code": "assert sat([0, 2, 5, 6, 7, 8], [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) == True\nassert sat([0, 1, 3, 5, 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 35, 39, 40, 42, 43, 46, 47, 49, 51, 55, 58, 60, 61], [1958328232218124020, 1643963198527225549, 7078739564566717736, 5024292785179305436, 7542959674027422755, 7659875763009862123, 1092205956673651924, 1597643013927748621, 8004819259007286467, 4932826233956818838, 6008121031475439847, 8573976126290476773, 5118247667071056636, 2694646426329419247, 7155733006249399377, 5712876295003741481, 4259768476395554763, 1716249993608899326, 4687736672428229301, 6210681778471018663, 9062452952374764930, 3938723877971063326, 1992502139321214948, 583369363030182394, 3457048586868388189, 3089092548449370843, 8968870310908511767, 5874530422138404750, 7922800580005142654, 6443496666193763033, 6602916053749454337, 5035040733581952127, 2475911752718112891, 4473209659299430662, 7743622118433343293, 8456447367870793728, 644758190253851892, 854623538268336285, 4412207913445082380, 1836729508450597237, 8168398572945385599, 8115567202327609458, 6194127909595936682, 5497664877254277127, 3302554889776464399, 169133116278786893, 6157732824159736422, 6607461935760996261, 2653530464165680377, 6097504979385382936, 7193369373130246620, 5417605562101462110, 6648984412934108645, 8700023834459359946, 1861165113396388865, 2257883046437023829, 9079372065509233820, 68562947383617624, 3628292069813906054, 5937308782381616795, 7333187108059679183, 3810197266775096468, 6798325309591425591, 4704339148457093019, 7860858474470684593, 1611780128804878195, 8654679384628229346, 8183430433492711995, 6645671523533669548, 8558081500613788587, 7159783655071677682, 812798558819423092]) == True\nassert sat([0, 2], [22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]) == True\nassert sat([0, 1, 4], [5, 6, 9, 55, 6, 31, 6, 16, 24, 41, 48, 28, 52, 23, 27]) == True\nassert sat([2, 4, 5, 7, 13, 15, 16, 17, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 39, 40], [8516734225993, 8185100182945, 925681191808, 6852758827443, 1647526447482, 7173415494645, 7272627207575, 490684374058, 309453951198, 5010777449329, 3573909388048, 5418552144685, 2354966949738, 3516400490509, 1958065498191, 4517527902759, 8040889847030, 5932888153522, 1902421695527, 1024437640956, 929625005771, 7393117046567, 5563161916036, 217261697321, 6156537114007, 2387336255324, 2725651274113, 8047481621773, 6241870535779, 6997209576680, 7206687196929, 7040183664174, 5422186929747, 8413033840571, 8315880876934, 3242378478727, 7554967308490, 3436019794305, 2038166434726, 276174723638, 4876351900994, 2206273239244, 6687501613941, 6284647259481, 4489528628587, 2300167942640, 1193551771601, 5445384214694, 4685093545143, 1178537925748, 8564249470306, 6913390362890]) == True\nassert sat([], [169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]) == False", "entry_fn_name": "sat"}
{"id": "318", "text": "Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$", "solution": "def sat(inds: List[int], vecs):\n    return sum((sum((v >> i & 1 for i in inds)) % 2 for v in vecs)) >= len(vecs) * 3 / 4", "title": "TP3/LearnParityWithNoise", "testing_code": "assert sat([2, 4, 5], [26, 5, 32, 3, 15, 18, 31, 13, 24, 25, 34, 5, 15, 24, 16, 13, 0, 27, 37]) == True\nassert sat([2, 4, 6, 9], [576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]) == True\nassert sat([1, 6, 8], [378, 819, 695, 649, 492, 277, 471, 241, 159, 733, 625, 355, 300, 241, 683, 445, 769, 167, 985, 346, 243, 546, 851, 476, 309]) == True\nassert sat([2], [5, 7, 4, 5, 4, 3, 6, 5, 5, 0, 7]) == True\nassert sat([], [26, 5, 32, 3, 15, 18, 31, 13, 24, 25, 34, 5, 15, 24, 16, 13, 0, 27, 37]) == False", "entry_fn_name": "sat"}
{"id": "319", "text": "Find a large common divisor of two integers.", "solution": "def sat(n: int, a, b, lower_bound):\n    return a % n == 0 and b % n == 0 and (n >= lower_bound)", "title": "TP3/GCD", "testing_code": "assert sat(7741, 15482, 23223, 5) == True\nassert sat(9, 9, 9, 6) == True\nassert sat(46522, 232610, 3131721474, 15000) == True\nassert sat(1943286504, 247586288427023352, 372021520735824432, 1709054537) == True\nassert sat(8797233, 8797233, 2370036150831, 8364173) == True\nassert sat(9, 9, 5, 5) == False\nassert sat(9, 5, 9, 6) == False\nassert sat(9, 9, 5, 5) == False\nassert sat(9, 5, 9, 6) == False\nassert sat(9, 5, 9, 5) == False\nassert sat(5, 9, 9, 6) == False\nassert sat(5, 9, 9, 6) == False\nassert sat(9, 5, 9, 5) == False\nassert sat(9, 9, 5, 5) == False\nassert sat(5, 9, 9, 6) == False", "entry_fn_name": "sat"}
{"id": "320", "text": "Find a large common divisor of the list of integers.", "solution": "def sat(n: int, nums, lower_bound):\n    return all((i % n == 0 for i in nums)) and n >= lower_bound", "title": "TP3/GCD_multi", "testing_code": "assert sat(7741, [77410, 23223, 54187], 2) == True\nassert sat(1, [14, 551755893, 902110495], 1) == True\nassert sat(295717, [287260676668, 33263981357337, 47314720, 295717, 2957170], 98647) == True\nassert sat(2002, [452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], 977) == True\nassert sat(128861795, [8154539588421190, 128861795], 64216730) == True\nassert sat(1, [0], 2) == False\nassert sat(1, [0], 977) == False\nassert sat(1, [0], 98647) == False\nassert sat(2002, [0], 98647) == False\nassert sat(1, [0], 2) == False\nassert sat(1, [0], 2) == False\nassert sat(1, [0], 977) == False\nassert sat(1, [0], 64216730) == False\nassert sat(1, [0], 977) == False\nassert sat(2002, [0], 98647) == False", "entry_fn_name": "sat"}
{"id": "321", "text": "Find a small common multiple of two integers.", "solution": "def sat(n: int, a, b, upper_bound):\n    return n % a == 0 and n % b == 0 and (0 < n <= upper_bound)", "title": "TP3/LCM", "testing_code": "assert sat(135, 15, 27, 150) == True\nassert sat(41234205765, 41234205765, 597597185, 73349253728) == True\nassert sat(290531273127704776, 7601351956456, 2974663988, 389421039754872576) == True\nassert sat(605151125501670, 201717041833890, 3585167190, 731493653565433) == True\nassert sat(274456086720, 79680, 661339968, 410128528659) == True\nassert sat(5, 15, 27, 150) == False\nassert sat(5, 15, 27, 150) == False\nassert sat(5, 15, 27, 150) == False\nassert sat(5, 15, 27, 150) == False\nassert sat(135, 79680, 27, 5) == False\nassert sat(135, 79680, 27, 5) == False\nassert sat(135, 79680, 27, 5) == False\nassert sat(5, 79680, 27, 150) == False\nassert sat(5, 79680, 27, 150) == False\nassert sat(5, 79680, 27, 150) == False", "entry_fn_name": "sat"}
{"id": "322", "text": "Find a small common multiple of a list of integers.", "solution": "def sat(n: int, nums, upper_bound):\n    return all((n % i == 0 for i in nums)) and 0 < n <= upper_bound", "title": "TP3/LCM_multi", "testing_code": "assert sat(4590, [15, 27, 102], 5000) == True\nassert sat(50042020463197425387002406480, [46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], 82396663973139497934429093888) == True\nassert sat(139967040458688, [55040126016, 4373970014334], 219074883886936) == True\nassert sat(121155327663293093558667262542122448691120854355200, [9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], 238661269929569213628364588516267312050595558326272) == True\nassert sat(11561590056582912, [173261568, 4270662976], 17025943527197098) == True\nassert sat(5, [15, 27, 102], 5000) == False\nassert sat(4590, [15, 27, 102], 5) == False\nassert sat(5, [173261568, 4270662976], 5000) == False\nassert sat(5, [15, 27, 102], 5000) == False\nassert sat(4590, [173261568, 4270662976], 5) == False\nassert sat(4590, [173261568, 4270662976], 5) == False\nassert sat(5, [173261568, 4270662976], 5000) == False\nassert sat(4590, [15, 27, 102], 5) == False\nassert sat(4590, [15, 27, 102], 5) == False\nassert sat(5, [15, 27, 102], 5000) == False", "entry_fn_name": "sat"}
{"id": "323", "text": "Solve for n: b^n = target (mod n)", "solution": "def sat(n: int, b, target):\n    return b ** n % n == target", "title": "TP3/SmallExponentBigSolution", "testing_code": "assert sat(19147, 2, 5) == True\nassert sat(67, 69, 2) == True\nassert sat(5, 2, 5) == False\nassert sat(67, 2, 3) == False\nassert sat(5, 2, 5) == False\nassert sat(67, 2, 3) == False\nassert sat(5, 2, 5) == False\nassert sat(5, 2, 5) == False\nassert sat(5, 69, 2) == False\nassert sat(5, 69, 2) == False\nassert sat(5, 2, 5) == False\nassert sat(5, 69, 2) == False", "entry_fn_name": "sat"}
{"id": "324", "text": "Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.", "solution": "def sat(nums: List[int], target):\n    if not target % 9 not in [4, 5]:\n        return False\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target", "title": "TP3/ThreeCubes", "testing_code": "assert sat([18, 4, -17], 983) == True\nassert sat([], 983) == False", "entry_fn_name": "sat"}
{"id": "325", "text": "Find four integers whose squares sum to n", "solution": "def sat(nums: List[int], n):\n    return len(nums) <= 4 and sum((i ** 2 for i in nums)) == n", "title": "TP3/FourSquares", "testing_code": "assert sat([80, 77, 4, 0], 12345) == True\nassert sat([1, 0, 0, 0], 1) == True\nassert sat([0, 0, 0, 0], 0) == True\nassert sat('[80, 77, 4, 0]', '1') == False\nassert sat('[0, 0, 0, 0]', '12345') == False\nassert sat('[0, 0, 0, 0]', '1') == False\nassert sat([], 12345) == False\nassert sat('[1, 0, 0, 0]', '12345') == False\nassert sat('[1, 0, 0, 0]', '0') == False\nassert sat('[80, 77, 4, 0]', '0') == False\nassert sat('[1, 0, 0, 0]', '1') == False\nassert sat('[0, 0, 0, 0]', '0') == False\nassert sat('[80, 77, 4, 0]', '12345') == False", "entry_fn_name": "sat"}
{"id": "326", "text": "Find a non-trivial factor of integer n", "solution": "def sat(i: int, n):\n    return 1 < i < n and n % i == 0", "title": "TP3/Factoring", "testing_code": "assert sat(14543, 241864633) == True\nassert sat(2, 16) == True\nassert sat(3, 3363) == True\nassert sat(2, 5) == False\nassert sat(3, 5) == False\nassert sat(5, 3363) == False\nassert sat(5, 3363) == False\nassert sat(5, 16) == False\nassert sat(5, 16) == False\nassert sat(2, 5) == False\nassert sat(5, 3363) == False\nassert sat(5, 16) == False\nassert sat(5, 16) == False", "entry_fn_name": "sat"}
{"id": "327", "text": "Find n such that g^n is congruent to t mod n", "solution": "def sat(n: int, g, p, t):\n    return pow(g, n, p) == t", "title": "TP3/DiscreteLog", "testing_code": "assert sat(66957, 44337, 69337, 38187) == True\nassert sat(0, 13, 21, 1) == True\nassert sat(5, 13, 21, 1) == False\nassert sat(5, 44337, 21, 1) == False\nassert sat(5, 13, 21, 1) == False\nassert sat(5, 13, 21, 1) == False\nassert sat(0, 13, 21, 5) == False\nassert sat(5, 44337, 21, 1) == False\nassert sat(66957, 5, 21, 1) == False\nassert sat(66957, 13, 5, 1) == False\nassert sat(0, 13, 21, 5) == False\nassert sat(0, 13, 21, 5) == False", "entry_fn_name": "sat"}
{"id": "328", "text": "Find k positive integers such that each integer divides (the product of the rest plus 1).", "solution": "def sat(li: List[int], k):\n\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n    return min(li) > 1 and len(li) == k and all(((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k)))", "title": "TP3/Znam", "testing_code": "assert sat([2, 3, 7, 43, 1807], 5) == True\nassert sat([2, 3, 7, 43, 1807, 3263443], 6) == True\nassert sat([2, 3, 7, 43, 1807, 3263443, 10650056950807], 7) == True\nassert sat([2, 3, 7, 43, 1807, 3263443, 10650056950807, 113423713055421844361000443], 8) == True\nassert sat([0], 8) == False\nassert sat([0], 8) == False\nassert sat([0], 8) == False\nassert sat([0], 7) == False\nassert sat([0], 8) == False\nassert sat([0], 7) == False\nassert sat([0], 7) == False\nassert sat([0], 7) == False\nassert sat([0], 5) == False\nassert sat([0], 5) == False", "entry_fn_name": "sat"}
{"id": "329", "text": "Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.", "solution": "def sat(n: int, t, upper):\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper", "title": "TP3/CollatzDelay", "testing_code": "assert sat(57048, 197, 20) == True\nassert sat(5, 197, 20) == False\nassert sat(57048, 5, 20) == False\nassert sat(57048, 197, 5) == False\nassert sat(5, 197, 20) == False\nassert sat(57048, 5, 20) == False\nassert sat(5, 197, 20) == False\nassert sat(5, 197, 20) == False\nassert sat(57048, 5, 20) == False\nassert sat(57048, 197, 5) == False\nassert sat(57048, 197, 5) == False", "entry_fn_name": "sat"}
{"id": "330", "text": "Find n  such that 2^n mod n = 3", "solution": "def sat(n: int):\n    return pow(2, n, n) == 3", "title": "TP3/Lehmer", "testing_code": "assert sat(4700063497) == True\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False", "entry_fn_name": "sat"}
{"id": "331", "text": "Find n such that the probability of two people having the same birthday in a group of n is near 1/2.", "solution": "def sat(n: int, year_len):\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1 / year_len", "title": "TP3/BirthdayParadox", "testing_code": "assert sat(23, 365) == True\nassert sat(289, 60182) == True\nassert sat(2, 2) == True\nassert sat(2, 3) == True\nassert sat(5, 365) == False\nassert sat(23, 5) == False\nassert sat(5, 60182) == False\nassert sat(5, 365) == False\nassert sat(5, 60182) == False\nassert sat(23, 5) == False\nassert sat(289, 5) == False\nassert sat(23, 5) == False\nassert sat(23, 5) == False\nassert sat(5, 365) == False", "entry_fn_name": "sat"}
{"id": "332", "text": "Find n such that the probability of two people having the same birthday in a group of n is near 1/2.", "solution": "def sat(n: int, year_len):\n    import random\n    random.seed(0)\n    K = 1000\n    prob = sum((len({random.randrange(year_len) for i in range(n)}) < n for j in range(K))) / K\n    return (prob - 0.5) ** 2 <= year_len", "title": "TP3/BirthdayParadoxMonteCarlo", "testing_code": "assert sat(23, 365) == True\nassert sat(289, 60182) == True\nassert sat(2, 2) == True\nassert sat(2, 3) == True", "entry_fn_name": "sat"}
{"id": "333", "text": "Suppose a list of m 1's and n -1's are permuted at random.\nWhat is the probability that all of the cumulative sums are positive?\nThe goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.", "solution": "def sat(counts: List[int], target_prob):\n    (m, n) = counts\n    probs = [1.0] + [0.0] * n\n    for i in range(2, m + 1):\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = j / (i + j) * probs[j - 1] + i / (i + j) * old_probs[j]\n    return abs(probs[n] - target_prob) < 1e-06", "title": "TP3/BallotProblem", "testing_code": "assert sat([3, 1], 0.5) == True\nassert sat([79, 55], 0.1791044776119403) == True\nassert sat([33, 31], 0.03125) == True\nassert sat([177, 47], 0.5803571428571429) == True\nassert sat([6, 1], 0.7142857142857143) == True\nassert sat([6, 1], 8.6) == False\nassert sat([3, 1], 8.6) == False\nassert sat([6, 1], 8.6) == False\nassert sat([3, 1], 8.6) == False\nassert sat([3, 1], 8.6) == False\nassert sat([3, 1], 8.6) == False\nassert sat([6, 1], 8.6) == False\nassert sat([3, 1], 8.6) == False\nassert sat([33, 31], 8.6) == False\nassert sat([6, 1], 8.6) == False", "entry_fn_name": "sat"}
{"id": "334", "text": "Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.", "solution": "def sat(counts: List[int], p, target_prob):\n    from itertools import product\n    (a, b) = counts\n    n = a + b\n    prob = p ** a * (1 - p) ** b\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-06", "title": "TP3/BinomialProbabilities", "testing_code": "assert sat([0, 4], 0.5, 0.0625) == True\nassert sat([2, 1], 0.7588822808660473, 0.41658075878732215) == True\nassert sat([1, 5], 0.6569421516251613, 0.01872902529162693) == True\nassert sat([0, 9], 0.20001220211746595, 0.13419930454361995) == True\nassert sat([3, 0], 0.004837079863490135, 3.5517791266002235e-13) == True\nassert sat([2, 1], 0.5, 0.5) == False\nassert sat([2, 1], 0.5, 0.5) == False\nassert sat([3, 0], 0.5, 0.5) == False\nassert sat([0, 4], 0.5, 0.5) == False\nassert sat([1, 5], 0.5, 0.5) == False\nassert sat([3, 0], 0.5, 0.5) == False\nassert sat([0, 4], 0.5, 0.5) == False\nassert sat([0, 4], 0.5, 0.5) == False\nassert sat([3, 0], 0.5, 0.5) == False\nassert sat([2, 1], 0.5, 0.5) == False", "entry_fn_name": "sat"}
{"id": "335", "text": "Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\nstop each step with probability p_stop", "solution": "def sat(p_stop: float, steps, target_prob):\n    prob = sum((p_stop * (1 - p_stop) ** t for t in range(steps)))\n    return abs(prob - target_prob) < 1e-06", "title": "TP3/ExponentialProbability", "testing_code": "assert sat(0.06696700846319259, 10, 0.5) == True\nassert sat(0.007170827562457016, 43, 0.2661542669448821) == True\nassert sat(0.0004175448896293066, 91, 0.03729141037377781) == True\nassert sat(0.2830613812952695, 11, 0.9742781783529525) == True\nassert sat(0.02705694161561767, 65, 0.8318555442956944) == True\nassert sat(0.5, 43, 0.5) == False\nassert sat(0.5, 65, 0.5) == False\nassert sat(0.5, 91, 0.5) == False\nassert sat(0.5, 91, 0.5) == False\nassert sat(0.5, 91, 0.5) == False\nassert sat(0.5, 11, 0.5) == False\nassert sat(0.5, 11, 0.5) == False\nassert sat(0.5, 11, 0.5) == False\nassert sat(0.5, 65, 0.5) == False\nassert sat(0.5, 10, 0.5) == False", "entry_fn_name": "sat"}
{"id": "336", "text": "Find a string that when reversed and concatenated onto 'world' gives 'Hello world'.", "solution": "def sat(s: str):\n    return s[::-1] + 'world' == 'Hello world'", "title": "TP3/BackWorlds", "testing_code": "assert sat(' olleH') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "337", "text": "Solve simple string addition problem.", "solution": "def sat(st: str, a, b):\n    return st + a == b", "title": "TP3/StrAdd", "testing_code": "assert sat('Hello ', 'world', 'Hello world') == True\nassert sat('cerofilimyba', 'zine', 'cerofilimybazine') == True\nassert sat('xak', 'id', 'xakid') == True\nassert sat('', 'dyr', 'dyr') == True\nassert sat('to', 's', 'tos') == True\nassert sat('Hello ', 'world', '') == False\nassert sat('Hello ', '', 'Hello world') == False\nassert sat('', 'world', 'Hello world') == False", "entry_fn_name": "sat"}
{"id": "338", "text": "Find a string with dups duplicate chars", "solution": "def sat(s: str, dups):\n    return len(set(s)) == len(s) - dups", "title": "TP3/StrSetLen", "testing_code": "assert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 2021) == True\nassert sat('a', 0) == True\nassert sat('aa', 1) == True\nassert sat('aaa', 2) == True\nassert sat('', 2021) == False", "entry_fn_name": "sat"}
{"id": "339", "text": "Find a string which when repeated n times gives target", "solution": "def sat(s: str, target, n):\n    return s * n == target", "title": "TP3/StrMul", "testing_code": "assert sat('foofoo', 'foofoofoofoo', 2) == True\nassert sat('biquacagegichisyk', 'biquacagegichisykbiquacagegichisykbiquacagegichisyk', 3) == True\nassert sat('hutextogoxanithiru', 'hutextogoxanithiru', 1) == True\nassert sat('sisi', 'sisisisisisisisisisisisisisi', 7) == True\nassert sat('fuchomurybaxe', 'fuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxe', 7) == True\nassert sat('foofoo', '', 2) == False\nassert sat('', 'foofoofoofoo', 2) == False", "entry_fn_name": "sat"}
{"id": "340", "text": "Find n such that s repeated n times gives target", "solution": "def sat(n: int, target, s):\n    return s * n == target", "title": "TP3/StrMul2", "testing_code": "assert sat(2, 'foofoofoofoo', 'foofoo') == True\nassert sat(0, '', 'jan') == True\nassert sat(7, 'koquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyc', 'koquuwibehyc') == True\nassert sat(8, 'kasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyz', 'kasujyzkasujyz') == True\nassert sat(8, 'kedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuth', 'kedezygijithequuthkedezygijithequuth') == True\nassert sat(2, 'foofoofoofoo', '') == False\nassert sat(2, '', 'foofoo') == False", "entry_fn_name": "sat"}
{"id": "341", "text": "Find a string of length n", "solution": "def sat(s: str, n):\n    return len(s) == n", "title": "TP3/StrLen", "testing_code": "assert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 1000) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 39) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 790) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 485) == True\nassert sat('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 4031) == True\nassert sat('', 1000) == False", "entry_fn_name": "sat"}
{"id": "342", "text": "Find the index of target in string s", "solution": "def sat(i: int, s, target):\n    return s[i] == target", "title": "TP3/StrAt", "testing_code": "assert sat(1, 'cat', 'a') == True\nassert sat(2, 'quadyquady', 'a') == True\nassert sat(2, 'quixatextofazejate', 'i') == True\nassert sat(2, 'thethe', 'e') == True\nassert sat(0, 'bucudibucudibucudi', 'b') == True\nassert sat(1, 'cat', '') == False", "entry_fn_name": "sat"}
{"id": "343", "text": "Find the index of target in s using a negative index.", "solution": "def sat(i: int, s, target):\n    return s[i] == target and i < 0", "title": "TP3/StrNegAt", "testing_code": "assert sat(-2, 'cat', 'a') == True\nassert sat(-2, 'ch', 'c') == True\nassert sat(-17, 'nydivimocuvacetext', 'y') == True\nassert sat(-5, 'chyxchyx', 'x') == True\nassert sat(-57, 'tuchuworyquofojyzusutuchuworyquofojyzusutuchuworyquofojyzusu', 'h') == True\nassert sat(-2, 'cat', '') == False", "entry_fn_name": "sat"}
{"id": "344", "text": "Find the three slice indices that give the specific target in string s", "solution": "def sat(inds: List[int], s, target):\n    (i, j, k) = inds\n    return s[i:j:k] == target", "title": "TP3/StrSlice", "testing_code": "assert sat([-1, -12, -6], 'hello world', 'do') == True\nassert sat([-23, -23, -23], 'ninykofiwimninykofiwim', '') == True\nassert sat([-12, -21, -21], 'limerybinylimerybiny', 'n') == True\nassert sat([-39, -39, -39], 'fyzihurothevirechahfyzihurothevirechah', '') == True\nassert sat([-13, -13, -13], 'kibozekiboze', '') == True\nassert sat([-1, -12, -6], 'hello world', '') == False\nassert sat([-1, -12, -6], '', 'do') == False", "entry_fn_name": "sat"}
{"id": "345", "text": "Find a string whose *first* index in big_str is index", "solution": "def sat(s: str, big_str, index):\n    return big_str.index(s) == index", "title": "TP3/StrIndex", "testing_code": "assert sat('obar', 'foobar', 2) == True\nassert sat('xtuj', 'fukulagatextuj', 10) == True\nassert sat('nopyrewithocukopojot', 'nunalurejijunopyrewithocukopojot', 12) == True\nassert sat('u', 'fu', 1) == True\nassert sat('jon', 'fatextemedyrotichipicecojon', 24) == True\nassert sat('', 'foobar', 2) == False", "entry_fn_name": "sat"}
{"id": "346", "text": "Find a string whose *first* index of sub_str is index", "solution": "def sat(big_str: str, sub_str, index):\n    return big_str.index(sub_str) == index", "title": "TP3/StrIndex2", "testing_code": "assert sat('AAfoobar', 'foobar', 2) == True\nassert sat('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAquadox', 'quadox', 75) == True\nassert satvotextymuvethic', 'votextymuvethic', 880) == True\nassert sat('pyrumymasekalihochyvibisamaquythifedetextityvath', 'pyrumymasekalihochyvibisamaquythifedetextityvath', 0) == True\nassert sat('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnofufaxunetextesitocedezyxuxexyfoquichitiracyquat', 'nofufaxunetextesitocedezyxuxexyfoquichitiracyquat', 185) == True\nassert sat('AAfoobar', '', 2) == False", "entry_fn_name": "sat"}
{"id": "347", "text": "Find a string of length length that is in both strings a and b", "solution": "def sat(s: str, a, b, length):\n    return len(s) == length and s in a and (s in b)", "title": "TP3/StrIn", "testing_code": "assert sat('ello', 'hello', 'yellow', 4) == True\nassert sat('wejegutheme', 'vuzogaguzechicowejeguthemeralic', 'kybyjifidoquifwejeguthemelihitextodeju', 11) == True\nassert sat('xyfurexatextoxivuquu', 'kehorithxyfurexatextoxivuquunusethawatextebu', 'pxyfurexatextoxivuquuwynicixo', 20) == True\nassert sat('vicharyquyni', 'bafywihequyjicivicharyquynikixuhinyqu', 'syrapetagecvicharyquynirorazecheth', 12) == True\nassert sat('vyhuquuthexitacavoby', 'diquatextaxubowafucevyhuquuthexitacavobychajexytextug', 'thachevolatvyhuquuthexitacavobyjokobuchudymal', 20) == True\nassert sat('ello', 'hello', '', 4) == False\nassert sat('ello', '', 'yellow', 4) == False\nassert sat('', 'hello', 'yellow', 4) == False", "entry_fn_name": "sat"}
{"id": "348", "text": "Find a list of >= count distinct strings that are all contained in s", "solution": "def sat(substrings: List[str], s, count):\n    return len(substrings) == len(set(substrings)) >= count and all((sub in s for sub in substrings))", "title": "TP3/StrIn2", "testing_code": "assert sat(['', 'e', 'el', 'ell', 'ello', 'h', 'he', 'hel', 'hell', 'hello', 'l', 'll', 'llo', 'lo', 'o'], 'hello', 15) == True\nassert sat(['', 'a', 'ag', 'age', 'aget', 'ageth', 'agetha', 'agethat', 'agethath', 'agethathu', 'agethathul', 'agethathuli', 'agethathulis', 'agethathulisi', 'agethathulisit', 'agethathulisite', 'agethathulisitex', 'agethathulisitext', 'agethathulisitexta', 'agethathulisitextan', 'agethathulisitextany', 'agethathulisitextanyp', 'an', 'any', 'anyp', 'at', 'ath', 'athu', 'athul', 'athuli', 'athulis', 'athulisi', 'athulisit', 'athulisite', 'athulisitex', 'athulisitext', 'athulisitexta', 'athulisitextan', 'athulisitextany', 'athulisitextanyp', 'e', 'ek', 'eku', 'ekug', 'ekuga', 'ekugag', 'ekugage', 'ekugaget', 'ekugageth', 'ekugagetha', 'ekugagethat', 'ekugagethath', 'ekugagethathu', 'ekugagethathul', 'ekugagethathuli', 'ekugagethathulis', 'ekugagethathulisi', 'ekugagethathulisit', 'ekugagethathulisite', 'ekugagethathulisitex', 'ekugagethathulisitext', 'ekugagethathulisitexta', 'ekugagethathulisitextan', 'ekugagethathulisitextany', 'ekugagethathulisitextanyp', 'et', 'eth', 'etha', 'ethat', 'ethath', 'ethathu', 'ethathul', 'ethathuli', 'ethathulis', 'ethathulisi', 'ethathulisit', 'ethathulisite', 'ethathulisitex', 'ethathulisitext', 'ethathulisitexta', 'ethathulisitextan', 'ethathulisitextany', 'ethathulisitextanyp', 'ex', 'ext', 'exta', 'extan', 'extany', 'extanyp', 'g', 'ga', 'gag', 'gage', 'gaget', 'gageth', 'gagetha', 'gagethat', 'gagethath', 'gagethathu', 'gagethathul', 'gagethathuli', 'gagethathulis', 'gagethathulisi', 'gagethathulisit', 'gagethathulisite', 'gagethathulisitex', 'gagethathulisitext', 'gagethathulisitexta', 'gagethathulisitextan', 'gagethathulisitextany', 'gagethathulisitextanyp', 'ge', 'get', 'geth', 'getha', 'gethat', 'gethath', 'gethathu', 'gethathul', 'gethathuli', 'gethathulis', 'gethathulisi', 'gethathulisit', 'gethathulisite', 'gethathulisitex', 'gethathulisitext', 'gethathulisitexta', 'gethathulisitextan', 'gethathulisitextany', 'gethathulisitextanyp', 'h', 'ha', 'hat', 'hath', 'hathu', 'hathul', 'hathuli', 'hathulis', 'hathulisi', 'hathulisit', 'hathulisite', 'hathulisitex', 'hathulisitext', 'hathulisitexta', 'hathulisitextan', 'hathulisitextany', 'hathulisitextanyp', 'hu', 'hul', 'huli', 'hulis', 'hulisi', 'hulisit', 'hulisite', 'hulisitex', 'hulisitext', 'hulisitexta', 'hulisitextan', 'hulisitextany', 'hulisitextanyp', 'i', 'is', 'isi', 'isit', 'isite', 'isitex', 'isitext', 'isitexta', 'isitextan', 'isitextany', 'isitextanyp', 'it', 'ite', 'itex', 'itext', 'itexta', 'itextan', 'itextany', 'itextanyp', 'ix', 'ixe', 'ixek', 'ixeku', 'ixekug', 'ixekuga', 'ixekugag', 'ixekugage', 'ixekugaget', 'ixekugageth', 'ixekugagetha', 'ixekugagethat', 'ixekugagethath', 'ixekugagethathu', 'ixekugagethathul', 'ixekugagethathuli', 'ixekugagethathulis', 'ixekugagethathulisi', 'ixekugagethathulisit', 'ixekugagethathulisite', 'ixekugagethathulisitex', 'ixekugagethathulisitext', 'ixekugagethathulisitexta', 'ixekugagethathulisitextan', 'ixekugagethathulisitextany', 'ixekugagethathulisitextanyp', 'k', 'ku', 'kug', 'kuga', 'kugag', 'kugage', 'kugaget', 'kugageth', 'kugagetha', 'kugagethat', 'kugagethath', 'kugagethathu', 'kugagethathul', 'kugagethathuli', 'kugagethathulis', 'kugagethathulisi', 'kugagethathulisit', 'kugagethathulisite', 'kugagethathulisitex', 'kugagethathulisitext', 'kugagethathulisitexta', 'kugagethathulisitextan', 'kugagethathulisitextany', 'kugagethathulisitextanyp', 'l', 'li', 'lis', 'lisi', 'lisit', 'lisite', 'lisitex', 'lisitext', 'lisitexta', 'lisitextan', 'lisitextany', 'lisitextanyp', 'n', 'ny', 'nyp', 'p', 'r', 'ry', 'ryw', 'rywi', 'rywix', 'rywixe', 'rywixek', 'rywixeku', 'rywixekug', 'rywixekuga', 'rywixekugag', 'rywixekugage', 'rywixekugaget', 'rywixekugageth', 'rywixekugagetha', 'rywixekugagethat', 'rywixekugagethath', 'rywixekugagethathu', 'rywixekugagethathul', 'rywixekugagethathuli', 'rywixekugagethathulis', 'rywixekugagethathulisi', 'rywixekugagethathulisit', 'rywixekugagethathulisite', 'rywixekugagethathulisitex', 'rywixekugagethathulisitext', 'rywixekugagethathulisitexta', 'rywixekugagethathulisitextan', 'rywixekugagethathulisitextany', 'rywixekugagethathulisitextanyp', 's', 'si', 'sit', 'site', 'sitex', 'sitext', 'sitexta', 'sitextan', 'sitextany', 'sitextanyp', 't', 'ta', 'tan', 'tany', 'tanyp', 'te', 'tex', 'text', 'texta', 'textan', 'textany', 'textanyp', 'th', 'tha', 'that', 'thath', 'thathu', 'thathul', 'thathuli', 'thathulis', 'thathulisi', 'thathulisit', 'thathulisite', 'thathulisitex', 'thathulisitext', 'thathulisitexta', 'thathulisitextan', 'thathulisitextany', 'thathulisitextanyp', 'thu', 'thul', 'thuli', 'thulis', 'thulisi', 'thulisit', 'thulisite', 'thulisitex', 'thulisitext', 'thulisitexta', 'thulisitextan', 'thulisitextany', 'thulisitextanyp', 'u', 'ug', 'uga', 'ugag', 'ugage', 'ugaget', 'ugageth', 'ugagetha', 'ugagethat', 'ugagethath', 'ugagethathu', 'ugagethathul', 'ugagethathuli', 'ugagethathulis', 'ugagethathulisi', 'ugagethathulisit', 'ugagethathulisite', 'ugagethathulisitex', 'ugagethathulisitext', 'ugagethathulisitexta', 'ugagethathulisitextan', 'ugagethathulisitextany', 'ugagethathulisitextanyp', 'ul', 'uli', 'ulis', 'ulisi', 'ulisit', 'ulisite', 'ulisitex', 'ulisitext', 'ulisitexta', 'ulisitextan', 'ulisitextany', 'ulisitextanyp', 'w', 'wi', 'wix', 'wixe', 'wixek', 'wixeku', 'wixekug', 'wixekuga', 'wixekugag', 'wixekugage', 'wixekugaget', 'wixekugageth', 'wixekugagetha', 'wixekugagethat', 'wixekugagethath', 'wixekugagethathu', 'wixekugagethathul', 'wixekugagethathuli', 'wixekugagethathulis', 'wixekugagethathulisi', 'wixekugagethathulisit', 'wixekugagethathulisite', 'wixekugagethathulisitex', 'wixekugagethathulisitext', 'wixekugagethathulisitexta', 'wixekugagethathulisitextan', 'wixekugagethathulisitextany', 'wixekugagethathulisitextanyp', 'x', 'xe', 'xek', 'xeku', 'xekug', 'xekuga', 'xekugag', 'xekugage', 'xekugaget', 'xekugageth', 'xekugagetha', 'xekugagethat', 'xekugagethath', 'xekugagethathu', 'xekugagethathul', 'xekugagethathuli', 'xekugagethathulis', 'xekugagethathulisi', 'xekugagethathulisit', 'xekugagethathulisite', 'xekugagethathulisitex', 'xekugagethathulisitext', 'xekugagethathulisitexta', 'xekugagethathulisitextan', 'xekugagethathulisitextany', 'xekugagethathulisitextanyp', 'xt', 'xta', 'xtan', 'xtany', 'xtanyp', 'y', 'yp', 'yw', 'ywi', 'ywix', 'ywixe', 'ywixek', 'ywixeku', 'ywixekug', 'ywixekuga', 'ywixekugag', 'ywixekugage', 'ywixekugaget', 'ywixekugageth', 'ywixekugagetha', 'ywixekugagethat', 'ywixekugagethath', 'ywixekugagethathu', 'ywixekugagethathul', 'ywixekugagethathuli', 'ywixekugagethathulis', 'ywixekugagethathulisi', 'ywixekugagethathulisit', 'ywixekugagethathulisite', 'ywixekugagethathulisitex', 'ywixekugagethathulisitext', 'ywixekugagethathulisitexta', 'ywixekugagethathulisitextan', 'ywixekugagethathulisitextany', 'ywixekugagethathulisitextanyp'], 'rywixekugagethathulisitextanyp', 451) == True\nassert sat(['', 'a', 'aj', 'aji', 'ajit', 'ajith', 'ajithi', 'ajithib', 'ajithiba', 'ajithiban', 'an', 'b', 'ba', 'ban', 'e', 'et', 'ety', 'etyv', 'etyve', 'etyvez', 'etyvezi', 'etyvezit', 'etyvezita', 'etyvezitaj', 'etyvezitaji', 'etyvezitajit', 'etyvezitajith', 'etyvezitajithi', 'etyvezitajithib', 'etyvezitajithiba', 'etyvezitajithiban', 'ez', 'ezi', 'ezit', 'ezita', 'ezitaj', 'ezitaji', 'ezitajit', 'ezitajith', 'ezitajithi', 'ezitajithib', 'ezitajithiba', 'ezitajithiban', 'h', 'hi', 'hib', 'hiba', 'hiban', 'i', 'ib', 'iba', 'iban', 'it', 'ita', 'itaj', 'itaji', 'itajit', 'itajith', 'itajithi', 'itajithib', 'itajithiba', 'itajithiban', 'ith', 'ithi', 'ithib', 'ithiba', 'ithiban', 'j', 'ji', 'jit', 'jith', 'jithi', 'jithib', 'jithiba', 'jithiban', 'n', 't', 'ta', 'taj', 'taji', 'tajit', 'tajith', 'tajithi', 'tajithib', 'tajithiba', 'tajithiban', 'th', 'thi', 'thib', 'thiba', 'thiban', 'ty', 'tyv', 'tyve', 'tyvez', 'tyvezi', 'tyvezit', 'tyvezita', 'tyvezitaj', 'tyvezitaji', 'tyvezitajit', 'tyvezitajith', 'tyvezitajithi', 'tyvezitajithib', 'tyvezitajithiba', 'tyvezitajithiban', 'v', 've', 'vez', 'vezi', 'vezit', 'vezita', 'vezitaj', 'vezitaji', 'vezitajit', 'vezitajith', 'vezitajithi', 'vezitajithib', 'vezitajithiba', 'vezitajithiban', 'x', 'xe', 'xet', 'xety', 'xetyv', 'xetyve', 'xetyvez', 'xetyvezi', 'xetyvezit', 'xetyvezita', 'xetyvezitaj', 'xetyvezitaji', 'xetyvezitajit', 'xetyvezitajith', 'xetyvezitajithi', 'xetyvezitajithib', 'xetyvezitajithiba', 'xetyvezitajithiban', 'y', 'yv', 'yve', 'yvez', 'yvezi', 'yvezit', 'yvezita', 'yvezitaj', 'yvezitaji', 'yvezitajit', 'yvezitajith', 'yvezitajithi', 'yvezitajithib', 'yvezitajithiba', 'yvezitajithiban', 'z', 'zi', 'zit', 'zita', 'zitaj', 'zitaji', 'zitajit', 'zitajith', 'zitajithi', 'zitajithib', 'zitajithiba', 'zitajithiban'], 'xetyvezitajithiban', 165) == True\nassert sat(['', 'a', 'ac', 'acy', 'acyt', 'c', 'cy', 'cyt', 'h', 'ha', 'hac', 'hacy', 'hacyt', 't', 'th', 'tha', 'thac', 'thacy', 'thacyt', 'y', 'yt'], 'thacyt', 21) == True\nassert sat([], 'hello', 15) == False\nassert sat(['', 'e', 'el', 'ell', 'ello', 'h', 'he', 'hel', 'hell', 'hello', 'l', 'll', 'llo', 'lo', 'o'], '', 15) == False", "entry_fn_name": "sat"}
{"id": "349", "text": "Find a string with a certain number of copies of a given substring and of a given length", "solution": "def sat(string: str, substring, count, length):\n    return string.count(substring) == count and len(string) == length", "title": "TP3/StrCount", "testing_code": "assert sat('aaaaaaaaaa^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^', 'a', 10, 100) == True\nassert sat('kykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykykyky^', 'ky', 66, 133) == True\nassert sat('jepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepyjepy^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^', 'jepy', 87, 650) == True\nassert sat('hothyfythothyfythothyfyt^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^', 'hothyfyt', 3, 417) == True\nassert sat('mozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmozmoz', 'moz', 70, 210) == True\nassert sat('aaaaaaaaaa^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^', '', 10, 100) == False\nassert sat('', 'a', 10, 100) == False", "entry_fn_name": "sat"}
{"id": "350", "text": "Find a string of a given length with a certain split", "solution": "def sat(x: str, parts, length):\n    return len(x) == length and x.split() == parts", "title": "TP3/StrSplit", "testing_code": "assert sat('I love dumplings !                                                                                  ', ['I', 'love', 'dumplings', '!'], 100) == True\nassert sat('thala chaliriliq chufyselikizap                                                                                     ', ['thala', 'chaliriliq', 'chufyselikizap'], 116) == True\nassert sat('lepytextati ki fy                                                    ', ['lepytextati', 'ki', 'fy'], 69) == True\nassert sat('quyhigechyhy                          ', ['quyhigechyhy'], 38) == True\nassert sat('je pojacyda papucet wesobaq             ', ['je', 'pojacyda', 'papucet', 'wesobaq'], 40) == True\nassert sat('I love dumplings !                                                                                  ', [], 100) == False\nassert sat('', ['I', 'love', 'dumplings', '!'], 100) == False", "entry_fn_name": "sat"}
{"id": "351", "text": "Find a separator that when used to split a given string gives a certain result", "solution": "def sat(x: str, parts, string):\n    return string.split(x) == parts", "title": "TP3/StrSplitter", "testing_code": "assert sat('_', ['I', 'love', 'dumplings', '!', ''], 'I_love_dumplings_!_') == True\nassert sat('textihocavikirofegyf', ['kowot', 'quimimy'], 'kowottextihocavikirofegyfquimimy') == True\nassert sat('det', ['f', 'thixaresiquagipoquas', 'fytylu', 'jywaxaw'], 'fdetthixaresiquagipoquasdetfytyludetjywaxaw') == True\nassert sat('hocyxi', ['tibuzumurun', 'hakebixutextolonyf', 'bothuraquobara'], 'tibuzumurunhocyxihakebixutextolonyfhocyxibothuraquobara') == True\nassert sat('fyhacho', ['fitextu', 'chythawequeku', 'th'], 'fitextufyhachochythawequekufyhachoth') == True\nassert sat('_', ['I', 'love', 'dumplings', '!', ''], '') == False\nassert sat('_', [], 'I_love_dumplings_!_') == False", "entry_fn_name": "sat"}
{"id": "352", "text": "Find a separator that when used to join a given string gives a certain result.\nThis is related to the previous problem but there are some edge cases that differ.", "solution": "def sat(x: str, parts, string):\n    return x.join(parts) == string", "title": "TP3/StrJoiner", "testing_code": "assert sat('!!', ['I!!', '!love', 'dumplings', '!', ''], 'I!!!!!love!!dumplings!!!!!') == True\nassert sat('', ['tatext'], 'tatext') == True\nassert sat('', [], '') == True\nassert sat('', ['ruquug'], 'ruquug') == True\nassert sat('pyjet', ['numegixuly', 'koxyfihimurukothasyl'], 'numegixulypyjetkoxyfihimurukothasyl') == True\nassert sat('!!', ['I!!', '!love', 'dumplings', '!', ''], '') == False\nassert sat(\"''\", '[]', \"''\") == False\nassert sat('', ['I!!', '!love', 'dumplings', '!', ''], 'I!!!!!love!!dumplings!!!!!') == False\nassert sat('!!', [], 'I!!!!!love!!dumplings!!!!!') == False", "entry_fn_name": "sat"}
{"id": "353", "text": "Find parts that when joined give a specific string.", "solution": "def sat(parts: List[str], sep, string):\n    return sep.join(parts) == string and all((sep not in p for p in parts))", "title": "TP3/StrParts", "testing_code": "assert sat(['I', '', '!love', 'dumplings', '', '!'], '!!', 'I!!!!!love!!dumplings!!!!!') == True\nassert sat(['watalachyquu', 'ba'], 'jachasurobithu', 'watalachyquujachasurobithuba') == True\nassert sat(['bolifotinuwywyjoch', 'zyvu', 'nifajatexteth', 'focharatefymoji'], 'xusoquyvamathila', 'bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji') == True\nassert sat([''], 'chixachal', '') == True\nassert sat(['bif', 'zulothanodugedusi', 'li', 'hobegikofero'], 'lochuv', 'biflochuvzulothanodugedusilochuvlilochuvhobegikofero') == True\nassert sat(['I', '', '!love', 'dumplings', '', '!'], '', 'I!!!!!love!!dumplings!!!!!') == False\nassert sat(['I', '', '!love', 'dumplings', '', '!'], '!!', '') == False\nassert sat([], '!!', 'I!!!!!love!!dumplings!!!!!') == False", "entry_fn_name": "sat"}
{"id": "354", "text": "Find a list that when multiplied n times gives the target list", "solution": "def sat(li: List[int], target, n):\n    return li * n == target", "title": "TP3/ListMul", "testing_code": "assert sat([17, 9, -1], [17, 9, -1, 17, 9, -1], 2) == True\nassert sat([-69358], [-69358, -69358, -69358, -69358, -69358, -69358, -69358], 7) == True\nassert sat([-51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344], [-51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344], 8) == True\nassert sat([], [], 0) == True\nassert sat([-25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766], [-25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766], 4) == True\nassert sat([17, 9, -1], [], 2) == False\nassert sat([], [17, 9, -1, 17, 9, -1], 2) == False", "entry_fn_name": "sat"}
{"id": "355", "text": "Find a list of a given length n", "solution": "def sat(li: List[int], n):\n    return len(li) == n", "title": "TP3/ListLen", "testing_code": "assert sat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 969) == True\nassert sat([1, 1, 1, 1, 1, 1, 1, 1, 1], 9) == True\nassert sat([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 324) == True\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1]', '9') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '324') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '324') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1]', '324') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '969') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '969') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '9') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1]', '969') == False\nassert sat('[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '9') == False\nassert sat([], 969) == False", "entry_fn_name": "sat"}
{"id": "356", "text": "Find the index of an item in a list. Any such index is fine.", "solution": "def sat(i: int, li, target):\n    return li[i] == target", "title": "TP3/ListAt", "testing_code": "assert sat(3, [17, 31, 91, 18, 42, 1, 9], 18) == True\nassert sat(2, [-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], 73) == True\nassert sat(1, [99, 51, -28, -69, -90, -15, 7, -67], 51) == True\nassert sat(2, [-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], 13) == True\nassert sat(8, [51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], 11) == True\nassert sat(5, [17, 31, 91, 18, 42, 1, 9], 11) == False\nassert sat(5, [17, 31, 91, 18, 42, 1, 9], 51) == False\nassert sat(1, [17, 31, 91, 18, 42, 1, 9], 5) == False\nassert sat(3, [17, 31, 91, 18, 42, 1, 9], 5) == False\nassert sat(5, [17, 31, 91, 18, 42, 1, 9], 18) == False\nassert sat(5, [17, 31, 91, 18, 42, 1, 9], 13) == False\nassert sat(2, [17, 31, 91, 18, 42, 1, 9], 5) == False\nassert sat(3, [17, 31, 91, 18, 42, 1, 9], 5) == False\nassert sat(1, [17, 31, 91, 18, 42, 1, 9], 5) == False\nassert sat(3, [17, 31, 91, 18, 42, 1, 9], 5) == False", "entry_fn_name": "sat"}
{"id": "357", "text": "Find the index of an item in a list using negative indexing.", "solution": "def sat(i: int, li, target):\n    return li[i] == target and i < 0", "title": "TP3/ListNegAt", "testing_code": "assert sat(-5, [17, 31, 91, 18, 42, 1, 9], 91) == True\nassert sat(-3, [78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], -39) == True\nassert sat(-8, [-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], -42) == True\nassert sat(-11, [41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], 53) == True\nassert sat(-1, [95, 51, 76, 63, -97, -32], -32) == True\nassert sat(-1, [0], -32) == False\nassert sat(-1, [0], 53) == False\nassert sat(-1, [0], 91) == False\nassert sat(-1, [0], 53) == False\nassert sat(-1, [0], 91) == False\nassert sat(-1, [0], 53) == False\nassert sat(-1, [0], -32) == False\nassert sat(-1, [0], 91) == False\nassert sat(-1, [0], 91) == False\nassert sat(-1, [0], -42) == False", "entry_fn_name": "sat"}
{"id": "358", "text": "Find three slice indices to achieve a given list slice", "solution": "def sat(inds: List[int], li, target):\n    (i, j, k) = inds\n    return li[i:j:k] == target", "title": "TP3/ListSlice", "testing_code": "assert sat([-2, -7, -2], [42, 18, 21, 103, -2, 11], [-2, 21, 42]) == True\nassert sat([-3, -12, -12], [-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], [-67]) == True\nassert sat([-6, -2, 1], [-53, -81, -92, 22, -67], [-53, -81, -92]) == True\nassert sat([-4, -10, -10], [-72, 70, 50, -41, 94, -82, -74, 8, -23], [-82]) == True\nassert sat([-10, -12, -12], [26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], [-25]) == True\nassert sat([-2, -7, -2], [42, 18, 21, 103, -2, 11], []) == False\nassert sat([-2, -7, -2], [], [-2, 21, 42]) == False", "entry_fn_name": "sat"}
{"id": "359", "text": "Find the item whose first index in li is index", "solution": "def sat(item: int, li, index):\n    return li.index(item) == index", "title": "TP3/ListIndex", "testing_code": "assert sat(11, [17, 2, 3, 9, 11, 11], 4) == True\nassert sat(-56, [93, -13, -56, 19], 2) == True\nassert sat(4, [-79, 49, 4, -75, -66, -76, 37, -62, -35, -79, 68, 82, -11, -71, 63, -82, 22, 65], 2) == True\nassert sat(-49, [96, -61, 50, -49, -1, -23, -35], 3) == True\nassert sat(26, [26, -90, 89], 0) == True\nassert sat('4', '[96, -61, 50, -49, -1, -23, -35]', '3') == False\nassert sat('26', '[26, -90, 89]', '3') == False\nassert sat('-56', '[93, -13, -56, 19]', '3') == False\nassert sat('26', '[26, -90, 89]', '0') == False\nassert sat('-56', '[93, -13, -56, 19]', '4') == False\nassert sat('-49', '[96, -61, 50, -49, -1, -23, -35]', '3') == False\nassert sat('11', '[17, 2, 3, 9, 11, 11]', '4') == False\nassert sat('11', '[17, 2, 3, 9, 11, 11]', '3') == False\nassert sat('4', '[96, -61, 50, -49, -1, -23, -35]', '4') == False\nassert sat('-56', '[93, -13, -56, 19]', '0') == False", "entry_fn_name": "sat"}
{"id": "360", "text": "Find an item that is in both lists a and b", "solution": "def sat(s: str, a, b):\n    return s in a and s in b", "title": "TP3/ListIn", "testing_code": "assert sat('dot', ['cat', 'dot', 'bird'], ['tree', 'fly', 'dot']) == True\nassert sat('chywadetextekesyjup', ['xetex', 'jomuboxuc', 'nyfiranuri', 'curu', 'jehykexethinun', 'bumekynuxinit', 'cymelatabegi', 'jumuvufotextasa', 'cotharasyfukakiwoc', 'fuvyvavi', 'gohavelomet', 'hibymomotohywehathi', 'jyzucakaq', 'chihyx', 'wukikogy', 'pegydozetebegafugyf', 'chywadetextekesyjup', 'xysecaw', 'ryzafusul', 'lojychurep', 'vivutolimifa', 'pysiquikywoty', 'thitexturykasoquifet', 'va', 'nagetextilac', 'tex', 'zechocha', 'susatexty', 'ch'], ['vesaredu', 'textyjun', 'hijilenafotycoch', 'fofytextulidajekymos', 'thudothukuzaxug', 'dythezutolihibinafyj', 'hadid', 'zyly', 'mu', 'chywadetextekesyjup', 'zekyrivequi', 'pebycipohivam', 'texterekuwudut', 'c', 'sanidithuh', 'ritextuchik', 'ny', 'cym', 'cirok', 'kavuquithochazethej', 'zikechep', 'kesitabuduzu', 'duchequ', 'fuluhesowyjugehusab', 'tof', 'tu', 'textichagekochoquovo', 'bo', 'thac', 'hytextac', 'nerehufymex', 'jezyletextiquebositi', 'm', 'kathithowefyvoced', 'rityjivoxadydyzatiq', 'nuxaritutebacygevyq', 'thyjaxirumenaquuxy', 'gizydylot', 'textite', 'guchikek', 'fas', 'pabipapiro', 'fechiduchu', 'pexijis', 'gojep', 'quinatextit', 'chaqu', 'xyxyjos', 'pudibothytigiwumucex', 'josadubizy', 'jy', 'komazibomapothequev', 'licogatextuliletuxi', 'gus', 'nylyxyjibikimet', 'tafo']) == True\nassert sat('q', ['bututimatabel', 'zezahabiry', 'mipytext', 'bujokacyrulihir', 'cyvagofaquothoseza', 'guhebalequepytex', 'tyhithuthygatextity', 'chizichuc', 'textoxodenekokechona', 'texte', 'mygafifet', 'vixathokivy', 'xe', 'moq', 'quokopy', 'cixoka', 'wiz', 'wyturasutabidipif', 'q', 'gochujuvub', 'textogow', 'rogizasog', 'fimoxynudob', 'byjythohimowyquich', 'moduxatanogococ', 'tunuchikywichykyxyge', 'namixotextes', 'nocoguthosoxonahu', 'xorydyhi', 'dadohojex', 'pi', 'wiquocaso', 'tyjegu', 'juquath', 'dythufyn', 'sehafur', 'sylupivyzequefujet', 'hotextylyquahudivov', 'wunich', 'fijyhilyc', 'rirymequunezuv', 'zizunylihadowys', 'zesuxikevaquus', 'thecisequevyth', 'cucyquefytextu', 'xy', 'quuxin', 'miherahita', 'texatextoxyta', 'tythyjuly', 'tehesyju', 'reg', 'ridilusycanejap', 'fo', 'chucatazyrejucathibi', 'textythacete', 'huhiquekychyh', 'xykuvebylyhinyc', 'zadedixoxoparyducena', 'wycathomoniva', 'textuwuwathiziq', 'textijiw', 'rigidichukuchexorute', 'majixodokalij', 'hexebitoxumuvodese', 'hybat', 'thojutextomochote', 'textaxuquyg', 'queluhatex'], ['gume', 'zatum', 'kochaxybupy', 'gex', 'vithiby', 'lygarethaquedehabub', 'tochek', 'v', 'wis', 'remywerinyboweropot', 'nybichychafizurup', 'zokabugyc', 'ny', 'moruwicoponuricuw', 'zirijikuhabivywah', 'dus', 'toxirit', 'gilanih', 'hif', 'vuhezobinehahewi', 'quujihus', 'chej', 'g', 'pypomaquiwusisyvuma', 'to', 'c', 'chutesumalanozeb', 'chupehozukiquodisese', 'xygiwot', 'semubaquav', 'pihiwidosudetextet', 'quegatagicu', 'quutydychy', 'chuzeby', 'jefythasapag', 'bytathoti', 'thimobaquykisabepec', 'saluwax', 'thi', 'kyneroravexuquoto', 'jusudybahebuxypepahe', 'f', 'zapufefek', 'mumogawen', 'quotyhot', 'hybamukelo', 'picatextujycotodyj', 'be', 'pytextyfa', 'tile', 'dotextazuchubuk', 'choguc', 'wi', 'setepicydavumahebe', 'wyjo', 'mirukuwyfuwihoqu', 'q', 'kegytegu', 'kegoquibyguxexajebid', 'hyfech', 'humovomefoly', 'tupetox', 'gevogibax', 'vuxotext', 'miluparaj', 'bathad', 'tily', 'theranydygiryc', 'dasaxatext', 'guhebalequepytex', 'v', 'gocuxomecapylewaj']) == True\nassert sat('namychyt', ['thachak', 'xuchyzyzazi', 'bilewejoquowylo', 'chogokim', 'kuloxozu', 'capokaf', 'didadadejunukosazi', 'zethucun', 'tygorub', 'lochydigyt', 'dyquuhycusi', 'wagupolovapy', 'chowace', 'zozawethychax', 'xohuhuqui', 'tatylisigar', 'c', 'kakopuzysycasewit', 'rekatebinidyvuchitet', 'popi', 'chepebaze', 'textut', 'fymehap', 'c', 'wodumogovolacabasot', 'tixihidafutexto', 'dycubichucyneweve', 'setofa', 'cudaxediquy', 'namof', 'qua', 'chetextof', 'cochydededaxyzuj', 'winutaj', 'nidyjutothovobydizy', 'sichequaxohojethihy', 'cubusycip', 'pynoconic', 'kyt', 'thop', 'kewotochelocyboz', 'z', 'c', 'q', 'bonyquyx', 'jothec', 'fyzozynygiperythada', 'lipadatuzisaduthyt', 'nithujyxymethot', 'vewariq', 'nejitextole', 'raxiv', 'hamim', 'qua', 'kytextehekaryp', 'jaquu', 'wozuthevith', 'f', 'jugevizyfu', 'cywo', 'w', 'surajotext', 'vilujetutitachivy', 'textequysuninutuqu', 'fevawybok', 'lythehythu', 'nykochachofitit', 'gikenadubit', 'thexyjy', 'piquyzyxichoc', 'rilaquucham', 'fa', 'mysihumotexto', 'xochogekumipoquidi', 'jimynusyte', 'textexysuzipichaw', 'mut', 'jiwyx', 'tojiwedoxevosubavy', 'dix', 'dogetexto', 'chysafyzelefocothin', 'xitext', 'machibokudyh', 'ronebupapapygyceb', 'dedytejyretavewytasi', 'jobog', 'namychyt', 'textycapudul', 'jaxybatexto', 'pamuwysafupaxowus', 'lycazivafyj', 'lelologufenofajogofi', 'thety', 'bunotextoca', 'nexaravuq', 'natu'], ['namychyt', 'mathapachobat', 'timorohopotak']) == True\nassert sat('mytext', ['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], ['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']) == True\nassert sat('dot', [], ['tree', 'fly', 'dot']) == False\nassert sat('', ['cat', 'dot', 'bird'], ['tree', 'fly', 'dot']) == False\nassert sat('dot', ['cat', 'dot', 'bird'], []) == False", "entry_fn_name": "sat"}
{"id": "361", "text": "Solve a unary negation problem", "solution": "def sat(x: int, a):\n    return -x == a", "title": "TP3/IntNeg", "testing_code": "assert sat(-93252338, 93252338) == True\nassert sat(7788910835979672, -7788910835979672) == True\nassert sat(-6734672221833987, 6734672221833987) == True\nassert sat(6405550227918699, -6405550227918699) == True\nassert sat(5741705983914418, -5741705983914418) == True\nassert sat(5, 6734672221833987) == False\nassert sat(7788910835979672, 5) == False\nassert sat(-93252338, 5) == False\nassert sat(5, 93252338) == False\nassert sat(5741705983914418, 5) == False\nassert sat(-93252338, 5) == False\nassert sat(5, 93252338) == False\nassert sat(6405550227918699, 5) == False\nassert sat(5, 6734672221833987) == False\nassert sat(6405550227918699, 5) == False", "entry_fn_name": "sat"}
{"id": "362", "text": "Solve a sum problem", "solution": "def sat(x: int, a, b):\n    return a + x == b", "title": "TP3/IntSum", "testing_code": "assert sat(71279291, 1073258, 72352549) == True\nassert sat(-6163252192617378, 7176599374880969, 1013347182263591) == True\nassert sat(14149563984814697, -6408240447142191, 7741323537672506) == True\nassert sat(1729677888070958, 1918969259925371, 3648647147996329) == True\nassert sat(-7572881935845048, 6476308373242647, -1096573562602401) == True\nassert sat('71279291', '1073258', '7741323537672506') == False\nassert sat('-6163252192617378', '1073258', '72352549') == False\nassert sat('71279291', '-6408240447142191', '72352549') == False\nassert sat('1729677888070958', '1073258', '1013347182263591') == False\nassert sat('71279291', '1073258', '-1096573562602401') == False\nassert sat('14149563984814697', '1073258', '72352549') == False\nassert sat('-6163252192617378', '1073258', '3648647147996329') == False\nassert sat('71279291', '1073258', '72352549') == False\nassert sat('1729677888070958', '1918969259925371', '72352549') == False\nassert sat('1729677888070958', '1073258', '7741323537672506') == False", "entry_fn_name": "sat"}
{"id": "363", "text": "Solve a subtraction problem", "solution": "def sat(x: int, a, b):\n    return x - a == b", "title": "TP3/IntSub", "testing_code": "assert sat(14545928, -382, 14546310) == True\nassert sat(510114708600341, 4461955033869751, -3951840325269410) == True\nassert sat(9395109756216391, 9688203125538303, -293093369321912) == True\nassert sat(-11992163180323546, -8057207922876252, -3934955257447294) == True\nassert sat(-5597707251882327, -5902383651753979, 304676399871652) == True\nassert sat(5, -382, 304676399871652) == False\nassert sat(14545928, 5, 14546310) == False\nassert sat(510114708600341, -382, 5) == False\nassert sat(5, -382, 14546310) == False\nassert sat(5, -382, 304676399871652) == False\nassert sat(14545928, -382, 5) == False\nassert sat(14545928, 5, 14546310) == False\nassert sat(5, -382, 14546310) == False\nassert sat(5, -382, 14546310) == False\nassert sat(14545928, -382, 5) == False", "entry_fn_name": "sat"}
{"id": "364", "text": "Solve a subtraction problem", "solution": "def sat(x: int, a, b):\n    return a - x == b", "title": "TP3/IntSub2", "testing_code": "assert sat(8758670, 8665464, -93206) == True\nassert sat(641324100487641, 1954051265970332, 1312727165482691) == True\nassert sat(-5813905657100663, -1159353965692778, 4654551691407885) == True\nassert sat(12145301943951650, 7793575617602525, -4351726326349125) == True\nassert sat(-8274806671138631, -8783800228130606, -508993556991975) == True\nassert sat(641324100487641, 5, -93206) == False\nassert sat(8758670, 8665464, 5) == False\nassert sat(641324100487641, 5, -93206) == False\nassert sat(5, 8665464, -93206) == False\nassert sat(5, 8665464, -93206) == False\nassert sat(5, 8665464, -93206) == False\nassert sat(5, 8665464, -93206) == False\nassert sat(8758670, 5, -93206) == False\nassert sat(8758670, 5, -93206) == False\nassert sat(8758670, 5, -93206) == False", "entry_fn_name": "sat"}
{"id": "365", "text": "Solve a multiplication problem", "solution": "def sat(n: int, a, b):\n    return b * n + a % b == a", "title": "TP3/IntMul", "testing_code": "assert sat(2860, 14302, 5) == True\nassert sat(10256, -646156, -63) == True\nassert sat(2704, 159568, 59) == True\nassert sat(-1963, -141336, 72) == True\nassert sat(25938, 855955, 33) == True\nassert sat(2860, 5, 5) == False\nassert sat(2704, 5, 5) == False\nassert sat(5, 14302, 5) == False\nassert sat(2704, 5, 59) == False\nassert sat(2860, 5, 5) == False\nassert sat(2704, 5, 5) == False\nassert sat(2860, 5, 72) == False\nassert sat(2704, 5, 5) == False\nassert sat(2860, 5, 5) == False\nassert sat(2704, 5, 33) == False", "entry_fn_name": "sat"}
{"id": "366", "text": "Solve a division problem", "solution": "def sat(n: int, a, b):\n    return b // n == a", "title": "TP3/IntDiv", "testing_code": "assert sat(7821154, 3, 23463462) == True\nassert sat(-1594400229362061, -1, 1594400229362061) == True\nassert sat(-832351538103564, 12, -9988218457242775) == True\nassert sat(-2460170864903724, 0, -1230085432451862) == True\nassert sat(9554566410382856, 1, 9554566410382856) == True\nassert sat(5, 1, 23463462) == False\nassert sat(7821154, 3, 5) == False\nassert sat(7821154, 3, 5) == False\nassert sat(7821154, 12, 5) == False\nassert sat(5, 3, 23463462) == False\nassert sat(5, 0, 23463462) == False\nassert sat(7821154, 1, 5) == False\nassert sat(7821154, 1, 5) == False\nassert sat(5, 0, 23463462) == False\nassert sat(5, 1, 23463462) == False", "entry_fn_name": "sat"}
{"id": "367", "text": "Find n that when divided by b is a", "solution": "def sat(n: int, a, b):\n    return n // b == a", "title": "TP3/IntDiv2", "testing_code": "assert sat(3453463630, 345346363, 10) == True\nassert sat(30941077428447282103938315652631, -3411193412414137, -9070455318026063) == True\nassert sat(-12118289715282572235363305729214, -1950797984487873, 6211965468307518) == True\nassert sat(5961192176596657467421978631258, 1186580710227962, 5023840456205809) == True\nassert sat(51303024139513053712431800085108, 6976962948831358, 7353202892973126) == True\nassert sat(5, 1186580710227962, 10) == False\nassert sat(5, 345346363, 10) == False\nassert sat(5, 6976962948831358, 10) == False\nassert sat(5, 345346363, 10) == False\nassert sat(3453463630, 5, 10) == False\nassert sat(5, 6976962948831358, 10) == False\nassert sat(5, 6976962948831358, 10) == False\nassert sat(3453463630, 5, 10) == False\nassert sat(5, 1186580710227962, 10) == False\nassert sat(5, 1186580710227962, 10) == False", "entry_fn_name": "sat"}
{"id": "368", "text": "Compute an integer that when squared equals perfect-square a.", "solution": "def sat(x: int, a):\n    return x ** 2 == a", "title": "TP3/IntSquareRoot", "testing_code": "assert sat(101001, 10201202001) == True\nassert sat(1617822806, 2617350631613713636) == True\nassert sat(317337692, 100703210763886864) == True\nassert sat(111872368, 12515426721927424) == True\nassert sat(847289070, 717898768141464900) == True\nassert sat(317337692, 5) == False\nassert sat(111872368, 5) == False\nassert sat(847289070, 5) == False\nassert sat(101001, 5) == False\nassert sat(111872368, 5) == False\nassert sat(101001, 5) == False\nassert sat(317337692, 5) == False\nassert sat(101001, 5) == False\nassert sat(847289070, 5) == False\nassert sat(101001, 5) == False", "entry_fn_name": "sat"}
{"id": "369", "text": "Find a negative integer that when squared equals perfect-square a.", "solution": "def sat(n: int, a):\n    return a == n * n and n < 0", "title": "TP3/IntNegSquareRoot", "testing_code": "assert sat(-100001, 10000200001) == True\nassert sat(-1074115377, 1153723843107852129) == True\nassert sat(-1392979698, 1940392439040171204) == True\nassert sat(-1121080196, 1256820805863398416) == True\nassert sat(-1000641202, 1001282815140004804) == True\nassert sat(-1074115377, 5) == False\nassert sat(-1121080196, 5) == False\nassert sat(-1392979698, 5) == False\nassert sat(-1121080196, 5) == False\nassert sat(-1000641202, 5) == False\nassert sat(5, 10000200001) == False\nassert sat(-100001, 5) == False\nassert sat(5, 10000200001) == False\nassert sat(-1074115377, 5) == False\nassert sat(-1392979698, 5) == False", "entry_fn_name": "sat"}
{"id": "370", "text": "Find a number that when squared is close to a.", "solution": "def sat(x: float, a):\n    return abs(x ** 2 - a) < 10 ** (-3)", "title": "TP3/FloatSquareRoot", "testing_code": "assert sat(31.937438845342623, 1020) == True\nassert sat(78570.2316147789, 6173281296) == True\nassert sat(89373.50110631227, 7987622700) == True\nassert sat(52274.81448078032, 2732656229) == True\nassert sat(43284.93613256233, 1873585696) == True\nassert sat(0.5, 1873585696) == False\nassert sat(0.5, 1020) == False\nassert sat(0.5, 1873585696) == False\nassert sat(0.5, 7987622700) == False\nassert sat(0.5, 2732656229) == False\nassert sat(0.5, 1020) == False\nassert sat(0.5, 6173281296) == False\nassert sat(0.5, 1020) == False\nassert sat(0.5, 1020) == False\nassert sat(0.5, 6173281296) == False", "entry_fn_name": "sat"}
{"id": "371", "text": "Find a negative number that when squared is close to a.", "solution": "def sat(x: float, a):\n    return abs(x ** 2 - a) < 10 ** (-3) and x < 0", "title": "TP3/FloatNegSquareRoot", "testing_code": "assert sat(-31.937438845342623, 1020) == True\nassert sat(-51781.03416309875, 2681275499) == True\nassert sat(-36928.488257712364, 1363713245) == True\nassert sat(-62118.46265000447, 3858703402) == True\nassert sat(-61683.808418417226, 3804892221) == True\nassert sat(0.5, 1363713245) == False\nassert sat(0.5, 3858703402) == False\nassert sat(0.5, 1020) == False\nassert sat(0.5, 1363713245) == False\nassert sat(0.5, 1020) == False\nassert sat(0.5, 3858703402) == False\nassert sat(0.5, 2681275499) == False\nassert sat(0.5, 1363713245) == False\nassert sat(0.5, 3858703402) == False\nassert sat(0.5, 1363713245) == False", "entry_fn_name": "sat"}
{"id": "372", "text": "Find a string that when concatenated onto 'Hello ' gives 'Hello world'.", "solution": "def sat(s: str):\n    return 'Hello ' + s == 'Hello world'", "title": "TP3/Tutorial1", "testing_code": "assert sat('world') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "373", "text": "Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world'.", "solution": "def sat(s: str):\n    return 'Hello ' + s[::-1] == 'Hello world'", "title": "TP3/Tutorial2", "testing_code": "assert sat('dlrow') == True\nassert sat('') == False", "entry_fn_name": "sat"}
{"id": "374", "text": "Find a list of two integers whose sum is 3.", "solution": "def sat(x: List[int]):\n    return len(x) == 2 and sum(x) == 3", "title": "TP3/Tutorial3", "testing_code": "assert sat([1, 2]) == True\nassert sat([]) == False", "entry_fn_name": "sat"}
{"id": "375", "text": "Find an integer whose perfect square begins with 123456789 in its decimal representation.", "solution": "def sat(n: int):\n    return str(n * n).startswith('123456789')", "title": "TP3/Tutorial5", "testing_code": "assert sat(351364183) == True\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False\nassert sat(5) == False", "entry_fn_name": "sat"}
